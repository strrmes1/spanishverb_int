# main.py - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏

import streamlit as st
import os
import requests
from urllib.parse import urlencode
import base64
import datetime
import time
import random
import math
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass, asdict
from enum import Enum

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤
from localization.translations import (
    get_text, get_grammar_rule, get_available_languages, 
    get_current_language, set_language, t
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
st.set_page_config(
    page_title="Spanish Verb Trainer",
    page_icon="üá™üá∏",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ... (–∑–¥–µ—Å—å –æ—Å—Ç–∞–µ—Ç—Å—è –≤–µ—Å—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ —Å –∫–ª–∞—Å—Å–∞–º–∏, –¥–∞–Ω–Ω—ã–º–∏ –≥–ª–∞–≥–æ–ª–æ–≤, etc.)

def show_language_selector():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä —è–∑—ã–∫–∞ –≤ —Å–∞–π–¥–±–∞—Ä–µ"""
    st.markdown("### " + t('language'))
    
    available_languages = get_available_languages()
    current_language = get_current_language()
    
    # –°–æ–∑–¥–∞–µ–º selectbox –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    selected_language = st.selectbox(
        label="Choose language",
        options=list(available_languages.keys()),
        format_func=lambda x: available_languages[x],
        index=list(available_languages.keys()).index(current_language),
        key="language_selector",
        label_visibility="collapsed"
    )
    
    # –ï—Å–ª–∏ —è–∑—ã–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
    if selected_language != current_language:
        set_language(selected_language)
        st.rerun()

def show_welcome_page():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —è–∑—ã–∫–æ–≤"""
    
    # –°–µ–ª–µ–∫—Ç–æ—Ä —è–∑—ã–∫–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏
    col1, col2, col3 = st.columns([2, 1, 2])
    with col2:
        show_language_selector()
    
    st.markdown(f"""
    <div style="text-align: center; padding: 3rem 0;">
        <h1 style="font-size: 4rem; color: #2d3748; margin-bottom: 1rem;">
            {t('app_title')}
        </h1>
        <h3 style="color: #718096; font-weight: 400; margin-bottom: 3rem;">
            {t('welcome_subtitle')}
        </h3>
    </div>
    """, unsafe_allow_html=True)
    
    # –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown(f"""
        <div style="text-align: center; padding: 2rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 1rem; margin: 1rem 0; height: 200px; display: flex; flex-direction: column; justify-content: center;">
            <h3>{t('smart_repetition')}</h3>
            <p>{t('smart_repetition_desc')}</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div style="text-align: center; padding: 2rem; background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); color: white; border-radius: 1rem; margin: 1rem 0; height: 200px; display: flex; flex-direction: column; justify-content: center;">
            <h3>{t('detailed_stats')}</h3>
            <p>{t('detailed_stats_desc')}</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown(f"""
        <div style="text-align: center; padding: 2rem; background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%); color: white; border-radius: 1rem; margin: 1rem 0; height: 200px; display: flex; flex-direction: column; justify-content: center;">
            <h3>{t('cloud_sync')}</h3>
            <p>{t('cloud_sync_desc')}</p>
        </div>
        """, unsafe_allow_html=True)
    
    # –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞
    st.markdown("<br><br>", unsafe_allow_html=True)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OAuth URL
    state = base64.urlsafe_b64encode(os.urandom(32)).decode('utf-8')
    st.session_state.oauth_state = state
    
    params = {
        'client_id': GOOGLE_CLIENT_ID,
        'redirect_uri': REDIRECT_URI,
        'scope': 'openid email profile',
        'response_type': 'code',
        'state': state,
        'access_type': 'offline',
        'prompt': 'consent'
    }
    
    auth_url = f"{GOOGLE_AUTH_URL}?{urlencode(params)}"
    
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.markdown(f"""
        <div style="text-align: center;">
            <a href="{auth_url}" target="_self" style="text-decoration: none;">
                <button style="
                    background: linear-gradient(135deg, #4285f4, #34a853);
                    color: white;
                    padding: 1rem 3rem;
                    border: none;
                    border-radius: 25px;
                    font-size: 1.2rem;
                    font-weight: bold;
                    cursor: pointer;
                    box-shadow: 0 4px 15px rgba(66, 133, 244, 0.3);
                    transition: all 0.3s ease;
                    width: 100%;
                " onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">
                    {t('login_google')}
                </button>
            </a>
        </div>
        """, unsafe_allow_html=True)

def show_main_app():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —è–∑—ã–∫–æ–≤"""
    reset_daily_stats()
    
    user_info = st.session_state.user_info
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title(t('app_title'))
    st.caption(f"{t('welcome_back')}, {user_info.get('name')}! {t('welcome_subtitle')}")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        show_user_panel()
        show_sidebar_content()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    show_learning_interface()

def show_user_panel():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —è–∑—ã–∫–æ–≤"""
    user_info = st.session_state.user_info
    
    st.markdown(f"""
    <div class="user-panel">
        <strong>üë§ {user_info.get('name')}</strong><br>
        <small>{user_info.get('email')}</small>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button(t('sync'), use_container_width=True):
            save_user_data()
            st.success(t('synced'))
    
    with col2:
        if st.button(t('logout'), use_container_width=True):
            logout()
            st.rerun()

def show_sidebar_content():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —è–∑—ã–∫–æ–≤"""
    
    # –°–µ–ª–µ–∫—Ç–æ—Ä —è–∑—ã–∫–∞
    show_language_selector()
    st.markdown("---")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    st.subheader(t('settings'))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    current_settings = {
        'selected_tenses': st.session_state.settings['selected_tenses'].copy(),
        'new_cards_per_day': st.session_state.settings['new_cards_per_day']
    }
    
    # –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω
    tense_options = {
        'presente': t('presente'),
        'indefinido': t('indefinido'),
        'subjuntivo': t('subjuntivo'),
        'imperfecto': t('imperfecto')
    }
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    new_selected_tenses = []
    for tense_key, tense_name in tense_options.items():
        if st.checkbox(tense_name, value=tense_key in st.session_state.settings['selected_tenses'], key=f"tense_{tense_key}"):
            new_selected_tenses.append(tense_key)
    
    new_selected_tenses = new_selected_tenses or ['presente']
    
    # –õ–∏–º–∏—Ç—ã
    new_cards_per_day = st.slider(
        t('new_cards_per_day'), 1, 50, st.session_state.settings['new_cards_per_day'], key="new_cards_slider"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings_changed = (
        current_settings['selected_tenses'] != new_selected_tenses or
        current_settings['new_cards_per_day'] != new_cards_per_day
    )
    
    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç—å (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å)
    if settings_changed:
        if st.button(t('apply_settings'), key="apply_settings", use_container_width=True, type="primary"):
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            st.session_state.settings['selected_tenses'] = new_selected_tenses
            st.session_state.settings['new_cards_per_day'] = new_cards_per_day
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            st.session_state.current_card = None
            st.session_state.is_revealed = False
            
            st.success(t('settings_applied'))
            st.rerun()
    elif st.session_state.settings['selected_tenses']:
        st.info(t('change_settings_hint'))
    
    st.markdown("---")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    st.subheader(t('stats_today'))
    col1, col2 = st.columns(2)
    with col1:
        st.metric(t('reviews'), st.session_state.daily_stats['reviews_today'])
        st.metric(t('new_cards'), st.session_state.daily_stats['new_cards_today'])
    with col2:
        st.metric(t('correct'), st.session_state.daily_stats['correct_today'])
        due_count = len(get_due_cards())
        st.metric(t('due_cards'), due_count)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_cards = len(st.session_state.cards)
    total_reviews = sum(card.total_reviews for card in st.session_state.cards.values())
    total_correct = sum(card.correct_reviews for card in st.session_state.cards.values())
    accuracy = (total_correct / total_reviews * 100) if total_reviews > 0 else 0
    
    st.subheader(t('stats_total'))
    st.metric(t('total_cards'), total_cards)
    st.metric(t('accuracy'), f"{accuracy:.1f}%")

def show_verb_card():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –≥–ª–∞–≥–æ–ª–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —è–∑—ã–∫–æ–≤"""
    card = st.session_state.current_card
    
    if (card.verb not in VERBS or 
        card.tense not in CONJUGATIONS or 
        card.verb not in CONJUGATIONS[card.tense]):
        st.error(t('card_data_corrupted'))
        next_card()
        return
    
    verb_info = VERBS[card.verb]
    is_revealed = st.session_state.is_revealed
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    if not is_revealed:
        # –ö—Ä–∞—Å–∏–≤–∞—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –≤–æ–ø—Ä–æ—Å–æ–º
        st.markdown(f"""
        <div class="verb-card">
            <div class="verb-title">{card.verb}</div>
            <div class="verb-translation">{verb_info['translation']}</div>
            <div style="font-size: 1.2rem; opacity: 0.8; margin-bottom: 1rem;">
                {t(card.tense)}
            </div>
            <div class="pronoun-display">
                {PRONOUNS[card.pronoun_index]}
            </div>
            <div class="click-hint">
                {t('click_to_reveal')}
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—Ç–≤–µ—Ç–∞ - –¥–µ–ª–∞–µ–º —à–∏—Ä–µ
        col1, col2, col3 = st.columns([1, 3, 1])
        with col2:
            if st.button(t('show_answer'), type="primary", use_container_width=True):
                st.session_state.is_revealed = True
                st.rerun()
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        conjugation = CONJUGATIONS[card.tense][card.verb][card.pronoun_index]
        
        st.markdown(f"""
        <div class="verb-card revealed">
            <div class="verb-title">{card.verb}</div>
            <div class="verb-translation">{verb_info['translation']}</div>
            <div style="font-size: 1.2rem; opacity: 0.8; margin-bottom: 1rem;">
                {t(card.tense)}
            </div>
            <div class="pronoun-display">
                {PRONOUNS[card.pronoun_index]}
            </div>
            <div class="answer-display">
                ‚úÖ {conjugation}
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # –ö–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        st.subheader(t('rate_difficulty'))
        st.caption(t('honest_evaluation'))
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.button(t('again'), key="again", use_container_width=True, help=t('again_help')):
                process_answer(Difficulty.AGAIN)
        
        with col2:
            if st.button(t('hard'), key="hard", use_container_width=True, help=t('hard_help')):
                process_answer(Difficulty.HARD)
        
        with col3:
            if st.button(t('good'), key="good", use_container_width=True, help=t('good_help')):
                process_answer(Difficulty.GOOD)
        
        with col4:
            if st.button(t('easy'), key="easy", use_container_width=True, help=t('easy_help')):
                process_answer(Difficulty.EASY)
    
    # –ü—Ä–∞–≤–∏–ª–∞ —Å–ø—Ä—è–∂–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω
    st.markdown("---")
    st.subheader(t('grammar_rules'))
    
    current_lang = get_current_language()
    for tense in st.session_state.settings['selected_tenses']:
        rule = get_grammar_rule(tense, current_lang)
        with st.expander(f"{rule['title']}", expanded=False):
            st.markdown(rule['content'])
    
    # –°–æ–≤–µ—Ç—ã –ø–æ –∏–∑—É—á–µ–Ω–∏—é - –≤ —Å–∞–º–æ–º –Ω–∏–∑—É
    if st.button(t('study_tips'), key="study_tips", use_container_width=True):
        show_study_tips()

def show_study_tips():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–≤–µ—Ç—ã –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–º—É –∏–∑—É—á–µ–Ω–∏—é —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —è–∑—ã–∫–æ–≤"""
    st.header(t('study_tips'))
    
    with st.expander(t('srs_principles'), expanded=True):
        st.markdown(f"""
        **{t('srs_how_it_works')}**
        - {t('srs_before_forget')}
        - {t('srs_increasing_intervals')}
        - {t('srs_more_frequent')}
        
        **{t('honest_self_evaluation')}**
        - **{t('again')}** - {t('again_help').lower()}
        - **{t('hard')}** - {t('hard_help').lower()}
        - **{t('good')}** - {t('good_help').lower()}
        - **{t('easy')}** - {t('easy_help').lower()}
        """)
    
    with st.expander(t('daily_practice')):
        st.markdown(f"""
        **{t('daily_practice_text')}**
        - {t('daily_better')}
        - {t('regularity_important')}
        - {t('same_time_helps')}
        
        **{t('optimal_settings')}**
        - {t('beginners_settings')}
        - {t('advanced_settings')}
        """)

def show_learning_interface():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–∑—É—á–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —è–∑—ã–∫–æ–≤"""
    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    with st.container():
        st.markdown('<div class="main-content">', unsafe_allow_html=True)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        if not st.session_state.current_card:
            st.session_state.current_card = get_next_card()
            st.session_state.is_revealed = False
        
        if not st.session_state.current_card:
            st.success(t('completed_today'))
            st.info(t('come_back_tomorrow'))
            
            if st.button(t('get_new_card')):
                force_new_card()
            st.markdown('</div>', unsafe_allow_html=True)
            return
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        show_verb_card()
        
        st.markdown('</div>', unsafe_allow_html=True)

def handle_oauth_callback(query_params):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç OAuth callback —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —è–∑—ã–∫–æ–≤"""
    st.title(t('processing_auth'))
    
    code = query_params.get('code')
    state = query_params.get('state')
    error = query_params.get('error')
    
    if error:
        st.error(f"‚ùå OAuth Error: {error}")
        if st.button("üîÑ " + t('login_google')):
            clear_oauth_and_reload()
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–¥
    with st.spinner(t('processing_auth')):
        success = process_authorization_code(code)
        
        if success:
            st.success(t('auth_success'))
            time.sleep(1)
            clear_url_params()
            st.rerun()
        else:
            st.error(t('auth_error'))

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ –∑–∞–º–µ–Ω—è–µ–º —Ö–∞—Ä–¥–∫–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤ –Ω–∞ t() –≤—ã–∑–æ–≤—ã

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

if __name__ == "__main__":
    main()
