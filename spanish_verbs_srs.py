import streamlit as st
import random
import json
import datetime
import math
import pandas as pd
import hashlib
import base64
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass, asdict
from enum import Enum
import requests
from urllib.parse import urlencode
import os
import time

# –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å plotly, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
try:
    import plotly.express as px
    import plotly.graph_objects as go
    PLOTLY_AVAILABLE = True
except ImportError:
    PLOTLY_AVAILABLE = False

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üá™üá∏ –¢—Ä–µ–Ω–∞–∂–µ—Ä –∏—Å–ø–∞–Ω—Å–∫–∏—Ö –≥–ª–∞–≥–æ–ª–æ–≤ —Å Google Auth",
    page_icon="üá™üá∏",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Google OAuth –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
GOOGLE_CLIENT_ID = os.getenv('GOOGLE_CLIENT_ID', '')
GOOGLE_CLIENT_SECRET = os.getenv('GOOGLE_CLIENT_SECRET', '')
REDIRECT_URI = os.getenv('REDIRECT_URI', 'https://your-app.railway.app/auth/callback')
GOOGLE_AUTH_URL = "https://accounts.google.com/o/oauth2/auth"
GOOGLE_TOKEN_URL = "https://oauth2.googleapis.com/token"
GOOGLE_USERINFO_URL = "https://www.googleapis.com/oauth2/v2/userinfo"

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .card-container {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 2rem;
        border-radius: 1rem;
        text-align: center;
        margin: 1rem 0;
        box-shadow: 0 8px 30px rgba(0,0,0,0.1);
    }
    
    .verb-title {
        font-size: 3rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }
    
    .verb-translation {
        font-size: 1.4rem;
        opacity: 0.9;
        margin-bottom: 1.5rem;
    }
    
    .pronoun-display {
        font-size: 2rem;
        font-weight: bold;
        margin: 1.5rem 0;
        background: rgba(255,255,255,0.2);
        padding: 0.8rem 1.5rem;
        border-radius: 0.5rem;
        display: inline-block;
    }
    
    .answer-display {
        font-size: 2.5rem;
        font-weight: bold;
        background: rgba(255,255,255,0.9);
        color: #2d5e3e;
        padding: 1.5rem;
        border-radius: 0.5rem;
        margin: 1.5rem 0;
    }
    
    .auth-container {
        background: linear-gradient(135deg, #4285f4 0%, #34a853 100%);
        color: white;
        padding: 3rem 2rem;
        border-radius: 1rem;
        text-align: center;
        margin: 2rem 0;
        box-shadow: 0 12px 40px rgba(66, 133, 244, 0.3);
    }
    
    .auth-title {
        font-size: 2.5rem;
        font-weight: bold;
        margin-bottom: 1rem;
    }
    
    .auth-subtitle {
        font-size: 1.2rem;
        opacity: 0.9;
        margin-bottom: 2rem;
    }
    
    .google-btn {
        background: white !important;
        color: #333 !important;
        border: none !important;
        padding: 0.8rem 2rem !important;
        border-radius: 50px !important;
        font-weight: bold !important;
        font-size: 1.1rem !important;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1) !important;
        transition: all 0.3s ease !important;
    }
    
    .google-btn:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 6px 20px rgba(0,0,0,0.15) !important;
    }
    
    .user-info {
        background: rgba(255,255,255,0.1);
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
        text-align: center;
    }
    
    .sync-status {
        background: rgba(52, 168, 83, 0.1);
        border: 1px solid rgba(52, 168, 83, 0.3);
        color: #34a853;
        padding: 0.5rem 1rem;
        border-radius: 0.5rem;
        font-size: 0.9rem;
        text-align: center;
        margin: 0.5rem 0;
    }
</style>
""", unsafe_allow_html=True)

# –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
class Difficulty(Enum):
    AGAIN = 0  # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞
    HARD = 1   # –°–ª–æ–∂–Ω–æ
    GOOD = 2   # –•–æ—Ä–æ—à–æ
    EASY = 3   # –õ–µ–≥–∫–æ

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
@dataclass
class Card:
    verb: str
    pronoun_index: int
    tense: str
    easiness_factor: float = 2.5
    interval: int = 1
    repetitions: int = 0
    next_review_date: str = ""
    last_review_date: str = ""
    total_reviews: int = 0
    correct_reviews: int = 0
    
    def __post_init__(self):
        if not self.next_review_date:
            self.next_review_date = datetime.date.today().isoformat()

# Google OAuth –∫–ª–∞—Å—Å
class GoogleAuth:
    @staticmethod
    def get_auth_url() -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google"""
        state = base64.urlsafe_b64encode(os.urandom(32)).decode('utf-8')
        st.session_state.oauth_state = state
        
        params = {
            'client_id': GOOGLE_CLIENT_ID,
            'redirect_uri': REDIRECT_URI,
            'scope': 'openid email profile',
            'response_type': 'code',
            'state': state,
            'access_type': 'offline',
            'prompt': 'consent'
        }
        
        return f"{GOOGLE_AUTH_URL}?{urlencode(params)}"
    
    @staticmethod
    def exchange_code_for_token(code: str) -> Optional[Dict]:
        """–û–±–º–µ–Ω–∏–≤–∞–µ—Ç authorization code –Ω–∞ access token"""
        data = {
            'client_id': GOOGLE_CLIENT_ID,
            'client_secret': GOOGLE_CLIENT_SECRET,
            'code': code,
            'grant_type': 'authorization_code',
            'redirect_uri': REDIRECT_URI,
        }
        
        try:
            response = requests.post(GOOGLE_TOKEN_URL, data=data)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            return None
    
    @staticmethod
    def get_user_info(access_token: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        headers = {'Authorization': f'Bearer {access_token}'}
        
        try:
            response = requests.get(GOOGLE_USERINFO_URL, headers=headers)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
            return None

# –î–∞–Ω–Ω—ã–µ –≥–ª–∞–≥–æ–ª–æ–≤
VERBS = {
    'ser': {'translation': '–±—ã—Ç—å, —è–≤–ª—è—Ç—å—Å—è', 'type': 'irregular'},
    'estar': {'translation': '–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è, –±—ã—Ç—å', 'type': 'irregular'},
    'tener': {'translation': '–∏–º–µ—Ç—å', 'type': 'irregular'},
    'hacer': {'translation': '–¥–µ–ª–∞—Ç—å', 'type': 'irregular'},
    'decir': {'translation': '–≥–æ–≤–æ—Ä–∏—Ç—å, —Å–∫–∞–∑–∞—Ç—å', 'type': 'irregular'},
    'ir': {'translation': '–∏–¥—Ç–∏, –µ—Ö–∞—Ç—å', 'type': 'irregular'},
    'ver': {'translation': '–≤–∏–¥–µ—Ç—å', 'type': 'irregular'},
    'dar': {'translation': '–¥–∞–≤–∞—Ç—å', 'type': 'irregular'},
    'saber': {'translation': '–∑–Ω–∞—Ç—å', 'type': 'irregular'},
    'querer': {'translation': '—Ö–æ—Ç–µ—Ç—å, –ª—é–±–∏—Ç—å', 'type': 'irregular'},
    'hablar': {'translation': '–≥–æ–≤–æ—Ä–∏—Ç—å', 'type': 'regular-ar'},
    'vivir': {'translation': '–∂–∏—Ç—å', 'type': 'regular-ir'},
    'trabajar': {'translation': '—Ä–∞–±–æ—Ç–∞—Ç—å', 'type': 'regular-ar'},
    'estudiar': {'translation': '–∏–∑—É—á–∞—Ç—å', 'type': 'regular-ar'}
}

PRONOUNS = ['yo', 't√∫', '√©l/ella', 'nosotros', 'vosotros', 'ellos/ellas']

CONJUGATIONS = {
    'presente': {
        'ser': ['soy', 'eres', 'es', 'somos', 'sois', 'son'],
        'estar': ['estoy', 'est√°s', 'est√°', 'estamos', 'est√°is', 'est√°n'],
        'tener': ['tengo', 'tienes', 'tiene', 'tenemos', 'ten√©is', 'tienen'],
        'hacer': ['hago', 'haces', 'hace', 'hacemos', 'hac√©is', 'hacen'],
        'decir': ['digo', 'dices', 'dice', 'decimos', 'dec√≠s', 'dicen'],
        'ir': ['voy', 'vas', 'va', 'vamos', 'vais', 'van'],
        'ver': ['veo', 'ves', 've', 'vemos', 'veis', 'ven'],
        'dar': ['doy', 'das', 'da', 'damos', 'dais', 'dan'],
        'saber': ['s√©', 'sabes', 'sabe', 'sabemos', 'sab√©is', 'saben'],
        'querer': ['quiero', 'quieres', 'quiere', 'queremos', 'quer√©is', 'quieren'],
        'hablar': ['hablo', 'hablas', 'habla', 'hablamos', 'habl√°is', 'hablan'],
        'vivir': ['vivo', 'vives', 'vive', 'vivimos', 'viv√≠s', 'viven'],
        'trabajar': ['trabajo', 'trabajas', 'trabaja', 'trabajamos', 'trabaj√°is', 'trabajan'],
        'estudiar': ['estudio', 'estudias', 'estudia', 'estudiamos', 'estudi√°is', 'estudian']
    }
}

def init_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    if 'initialized' not in st.session_state:
        st.session_state.initialized = True
    
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False
    
    if 'user_info' not in st.session_state:
        st.session_state.user_info = None
    
    if 'access_token' not in st.session_state:
        st.session_state.access_token = None
    
    if 'oauth_state' not in st.session_state:
        st.session_state.oauth_state = None
    
    if 'cards' not in st.session_state:
        st.session_state.cards = {}
    
    if 'current_card' not in st.session_state:
        st.session_state.current_card = None
    
    if 'is_revealed' not in st.session_state:
        st.session_state.is_revealed = False
    
    if 'daily_stats' not in st.session_state:
        st.session_state.daily_stats = {
            'reviews_today': 0,
            'correct_today': 0,
            'new_cards_today': 0,
            'last_reset': datetime.date.today().isoformat()
        }
    
    if 'settings' not in st.session_state:
        st.session_state.settings = {
            'new_cards_per_day': 10,
            'review_cards_per_day': 50,
            'selected_tenses': ['presente'],
            'auto_save': True
        }

def show_auth_page():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    st.markdown("""
    <div class="auth-container">
        <div class="auth-title">üá™üá∏ –¢—Ä–µ–Ω–∞–∂–µ—Ä –∏—Å–ø–∞–Ω—Å–∫–∏—Ö –≥–ª–∞–≥–æ–ª–æ–≤</div>
        <div class="auth-subtitle">
            –í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Google, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        if not GOOGLE_CLIENT_ID or not GOOGLE_CLIENT_SECRET:
            st.error("‚ö†Ô∏è Google OAuth –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
            st.code("""
            –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
            - GOOGLE_CLIENT_ID
            - GOOGLE_CLIENT_SECRET  
            - REDIRECT_URI
            """)
            return
        
        auth_url = GoogleAuth.get_auth_url()
        
        st.markdown(f"""
        <div style="text-align: center; margin: 2rem 0;">
            <a href="{auth_url}" target="_self">
                <button class="google-btn">
                    üîê –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google
                </button>
            </a>
        </div>
        """, unsafe_allow_html=True)

def show_user_panel():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∞–π–¥–±–∞—Ä–µ"""
    if not st.session_state.authenticated:
        return
    
    user_info = st.session_state.user_info
    
    st.markdown(f"""
    <div class="user-info">
        <strong>üë§ {user_info.get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}</strong><br>
        <small>{user_info.get('email', '')}</small>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col2:
        if st.button("üö™ –í—ã–π—Ç–∏", key="logout", use_container_width=True):
            st.session_state.authenticated = False
            st.session_state.user_info = None
            st.session_state.access_token = None
            st.rerun()

def get_card_key(verb: str, pronoun_index: int, tense: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏"""
    return f"{verb}_{pronoun_index}_{tense}"

def get_or_create_card(verb: str, pronoun_index: int, tense: str) -> Card:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é"""
    key = get_card_key(verb, pronoun_index, tense)
    
    if key not in st.session_state.cards:
        st.session_state.cards[key] = Card(
            verb=verb,
            pronoun_index=pronoun_index,
            tense=tense
        )
    
    return st.session_state.cards[key]

def get_next_card() -> Optional[Card]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è"""
    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–µ–º–æ - –±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≥–ª–∞–≥–æ–ª
    verb = random.choice(list(VERBS.keys()))
    pronoun_index = random.randint(0, 5)
    tense = 'presente'
    
    return get_or_create_card(verb, pronoun_index, tense)

def main():
    init_session_state()
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API Streamlit
    query_params = st.query_params
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if query_params:
        st.write("üîç **–û—Ç–ª–∞–¥–∫–∞ - –ø–æ–ª—É—á–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**")
        st.write(dict(query_params))
        
        if 'code' in query_params:
            st.write("‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!")
            
            try:
                code = query_params['code']
                state = query_params.get('state', '')
                
                st.write(f"üìù Code: {code[:20]}...")
                st.write(f"üìù State: {state[:20]}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                st.write("üîß **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:**")
                st.write(f"CLIENT_ID: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if GOOGLE_CLIENT_ID else '‚ùå –ù–ï –ù–ê–°–¢–†–û–ï–ù'}")
                st.write(f"CLIENT_SECRET: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if GOOGLE_CLIENT_SECRET else '‚ùå –ù–ï –ù–ê–°–¢–†–û–ï–ù'}")
                st.write(f"REDIRECT_URI: {REDIRECT_URI}")
                
                if st.button("üîÑ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"):
                    with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é..."):
                        st.write("1Ô∏è‚É£ –û–±–º–µ–Ω–∏–≤–∞–µ–º code –Ω–∞ —Ç–æ–∫–µ–Ω...")
                        
                        token_response = GoogleAuth.exchange_code_for_token(code)
                        
                        if token_response and 'access_token' in token_response:
                            st.write("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω!")
                            access_token = token_response['access_token']
                            
                            st.write("2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...")
                            user_info = GoogleAuth.get_user_info(access_token)
                            
                            if user_info:
                                st.write("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã!")
                                st.write(f"üë§ –ò–º—è: {user_info.get('name')}")
                                st.write(f"üìß Email: {user_info.get('email')}")
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session state
                                st.session_state.authenticated = True
                                st.session_state.user_info = user_info
                                st.session_state.access_token = access_token
                                
                                st.success("üéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                                
                                if st.button("üöÄ –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é"):
                                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—á–∏—â–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                                    st.query_params.clear()
                                    st.rerun()
                            else:
                                st.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                        else:
                            st.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
                
                if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å URL –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
                    st.query_params.clear()
                    st.rerun()
                    
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
        
        st.markdown("---")
        if st.button("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é"):
            st.query_params.clear()
            st.rerun()
            
        return
    
    # –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    if not st.session_state.authenticated:
        show_auth_page()
        return
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    st.title("üá™üá∏ –¢—Ä–µ–Ω–∞–∂–µ—Ä –∏—Å–ø–∞–Ω—Å–∫–∏—Ö –≥–ª–∞–≥–æ–ª–æ–≤")
    st.caption("–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        show_user_panel()
        
        st.markdown("---")
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π", st.session_state.daily_stats['reviews_today'])
        with col2:
            st.metric("–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö", st.session_state.daily_stats['correct_today'])
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
    if st.session_state.user_info:
        st.success(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {st.session_state.user_info.get('name')}!")
        
        # –î–µ–º–æ –∫–∞—Ä—Ç–æ—á–∫–∞
        if not st.session_state.current_card:
            st.session_state.current_card = get_next_card()
        
        card = st.session_state.current_card
        
        if card and card.verb in VERBS and card.verb in CONJUGATIONS['presente']:
            verb_info = VERBS[card.verb]
            
            st.markdown(f"""
            <div class="card-container">
                <div class="verb-title">{card.verb}</div>
                <div class="verb-translation">{verb_info['translation']}</div>
                <div class="pronoun-display">
                    {PRONOUNS[card.pronoun_index]}
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            if not st.session_state.is_revealed:
                if st.button("üîç –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", type="primary", use_container_width=True):
                    st.session_state.is_revealed = True
                    st.rerun()
            else:
                conjugation = CONJUGATIONS['presente'][card.verb][card.pronoun_index]
                
                st.markdown(f"""
                <div class="answer-display">
                    ‚úÖ {conjugation}
                </div>
                """, unsafe_allow_html=True)
                
                if st.button("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≥–ª–∞–≥–æ–ª", use_container_width=True):
                    st.session_state.current_card = get_next_card()
                    st.session_state.is_revealed = False
                    st.rerun()

if __name__ == "__main__":
    main()
