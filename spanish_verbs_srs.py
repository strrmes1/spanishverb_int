import streamlit as st
import os

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Railway routing
st.set_page_config(page_title="üîß Railway Test", page_icon="üîß")

def main():
    st.title("üîß Railway Routing Test")
    
    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ Streamlit
    st.success("‚úÖ Streamlit —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Railway!")
    
    # –¢–µ—Å—Ç 2: Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    st.markdown("## üìã Query Parameters Test")
    
    try:
        params = dict(st.query_params)
        if params:
            st.success(f"‚úÖ Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–π–¥–µ–Ω—ã: {params}")
        else:
            st.info("‚ÑπÔ∏è Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        st.write(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:** {len(params)}")
        st.write(f"**–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞:** {type(st.query_params)}")
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ query_params: {e}")
    
    # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏
    st.markdown("## üîó –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏")
    
    base_url = "https://spanishverbint-production.up.railway.app"
    
    test_links = [
        f"{base_url}?test=simple",
        f"{base_url}?code=test_code&state=test_state",
        f"{base_url}?param1=value1&param2=value2",
        f"{base_url}/auth/callback?code=fake_code&state=fake_state"
    ]
    
    st.write("**–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è routing:**")
    
    for i, link in enumerate(test_links, 1):
        st.markdown(f"**–¢–µ—Å—Ç {i}:** [–û—Ç–∫—Ä—ã—Ç—å]({link})")
        st.code(link)
    
    # –¢–µ—Å—Ç 4: JavaScript URL —Ç–µ—Å—Ç
    st.markdown("## üåê JavaScript URL Test")
    
    st.components.v1.html("""
    <div style="padding: 20px; background: #f0f8ff; border-radius: 10px; margin: 10px 0;">
        <h4>üîç JavaScript URL –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:</h4>
        <p><strong>Full URL:</strong> <span id="js-url">Loading...</span></p>
        <p><strong>Search:</strong> <span id="js-search">Loading...</span></p>
        <p><strong>Parameters:</strong></p>
        <pre id="js-params" style="background: white; padding: 10px; border-radius: 5px;">Loading...</pre>
        
        <button onclick="testURL()" style="margin-top: 10px; padding: 10px 20px; background: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer;">
            üîÑ Refresh URL Info
        </button>
    </div>
    
    <script>
    function updateURLInfo() {
        try {
            const url = window.location.href;
            const search = window.location.search;
            
            document.getElementById('js-url').textContent = url;
            document.getElementById('js-search').textContent = search || '(empty)';
            
            // Parse parameters
            const params = new URLSearchParams(search);
            const paramsObj = {};
            for (const [key, value] of params) {
                paramsObj[key] = value;
            }
            
            document.getElementById('js-params').textContent = JSON.stringify(paramsObj, null, 2);
            
            console.log('URL Info Update:', { url, search, params: paramsObj });
            
        } catch (error) {
            console.error('Error updating URL info:', error);
            document.getElementById('js-url').textContent = 'Error: ' + error.message;
        }
    }
    
    function testURL() {
        updateURLInfo();
        alert('URL info updated! Check console for details.');
    }
    
    // Auto-update on load
    updateURLInfo();
    
    // Update every 2 seconds
    setInterval(updateURLInfo, 2000);
    </script>
    """, height=250)
    
    # –¢–µ—Å—Ç 5: Environment variables
    st.markdown("## üîß Environment Test")
    
    st.write("**OAuth Variables:**")
    oauth_vars = ['GOOGLE_CLIENT_ID', 'GOOGLE_CLIENT_SECRET', 'REDIRECT_URI']
    
    for var in oauth_vars:
        value = os.getenv(var, '')
        status = "‚úÖ Set" if value else "‚ùå Missing"
        length = f"({len(value)} chars)" if value else ""
        st.write(f"**{var}:** {status} {length}")
    
    # –¢–µ—Å—Ç 6: –†—É—á–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    st.markdown("## üéØ –†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    st.write("**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:**")
    st.write("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö URL –≤—ã—à–µ")
    st.write("2. –í—Å—Ç–∞–≤—å—Ç–µ –≤ –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É –±—Ä–∞—É–∑–µ—Ä–∞")
    st.write("3. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ JavaScript —Ä–∞–∑–¥–µ–ª–µ")
    st.write("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤–∏–¥–∏—Ç –ª–∏ –∏—Ö Streamlit –≤–≤–µ—Ä—Ö—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üîÑ Reload Page"):
            st.rerun()
    
    with col2:
        if st.button("üßπ Clear Params"):
            try:
                st.query_params.clear()
                st.success("Parameters cleared!")
                st.rerun()
            except Exception as e:
                st.error(f"Clear failed: {e}")
    
    with col3:
        if st.button("üìä Show Session"):
            st.json(dict(st.session_state))
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    st.markdown("## üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    params = dict(st.query_params)
    
    if params:
        st.success("üéâ Railway –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–µ—Ç query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ Streamlit!")
        st.write("–ü—Ä–æ–±–ª–µ–º–∞ OAuth –±—ã–ª–∞ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ.")
    else:
        st.warning("‚ö†Ô∏è Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        st.write("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        st.write("- URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        st.write("- Railway –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        st.write("- Streamlit –Ω–µ –º–æ–∂–µ—Ç –∏—Ö –ø—Ä–æ—á–∏—Ç–∞—Ç—å")
        st.write("- –ü—Ä–æ–±–ª–µ–º–∞ —Å routing/proxy")

if __name__ == "__main__":
    main()
