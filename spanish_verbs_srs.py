import streamlit as st
import os
import requests
from urllib.parse import urlencode
import base64
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
st.set_page_config(page_title="üîç URL Debug", page_icon="üîç")

# OAuth –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
GOOGLE_CLIENT_ID = os.getenv('GOOGLE_CLIENT_ID', '')
GOOGLE_CLIENT_SECRET = os.getenv('GOOGLE_CLIENT_SECRET', '')
REDIRECT_URI = os.getenv('REDIRECT_URI', '')

def main():
    st.title("üîç URL Redirect Debug Tool")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    if 'oauth_state' not in st.session_state:
        st.session_state.oauth_state = None
    if 'url_history' not in st.session_state:
        st.session_state.url_history = []
    
    # –ü–û–°–¢–û–Ø–ù–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì URL
    st.markdown("## üåê –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π URL –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    
    # JavaScript –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –í–°–ï –∏–∑–º–µ–Ω–µ–Ω–∏—è URL
    url_monitor = st.components.v1.html("""
    <div style="background: #e8f5e8; padding: 20px; border-radius: 10px; margin: 20px 0;">
        <h3>üîç LIVE URL Monitor</h3>
        <p><strong>Current URL:</strong> <span id="current-url">Loading...</span></p>
        <p><strong>Search Params:</strong> <span id="search-params">Loading...</span></p>
        <p><strong>Page Loads:</strong> <span id="load-count">0</span></p>
        
        <h4>üìã URL History:</h4>
        <div id="url-history" style="background: white; padding: 10px; border-radius: 5px; max-height: 200px; overflow-y: auto;">
            Loading...
        </div>
        
        <button onclick="captureURL()" style="margin-top: 10px; padding: 10px 20px; background: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer;">
            üì∏ Capture Current URL
        </button>
    </div>
    
    <script>
    let loadCount = 0;
    let urlHistory = [];
    
    function updateURL() {
        loadCount++;
        const url = window.location.href;
        const search = window.location.search;
        const timestamp = new Date().toLocaleTimeString();
        
        document.getElementById('current-url').textContent = url;
        document.getElementById('search-params').textContent = search || '(empty)';
        document.getElementById('load-count').textContent = loadCount;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –µ—Å–ª–∏ URL –∏–∑–º–µ–Ω–∏–ª—Å—è
        const lastURL = urlHistory.length > 0 ? urlHistory[urlHistory.length - 1].url : '';
        if (url !== lastURL) {
            urlHistory.push({
                time: timestamp,
                url: url,
                search: search,
                load: loadCount
            });
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if (urlHistory.length > 10) {
                urlHistory = urlHistory.slice(-10);
            }
            
            updateHistoryDisplay();
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤ –∫–æ–Ω—Å–æ–ª—å
        console.log(`[${timestamp}] URL: ${url}`);
        if (search) {
            console.log(`[${timestamp}] Search: ${search}`);
            console.log(`[${timestamp}] Parsed:`, Object.fromEntries(new URLSearchParams(search)));
        }
    }
    
    function updateHistoryDisplay() {
        const historyDiv = document.getElementById('url-history');
        historyDiv.innerHTML = urlHistory.map(entry => 
            `<div style="margin-bottom: 5px; padding: 5px; border-left: 3px solid #007bff;">
                <strong>${entry.time}</strong> (Load #${entry.load})<br>
                ${entry.url}<br>
                <small>Search: ${entry.search || '(empty)'}</small>
            </div>`
        ).join('');
    }
    
    function captureURL() {
        updateURL();
        alert('URL captured! Check history above.');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    updateURL();
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è URL
    let lastURL = window.location.href;
    setInterval(() => {
        if (window.location.href !== lastURL) {
            lastURL = window.location.href;
            updateURL();
        }
    }, 500);
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    window.addEventListener('popstate', updateURL);
    window.addEventListener('pushstate', updateURL);
    window.addEventListener('replacestate', updateURL);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    setInterval(updateURL, 2000);
    </script>
    """, height=400)
    
    # STREAMLIT –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
    st.markdown("## üìã Streamlit Query Params")
    
    query_params = dict(st.query_params)
    
    if query_params:
        st.success("‚úÖ Streamlit –≤–∏–¥–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã!")
        st.json(query_params)
    else:
        st.warning("‚ö†Ô∏è Streamlit –Ω–µ –≤–∏–¥–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    
    # –ü–†–û–í–ï–†–ö–ê REDIRECT_URI
    st.markdown("## üîó OAuth Configuration Check")
    
    st.write("**Environment Variables:**")
    st.write(f"REDIRECT_URI: `{REDIRECT_URI}`")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Ç–µ–∫—É—â–∏–º –¥–æ–º–µ–Ω–æ–º
    current_domain = "https://spanishverbint-production.up.railway.app"
    expected_redirect = f"{current_domain}/auth/callback"
    
    st.write(f"**Expected:** `{expected_redirect}`")
    
    if REDIRECT_URI == expected_redirect:
        st.success("‚úÖ REDIRECT_URI —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–º–µ–Ω—É")
    else:
        st.error("‚ùå REDIRECT_URI –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–º–µ–Ω—É!")
        st.write("**–ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway:**")
        st.code(f"REDIRECT_URI={expected_redirect}")
    
    # –¢–ï–°–¢–û–í–´–ï –°–°–´–õ–ö–ò
    st.markdown("## üß™ –¢–µ—Å—Ç—ã callback URL")
    
    # –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ callback —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    callback_test_url = f"{current_domain}/auth/callback?code=test_code&state=test_state"
    st.markdown(f"**–¢–µ—Å—Ç 1:** [Callback —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏]({callback_test_url})")
    
    # –¢–µ—Å—Ç 2: –ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ callback –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    callback_empty_url = f"{current_domain}/auth/callback"
    st.markdown(f"**–¢–µ—Å—Ç 2:** [Callback –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤]({callback_empty_url})")
    
    # –¢–µ—Å—Ç 3: –û–±—ã—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    main_test_url = f"{current_domain}?test=main_page&timestamp={int(time.time())}"
    st.markdown(f"**–¢–µ—Å—Ç 3:** [–ì–ª–∞–≤–Ω–∞—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏]({main_test_url})")
    
    # GOOGLE CONSOLE –ü–†–û–í–ï–†–ö–ê
    st.markdown("## üîß Google Console Verification")
    
    st.write("**–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ Google Cloud Console:**")
    st.write("1. APIs & Services ‚Üí Credentials")
    st.write("2. –í–∞—à OAuth 2.0 Client ID")
    st.write("3. Authorized redirect URIs –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¢–û–ß–ù–û:")
    st.code(REDIRECT_URI)
    
    # –õ–û–ì–ò OAUTH
    st.markdown("## üìã OAuth Test")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üîê Test OAuth Flow"):
            test_oauth_flow()
    
    with col2:
        if st.button("üßπ Clear All"):
            st.query_params.clear()
            st.session_state.oauth_state = None
            st.rerun()
    
    # SESSION STATE
    st.markdown("## üìä Session State")
    st.write(f"oauth_state: {st.session_state.oauth_state}")
    
    if st.button("üìã Show Full Session"):
        st.json(dict(st.session_state))

def test_oauth_flow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç OAuth flow —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    st.write("### üîÑ Testing OAuth Flow...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º state
    state = base64.urlsafe_b64encode(os.urandom(32)).decode('utf-8')
    st.session_state.oauth_state = state
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not GOOGLE_CLIENT_ID or not GOOGLE_CLIENT_SECRET:
        st.error("‚ùå OAuth credentials missing")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
    params = {
        'client_id': GOOGLE_CLIENT_ID,
        'redirect_uri': REDIRECT_URI,
        'scope': 'openid email profile',
        'response_type': 'code',
        'state': state,
        'access_type': 'offline',
        'prompt': 'consent'
    }
    
    auth_url = f"https://accounts.google.com/o/oauth2/auth?{urlencode(params)}"
    
    st.write("**OAuth Parameters:**")
    st.json(params)
    
    st.write("**Full Auth URL:**")
    st.code(auth_url)
    
    st.write(f"**State (first 20 chars):** {state[:20]}")
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    st.info("""
    **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:**
    1. –ù–∞–∂–º–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    2. –ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google –≤–µ—Ä–Ω–µ—Ç –≤–∞—Å –Ω–∞ callback URL
    3. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ URL Monitor –≤—ã—à–µ - –æ–Ω –ø–æ–∫–∞–∂–µ—Ç –¢–û–ß–ù–´–ô URL –∫—É–¥–∞ Google –¥–µ–ª–∞–µ—Ç redirect
    4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã code –∏ state –≤ URL
    """)
    
    # –°—Å—ã–ª–∫–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
    st.markdown(f"**[üîê Authorize with Google]({auth_url})**")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π redirect —á–µ—Ä–µ–∑ JavaScript (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if st.button("üöÄ Auto Redirect"):
        st.components.v1.html(f"""
        <script>
        console.log('Redirecting to OAuth...');
        window.location.href = '{auth_url}';
        </script>
        <p>Redirecting...</p>
        """, height=100)

if __name__ == "__main__":
    main()
