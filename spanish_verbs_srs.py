import streamlit as st
import os
import requests
from urllib.parse import urlencode
import base64
import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
st.set_page_config(page_title="üá™üá∏ Spanish Verbs - OAuth Fixed", page_icon="üá™üá∏")

# OAuth –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –ò–ó–ú–ï–ù–ï–ù–û –¥–ª—è root path
GOOGLE_CLIENT_ID = os.getenv('GOOGLE_CLIENT_ID', '')
GOOGLE_CLIENT_SECRET = os.getenv('GOOGLE_CLIENT_SECRET', '')
# –ò—Å–ø–æ–ª—å–∑—É–µ–º root path –≤–º–µ—Å—Ç–æ /auth/callback
ROOT_DOMAIN = "https://spanishverbint-production.up.railway.app"
REDIRECT_URI = ROOT_DOMAIN  # –ü—Ä–æ—Å—Ç–æ root, –±–µ–∑ /auth/callback

GOOGLE_AUTH_URL = "https://accounts.google.com/o/oauth2/auth"
GOOGLE_TOKEN_URL = "https://oauth2.googleapis.com/token"
GOOGLE_USERINFO_URL = "https://www.googleapis.com/oauth2/v2/userinfo"

def main():
    st.title("üá™üá∏ –¢—Ä–µ–Ω–∞–∂–µ—Ä –∏—Å–ø–∞–Ω—Å–∫–∏—Ö –≥–ª–∞–≥–æ–ª–æ–≤")
    st.caption("OAuth –∏—Å–ø—Ä–∞–≤–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º root path")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init_session_state()
    
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    show_debug_info()
    
    # –ü–æ–ª—É—á–∞–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    query_params = dict(st.query_params)
    
    # –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º OAuth callback (—Ç–µ–ø–µ—Ä—å –Ω–∞ root path)
    if 'code' in query_params and 'state' in query_params:
        handle_oauth_callback(query_params)
    
    # 2. –ï—Å–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    elif st.session_state.authenticated:
        show_main_app()
    
    # 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
    else:
        show_login_form()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏
    show_event_log()

def init_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state"""
    if 'oauth_state' not in st.session_state:
        st.session_state.oauth_state = None
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False
    if 'user_info' not in st.session_state:
        st.session_state.user_info = None
    if 'event_log' not in st.session_state:
        st.session_state.event_log = []

def log_event(event, data=None):
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è"""
    timestamp = datetime.datetime.now().strftime("%H:%M:%S")
    log_entry = {
        "time": timestamp,
        "event": event,
        "data": data or {}
    }
    st.session_state.event_log.append(log_entry)
    
    if len(st.session_state.event_log) > 15:
        st.session_state.event_log = st.session_state.event_log[-15:]

def show_debug_info():
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    with st.expander("üîç Debug Info", expanded=False):
        query_params = dict(st.query_params)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**Query Params:**")
            if query_params:
                st.json(query_params)
            else:
                st.write("(empty)")
        
        with col2:
            st.write("**OAuth Status:**")
            st.write(f"authenticated: {st.session_state.authenticated}")
            st.write(f"oauth_state: {bool(st.session_state.oauth_state)}")
            st.write(f"REDIRECT_URI: {REDIRECT_URI}")

def handle_oauth_callback(query_params):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç OAuth callback"""
    st.markdown("## üîÑ OAuth Callback (–Ω–∞ root path)")
    
    code = query_params.get('code')
    state = query_params.get('state')
    error = query_params.get('error')
    
    log_event("oauth_callback_received", {
        "has_code": bool(code),
        "has_state": bool(state),
        "has_error": bool(error),
        "path": "root"
    })
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏
    if error:
        st.error(f"‚ùå OAuth Error: {error}")
        error_description = query_params.get('error_description', 'No description')
        st.write(f"Description: {error_description}")
        
        if st.button("üîÑ Try Again"):
            clear_url_params()
            st.rerun()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
    if not code:
        st.error("‚ùå Authorization code missing")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º state
    if not state or state != st.session_state.oauth_state:
        st.error("‚ùå State mismatch")
        st.write(f"Received: {state[:20] if state else 'None'}...")
        st.write(f"Expected: {st.session_state.oauth_state[:20] if st.session_state.oauth_state else 'None'}...")
        return
    
    # –í—Å–µ –û–ö
    st.success("‚úÖ OAuth callback validation passed!")
    st.write(f"Code: {code[:30]}...")
    st.write(f"State: {state[:20]}...")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–¥
    with st.spinner("Processing authorization..."):
        success = process_authorization_code(code)
        
        if success:
            st.success("üéâ Authentication successful!")
            # –û—á–∏—â–∞–µ–º URL –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
            clear_url_params()
            time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
            st.rerun()
        else:
            st.error("‚ùå Authentication failed")

def process_authorization_code(code):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç authorization code"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        token_data = exchange_code_for_token(code)
        if not token_data or 'access_token' not in token_data:
            st.error("‚ùå Failed to get access token")
            return False
        
        access_token = token_data['access_token']
        st.success("‚úÖ Access token received")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = get_user_info(access_token)
        if not user_info:
            st.error("‚ùå Failed to get user info")
            return False
        
        st.success("‚úÖ User info received")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        st.session_state.authenticated = True
        st.session_state.user_info = user_info
        
        log_event("authentication_successful", {
            "user_email": user_info.get('email'),
            "user_name": user_info.get('name')
        })
        
        return True
        
    except Exception as e:
        st.error(f"‚ùå Exception: {e}")
        log_event("authentication_failed", {"error": str(e)})
        return False

def exchange_code_for_token(code):
    """–û–±–º–µ–Ω–∏–≤–∞–µ—Ç –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω"""
    data = {
        'client_id': GOOGLE_CLIENT_ID,
        'client_secret': GOOGLE_CLIENT_SECRET,
        'code': code,
        'grant_type': 'authorization_code',
        'redirect_uri': REDIRECT_URI,  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ root path
    }
    
    try:
        response = requests.post(GOOGLE_TOKEN_URL, data=data, timeout=10)
        
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"Token request failed: {response.status_code}")
            st.code(response.text)
            return None
            
    except Exception as e:
        st.error(f"Token request exception: {e}")
        return None

def get_user_info(access_token):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    headers = {'Authorization': f'Bearer {access_token}'}
    
    try:
        response = requests.get(GOOGLE_USERINFO_URL, headers=headers, timeout=10)
        
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"User info request failed: {response.status_code}")
            return None
            
    except Exception as e:
        st.error(f"User info request exception: {e}")
        return None

def show_login_form():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞"""
    st.markdown("## üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.write("–í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Google –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—Ä–µ–Ω–∞–∂–µ—Ä—É:")
        
        if st.button("üîê –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google", type="primary"):
            start_oauth_flow()
    
    with col2:
        st.info("""
        **OAuth –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!**
        
        –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º root path 
        –¥–ª—è redirect –≤–º–µ—Å—Ç–æ 
        `/auth/callback`
        """)

def start_oauth_flow():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç OAuth flow"""
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º state
    state = base64.urlsafe_b64encode(os.urandom(32)).decode('utf-8')
    st.session_state.oauth_state = state
    
    log_event("oauth_flow_started", {"state": state[:20]})
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã OAuth - REDIRECT_URI —Ç–µ–ø–µ—Ä—å root
    params = {
        'client_id': GOOGLE_CLIENT_ID,
        'redirect_uri': REDIRECT_URI,  # Root path!
        'scope': 'openid email profile',
        'response_type': 'code',
        'state': state,
        'access_type': 'offline',
        'prompt': 'consent'
    }
    
    auth_url = f"{GOOGLE_AUTH_URL}?{urlencode(params)}"
    
    st.write(f"**Redirect URI:** {REDIRECT_URI}")
    st.write(f"**State:** {state[:20]}...")
    
    # Redirect —á–µ—Ä–µ–∑ JavaScript
    st.components.v1.html(f"""
    <script>
    console.log('OAuth redirect to:', '{auth_url}');
    window.location.href = '{auth_url}';
    </script>
    <div style="text-align: center; padding: 20px; background: #e3f2fd; border-radius: 10px;">
        <h3>üîÑ Redirecting to Google...</h3>
        <p>State: {state[:20]}...</p>
        <p>If redirect doesn't work, <a href="{auth_url}" target="_self">click here</a></p>
    </div>
    """, height=150)

def show_main_app():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    st.markdown("## ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
    
    user_info = st.session_state.user_info
    if user_info:
        col1, col2 = st.columns([3, 1])
        
        with col1:
            st.write(f"**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_info.get('name')}!**")
            st.write(f"üìß {user_info.get('email')}")
            
            if user_info.get('picture'):
                st.image(user_info['picture'], width=80)
        
        with col2:
            if st.button("üö™ –í—ã–π—Ç–∏"):
                logout()
                st.rerun()
    
    # –ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞
    st.markdown("---")
    st.markdown("## üá™üá∏ –¢—Ä–µ–Ω–∞–∂–µ—Ä –≥–ª–∞–≥–æ–ª–æ–≤")
    
    st.success("üéâ OAuth —É—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    st.write("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞.")
    
    # –î–µ–º–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
    if st.button("üéØ –ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ"):
        st.balloons()
        st.write("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–∑—É—á–µ–Ω–∏—è –≥–ª–∞–≥–æ–ª–æ–≤!")

def clear_url_params():
    """–û—á–∏—â–∞–µ—Ç URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
    try:
        st.query_params.clear()
        log_event("url_params_cleared")
    except Exception as e:
        log_event("url_params_clear_failed", {"error": str(e)})

def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    log_event("user_logout")
    st.session_state.authenticated = False
    st.session_state.user_info = None
    st.session_state.oauth_state = None

def show_event_log():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥ —Å–æ–±—ã—Ç–∏–π"""
    if st.session_state.event_log:
        with st.expander("üìã Event Log", expanded=False):
            for entry in reversed(st.session_state.event_log[-5:]):
                st.write(f"**{entry['time']}** - {entry['event']}")
                if entry['data']:
                    st.json(entry['data'])
                st.write("---")

if __name__ == "__main__":
    main()
