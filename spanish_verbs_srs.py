import streamlit as st
import random
import json
import datetime
import math
import pandas as pd
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass, asdict
from enum import Enum

# –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å plotly, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
try:
    import plotly.express as px
    import plotly.graph_objects as go
    PLOTLY_AVAILABLE = True
except ImportError:
    PLOTLY_AVAILABLE = False

# Local Storage –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ø—Ä–æ—Å—Ç–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ
LOCAL_STORAGE_AVAILABLE = False

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üá™üá∏ –¢—Ä–µ–Ω–∞–∂–µ—Ä –∏—Å–ø–∞–Ω—Å–∫–∏—Ö –≥–ª–∞–≥–æ–ª–æ–≤ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º",
    page_icon="üá™üá∏",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .card-container {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 2rem;
        border-radius: 1rem;
        text-align: center;
        margin: 1rem 0;
        box-shadow: 0 8px 30px rgba(0,0,0,0.1);
    }
    
    .verb-title {
        font-size: 3rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }
    
    .verb-translation {
        font-size: 1.4rem;
        opacity: 0.9;
        margin-bottom: 1.5rem;
    }
    
    .pronoun-display {
        font-size: 2rem;
        font-weight: bold;
        margin: 1.5rem 0;
        background: rgba(255,255,255,0.2);
        padding: 0.8rem 1.5rem;
        border-radius: 0.5rem;
        display: inline-block;
    }
    
    .answer-display {
        font-size: 2.5rem;
        font-weight: bold;
        background: rgba(255,255,255,0.9);
        color: #2d5e3e;
        padding: 1.5rem;
        border-radius: 0.5rem;
        margin: 1.5rem 0;
    }
    
    .metric-card {
        background: white;
        padding: 1rem;
        border-radius: 0.5rem;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        text-align: center;
    }
    
    .difficulty-btn {
        margin: 0.2rem;
        padding: 0.5rem 1rem;
        border-radius: 0.5rem;
        border: none;
        font-weight: bold;
        cursor: pointer;
    }
    
    .btn-again { background: #ff6b6b; color: white; }
    .btn-hard { background: #feca57; color: black; }
    .btn-good { background: #48ca8b; color: white; }
    .btn-easy { background: #0abde3; color: white; }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ */
    .stSidebar > div > div > div > div {
        padding-top: 1rem;
    }
    
    /* –Ø—Ä—á–µ –∫–Ω–æ–ø–∫–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏ */
    [data-testid="collapsedControl"] {
        background: linear-gradient(135deg, #667eea, #764ba2) !important;
        color: white !important;
        border-radius: 50% !important;
        font-weight: bold !important;
        font-size: 1.8rem !important;
        width: 4rem !important;
        height: 4rem !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        border: 4px solid #ffffff !important;
        box-shadow: 0 6px 25px rgba(102, 126, 234, 0.5) !important;
        position: fixed !important;
        z-index: 999 !important;
        animation: pulse 2s infinite !important;
    }
    
    [data-testid="collapsedControl"]:hover {
        background: linear-gradient(135deg, #5a67d8, #6b46c1) !important;
        transform: scale(1.15) !important;
        box-shadow: 0 8px 30px rgba(102, 126, 234, 0.7) !important;
        animation: none !important;
    }
    
    @keyframes pulse {
        0% { box-shadow: 0 6px 25px rgba(102, 126, 234, 0.5); }
        50% { box-shadow: 0 6px 25px rgba(102, 126, 234, 0.8); }
        100% { box-shadow: 0 6px 25px rgba(102, 126, 234, 0.5); }
    }
    
    /* –ë–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ */
    .stTabs [data-baseweb="tab-list"] {
        gap: 0.5rem;
    }
    
    .stTabs [data-baseweb="tab"] {
        height: 3rem;
        padding: 0.5rem 2rem;
        font-size: 1.2rem;
        font-weight: bold;
        border-radius: 25px;
        border: 2px solid #e2e8f0;
        background: white;
        color: #4a5568;
    }
    
    .stTabs [aria-selected="true"] {
        background: linear-gradient(135deg, #667eea, #764ba2) !important;
        color: white !important;
        border-color: #667eea !important;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ */
    .card-container {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 2rem;
        border-radius: 1rem;
        text-align: center;
        margin: 1rem 0;
        box-shadow: 0 8px 30px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
    }
    
    .card-container.revealed {
        background: linear-gradient(135deg, #48ca8b 0%, #2dd4bf 100%);
        transform: scale(1.02);
        box-shadow: 0 12px 40px rgba(72, 202, 139, 0.3);
    }
    /* –ú–µ–Ω–µ–µ –∑–∞–º–µ—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ */
    .reset-btn {
        background: #f7fafc !important;
        color: #718096 !important;
        border: 1px solid #e2e8f0 !important;
        padding: 0.5rem 1rem !important;
        border-radius: 15px !important;
        font-size: 0.85rem !important;
        margin-top: 2rem !important;
    }
</style>
""", unsafe_allow_html=True)

# –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
class Difficulty(Enum):
    AGAIN = 0  # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞
    HARD = 1   # –°–ª–æ–∂–Ω–æ
    GOOD = 2   # –•–æ—Ä–æ—à–æ
    EASY = 3   # –õ–µ–≥–∫–æ

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
@dataclass
class Card:
    verb: str
    pronoun_index: int
    tense: str
    easiness_factor: float = 2.5  # –ù–∞—á–∞–ª—å–Ω–∞—è –ª–µ–≥–∫–æ—Å—Ç—å
    interval: int = 1             # –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ –¥–Ω—è—Ö
    repetitions: int = 0          # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    next_review_date: str = ""    # –î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    last_review_date: str = ""    # –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    total_reviews: int = 0        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    correct_reviews: int = 0      # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    
    def __post_init__(self):
        if not self.next_review_date:
            self.next_review_date = datetime.date.today().isoformat()

# –î–∞–Ω–Ω—ã–µ –≥–ª–∞–≥–æ–ª–æ–≤ (—Ç–µ –∂–µ —á—Ç–æ –∏ —Ä–∞–Ω—å—à–µ)
VERBS = {
    'ser': {'translation': '–±—ã—Ç—å, —è–≤–ª—è—Ç—å—Å—è', 'type': 'irregular'},
    'estar': {'translation': '–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è, –±—ã—Ç—å', 'type': 'irregular'},
    'tener': {'translation': '–∏–º–µ—Ç—å', 'type': 'irregular'},
    'hacer': {'translation': '–¥–µ–ª–∞—Ç—å', 'type': 'irregular'},
    'decir': {'translation': '–≥–æ–≤–æ—Ä–∏—Ç—å, —Å–∫–∞–∑–∞—Ç—å', 'type': 'irregular'},
    'ir': {'translation': '–∏–¥—Ç–∏, –µ—Ö–∞—Ç—å', 'type': 'irregular'},
    'ver': {'translation': '–≤–∏–¥–µ—Ç—å', 'type': 'irregular'},
    'dar': {'translation': '–¥–∞–≤–∞—Ç—å', 'type': 'irregular'},
    'saber': {'translation': '–∑–Ω–∞—Ç—å', 'type': 'irregular'},
    'querer': {'translation': '—Ö–æ—Ç–µ—Ç—å, –ª—é–±–∏—Ç—å', 'type': 'irregular'},
    'llegar': {'translation': '–ø—Ä–∏–±—ã–≤–∞—Ç—å, –ø—Ä–∏—Ö–æ–¥–∏—Ç—å', 'type': 'regular-ar'},
    'pasar': {'translation': '–ø—Ä–æ—Ö–æ–¥–∏—Ç—å, –ø—Ä–æ–≤–æ–¥–∏—Ç—å', 'type': 'regular-ar'},
    'deber': {'translation': '–±—ã—Ç—å –¥–æ–ª–∂–Ω—ã–º', 'type': 'regular-er'},
    'poner': {'translation': '–∫–ª–∞—Å—Ç—å, —Å—Ç–∞–≤–∏—Ç—å', 'type': 'irregular'},
    'parecer': {'translation': '–∫–∞–∑–∞—Ç—å—Å—è', 'type': 'irregular'},
    'quedar': {'translation': '–æ—Å—Ç–∞–≤–∞—Ç—å—Å—è', 'type': 'regular-ar'},
    'creer': {'translation': '–≤–µ—Ä–∏—Ç—å, —Å—á–∏—Ç–∞—Ç—å', 'type': 'regular-er'},
    'hablar': {'translation': '–≥–æ–≤–æ—Ä–∏—Ç—å', 'type': 'regular-ar'},
    'llevar': {'translation': '–Ω–æ—Å–∏—Ç—å, –Ω–µ—Å—Ç–∏', 'type': 'regular-ar'},
    'dejar': {'translation': '–æ—Å—Ç–∞–≤–ª—è—Ç—å', 'type': 'regular-ar'},
    'seguir': {'translation': '—Å–ª–µ–¥–æ–≤–∞—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å', 'type': 'irregular'},
    'encontrar': {'translation': '–Ω–∞—Ö–æ–¥–∏—Ç—å, –≤—Å—Ç—Ä–µ—á–∞—Ç—å', 'type': 'irregular'},
    'llamar': {'translation': '–∑–≤–∞—Ç—å, –Ω–∞–∑—ã–≤–∞—Ç—å', 'type': 'regular-ar'},
    'venir': {'translation': '–ø—Ä–∏—Ö–æ–¥–∏—Ç—å', 'type': 'irregular'},
    'pensar': {'translation': '–¥—É–º–∞—Ç—å', 'type': 'irregular'},
    'salir': {'translation': '–≤—ã—Ö–æ–¥–∏—Ç—å', 'type': 'irregular'},
    'vivir': {'translation': '–∂–∏—Ç—å', 'type': 'regular-ir'},
    'sentir': {'translation': '—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å', 'type': 'irregular'},
    'trabajar': {'translation': '—Ä–∞–±–æ—Ç–∞—Ç—å', 'type': 'regular-ar'},
    'estudiar': {'translation': '–∏–∑—É—á–∞—Ç—å', 'type': 'regular-ar'}
}

PRONOUNS = ['yo', 't√∫', '√©l/ella', 'nosotros', 'vosotros', 'ellos/ellas']

CONJUGATIONS = {
    'presente': {
        'ser': ['soy', 'eres', 'es', 'somos', 'sois', 'son'],
        'estar': ['estoy', 'est√°s', 'est√°', 'estamos', 'est√°is', 'est√°n'],
        'tener': ['tengo', 'tienes', 'tiene', 'tenemos', 'ten√©is', 'tienen'],
        'hacer': ['hago', 'haces', 'hace', 'hacemos', 'hac√©is', 'hacen'],
        'decir': ['digo', 'dices', 'dice', 'decimos', 'dec√≠s', 'dicen'],
        'ir': ['voy', 'vas', 'va', 'vamos', 'vais', 'van'],
        'ver': ['veo', 'ves', 've', 'vemos', 'veis', 'ven'],
        'dar': ['doy', 'das', 'da', 'damos', 'dais', 'dan'],
        'saber': ['s√©', 'sabes', 'sabe', 'sabemos', 'sab√©is', 'saben'],
        'querer': ['quiero', 'quieres', 'quiere', 'queremos', 'quer√©is', 'quieren'],
        'llegar': ['llego', 'llegas', 'llega', 'llegamos', 'lleg√°is', 'llegan'],
        'pasar': ['paso', 'pasas', 'pasa', 'pasamos', 'pas√°is', 'pasan'],
        'deber': ['debo', 'debes', 'debe', 'debemos', 'deb√©is', 'deben'],
        'poner': ['pongo', 'pones', 'pone', 'ponemos', 'pon√©is', 'ponen'],
        'parecer': ['parezco', 'pareces', 'parece', 'parecemos', 'parec√©is', 'parecen'],
        'quedar': ['quedo', 'quedas', 'queda', 'quedamos', 'qued√°is', 'quedan'],
        'creer': ['creo', 'crees', 'cree', 'creemos', 'cre√©is', 'creen'],
        'hablar': ['hablo', 'hablas', 'habla', 'hablamos', 'habl√°is', 'hablan'],
        'llevar': ['llevo', 'llevas', 'lleva', 'llevamos', 'llev√°is', 'llevan'],
        'dejar': ['dejo', 'dejas', 'deja', 'dejamos', 'dej√°is', 'dejan'],
        'seguir': ['sigo', 'sigues', 'sigue', 'seguimos', 'segu√≠s', 'siguen'],
        'encontrar': ['encuentro', 'encuentras', 'encuentra', 'encontramos', 'encontr√°is', 'encuentran'],
        'llamar': ['llamo', 'llamas', 'llama', 'llamamos', 'llam√°is', 'llaman'],
        'venir': ['vengo', 'vienes', 'viene', 'venimos', 'ven√≠s', 'vienen'],
        'pensar': ['pienso', 'piensas', 'piensa', 'pensamos', 'pens√°is', 'piensan'],
        'salir': ['salgo', 'sales', 'sale', 'salimos', 'sal√≠s', 'salen'],
        'vivir': ['vivo', 'vives', 'vive', 'vivimos', 'viv√≠s', 'viven'],
        'sentir': ['siento', 'sientes', 'siente', 'sentimos', 'sent√≠s', 'sienten'],
        'trabajar': ['trabajo', 'trabajas', 'trabaja', 'trabajamos', 'trabaj√°is', 'trabajan'],
        'estudiar': ['estudio', 'estudias', 'estudia', 'estudiamos', 'estudi√°is', 'estudian']
    },
    'indefinido': {
        'ser': ['fui', 'fuiste', 'fue', 'fuimos', 'fuisteis', 'fueron'],
        'estar': ['estuve', 'estuviste', 'estuvo', 'estuvimos', 'estuvisteis', 'estuvieron'],
        'tener': ['tuve', 'tuviste', 'tuvo', 'tuvimos', 'tuvisteis', 'tuvieron'],
        'hacer': ['hice', 'hiciste', 'hizo', 'hicimos', 'hicisteis', 'hicieron'],
        'decir': ['dije', 'dijiste', 'dijo', 'dijimos', 'dijisteis', 'dijeron'],
        'ir': ['fui', 'fuiste', 'fue', 'fuimos', 'fuisteis', 'fueron'],
        'ver': ['vi', 'viste', 'vio', 'vimos', 'visteis', 'vieron'],
        'dar': ['di', 'diste', 'dio', 'dimos', 'disteis', 'dieron'],
        'saber': ['supe', 'supiste', 'supo', 'supimos', 'supisteis', 'supieron'],
        'querer': ['quise', 'quisiste', 'quiso', 'quisimos', 'quisisteis', 'quisieron'],
        'llegar': ['llegu√©', 'llegaste', 'lleg√≥', 'llegamos', 'llegasteis', 'llegaron'],
        'pasar': ['pas√©', 'pasaste', 'pas√≥', 'pasamos', 'pasasteis', 'pasaron'],
        'deber': ['deb√≠', 'debiste', 'debi√≥', 'debimos', 'debisteis', 'debieron'],
        'poner': ['puse', 'pusiste', 'puso', 'pusimos', 'pusisteis', 'pusieron'],
        'parecer': ['parec√≠', 'pareciste', 'pareci√≥', 'parecimos', 'parecisteis', 'parecieron'],
        'quedar': ['qued√©', 'quedaste', 'qued√≥', 'quedamos', 'quedasteis', 'quedaron'],
        'creer': ['cre√≠', 'cre√≠ste', 'crey√≥', 'cre√≠mos', 'cre√≠steis', 'creyeron'],
        'hablar': ['habl√©', 'hablaste', 'habl√≥', 'hablamos', 'hablasteis', 'hablaron'],
        'llevar': ['llev√©', 'llevaste', 'llev√≥', 'llevamos', 'llevasteis', 'llevaron'],
        'dejar': ['dej√©', 'dejaste', 'dej√≥', 'dejamos', 'dejasteis', 'dejaron'],
        'seguir': ['segu√≠', 'seguiste', 'sigui√≥', 'seguimos', 'seguisteis', 'siguieron'],
        'encontrar': ['encontr√©', 'encontraste', 'encontr√≥', 'encontramos', 'encontrasteis', 'encontraron'],
        'llamar': ['llam√©', 'llamaste', 'llam√≥', 'llamamos', 'llamasteis', 'llamaron'],
        'venir': ['vine', 'viniste', 'vino', 'vinimos', 'vinisteis', 'vinieron'],
        'pensar': ['pens√©', 'pensaste', 'pens√≥', 'pensamos', 'pensasteis', 'pensaron'],
        'salir': ['sal√≠', 'saliste', 'sali√≥', 'salimos', 'salisteis', 'salieron'],
        'vivir': ['viv√≠', 'viviste', 'vivi√≥', 'vivimos', 'vivisteis', 'vivieron'],
        'sentir': ['sent√≠', 'sentiste', 'sinti√≥', 'sentimos', 'sentisteis', 'sintieron'],
        'trabajar': ['trabaj√©', 'trabajaste', 'trabaj√≥', 'trabajamos', 'trabajasteis', 'trabajaron'],
        'estudiar': ['estudi√©', 'estudiaste', 'estudi√≥', 'estudiamos', 'estudiasteis', 'estudiaron']
    },
    'subjuntivo': {
        'ser': ['sea', 'seas', 'sea', 'seamos', 'se√°is', 'sean'],
        'estar': ['est√©', 'est√©s', 'est√©', 'estemos', 'est√©is', 'est√©n'],
        'tener': ['tenga', 'tengas', 'tenga', 'tengamos', 'teng√°is', 'tengan'],
        'hacer': ['haga', 'hagas', 'haga', 'hagamos', 'hag√°is', 'hagan'],
        'decir': ['diga', 'digas', 'diga', 'digamos', 'dig√°is', 'digan'],
        'ir': ['vaya', 'vayas', 'vaya', 'vayamos', 'vay√°is', 'vayan'],
        'ver': ['vea', 'veas', 'vea', 'veamos', 've√°is', 'vean'],
        'dar': ['d√©', 'des', 'd√©', 'demos', 'deis', 'den'],
        'saber': ['sepa', 'sepas', 'sepa', 'sepamos', 'sep√°is', 'sepan'],
        'querer': ['quiera', 'quieras', 'quiera', 'queramos', 'quer√°is', 'quieran'],
        'llegar': ['llegue', 'llegues', 'llegue', 'lleguemos', 'llegu√©is', 'lleguen'],
        'pasar': ['pase', 'pases', 'pase', 'pasemos', 'pas√©is', 'pasen'],
        'deber': ['deba', 'debas', 'deba', 'debamos', 'deb√°is', 'deban'],
        'poner': ['ponga', 'pongas', 'ponga', 'pongamos', 'pong√°is', 'pongan'],
        'parecer': ['parezca', 'parezcas', 'parezca', 'parezcamos', 'parezc√°is', 'parezcan'],
        'quedar': ['quede', 'quedes', 'quede', 'quedemos', 'qued√©is', 'queden'],
        'creer': ['crea', 'creas', 'crea', 'creamos', 'cre√°is', 'crean'],
        'hablar': ['hable', 'hables', 'hable', 'hablemos', 'habl√©is', 'hablen'],
        'llevar': ['lleve', 'lleves', 'lleve', 'llevemos', 'llev√©is', 'lleven'],
        'dejar': ['deje', 'dejes', 'deje', 'dejemos', 'dej√©is', 'dejen'],
        'seguir': ['siga', 'sigas', 'siga', 'sigamos', 'sig√°is', 'sigan'],
        'encontrar': ['encuentre', 'encuentres', 'encuentre', 'encontremos', 'encontr√©is', 'encuentren'],
        'llamar': ['llame', 'llames', 'llame', 'llamemos', 'llam√©is', 'llamen'],
        'venir': ['venga', 'vengas', 'venga', 'vengamos', 'veng√°is', 'vengan'],
        'pensar': ['piense', 'pienses', 'piense', 'pensemos', 'pens√©is', 'piensen'],
        'salir': ['salga', 'salgas', 'salga', 'salgamos', 'salg√°is', 'salgan'],
        'vivir': ['viva', 'vivas', 'viva', 'vivamos', 'viv√°is', 'vivan'],
        'sentir': ['sienta', 'sientas', 'sienta', 'sintamos', 'sint√°is', 'sientan'],
        'trabajar': ['trabaje', 'trabajes', 'trabaje', 'trabajemos', 'trabaj√©is', 'trabajen'],
        'estudiar': ['estudie', 'estudies', 'estudie', 'estudiemos', 'estudi√©is', 'estudien']
    },
    'imperfecto': {
        'ser': ['era', 'eras', 'era', '√©ramos', 'erais', 'eran'],
        'estar': ['estaba', 'estabas', 'estaba', 'est√°bamos', 'estabais', 'estaban'],
        'tener': ['ten√≠a', 'ten√≠as', 'ten√≠a', 'ten√≠amos', 'ten√≠ais', 'ten√≠an'],
        'hacer': ['hac√≠a', 'hac√≠as', 'hac√≠a', 'hac√≠amos', 'hac√≠ais', 'hac√≠an'],
        'decir': ['dec√≠a', 'dec√≠as', 'dec√≠a', 'dec√≠amos', 'dec√≠ais', 'dec√≠an'],
        'ir': ['iba', 'ibas', 'iba', '√≠bamos', 'ibais', 'iban'],
        'ver': ['ve√≠a', 've√≠as', 've√≠a', 've√≠amos', 've√≠ais', 've√≠an'],
        'dar': ['daba', 'dabas', 'daba', 'd√°bamos', 'dabais', 'daban'],
        'saber': ['sab√≠a', 'sab√≠as', 'sab√≠a', 'sab√≠amos', 'sab√≠ais', 'sab√≠an'],
        'querer': ['quer√≠a', 'quer√≠as', 'quer√≠a', 'quer√≠amos', 'quer√≠ais', 'quer√≠an'],
        'llegar': ['llegaba', 'llegabas', 'llegaba', 'lleg√°bamos', 'llegabais', 'llegaban'],
        'pasar': ['pasaba', 'pasabas', 'pasaba', 'pas√°bamos', 'pasabais', 'pasaban'],
        'deber': ['deb√≠a', 'deb√≠as', 'deb√≠a', 'deb√≠amos', 'deb√≠ais', 'deb√≠an'],
        'poner': ['pon√≠a', 'pon√≠as', 'pon√≠a', 'pon√≠amos', 'pon√≠ais', 'pon√≠an'],
        'parecer': ['parec√≠a', 'parec√≠as', 'parec√≠a', 'parec√≠amos', 'parec√≠ais', 'parec√≠an'],
        'quedar': ['quedaba', 'quedabas', 'quedaba', 'qued√°bamos', 'quedabais', 'quedaban'],
        'creer': ['cre√≠a', 'cre√≠as', 'cre√≠a', 'cre√≠amos', 'cre√≠ais', 'cre√≠an'],
        'hablar': ['hablaba', 'hablabas', 'hablaba', 'habl√°bamos', 'hablabais', 'hablaban'],
        'llevar': ['llevaba', 'llevabas', 'llevaba', 'llev√°bamos', 'llevabais', 'llevaban'],
        'dejar': ['dejaba', 'dejabas', 'dejaba', 'dej√°bamos', 'dejabais', 'dejaban'],
        'seguir': ['segu√≠a', 'segu√≠as', 'segu√≠a', 'segu√≠amos', 'segu√≠ais', 'segu√≠an'],
        'encontrar': ['encontraba', 'encontrabas', 'encontraba', 'encontr√°bamos', 'encontrabais', 'encontraban'],
        'llamar': ['llamaba', 'llamabas', 'llamaba', 'llam√°bamos', 'llamabais', 'llamaban'],
        'venir': ['ven√≠a', 'ven√≠as', 'ven√≠a', 'ven√≠amos', 'ven√≠ais', 'ven√≠an'],
        'pensar': ['pensaba', 'pensabas', 'pensaba', 'pens√°bamos', 'pensabais', 'pensaban'],
        'salir': ['sal√≠a', 'sal√≠as', 'sal√≠a', 'sal√≠amos', 'sal√≠ais', 'sal√≠an'],
        'vivir': ['viv√≠a', 'viv√≠as', 'viv√≠a', 'viv√≠amos', 'viv√≠ais', 'viv√≠an'],
        'sentir': ['sent√≠a', 'sent√≠as', 'sent√≠a', 'sent√≠amos', 'sent√≠ais', 'sent√≠an'],
        'trabajar': ['trabajaba', 'trabajabas', 'trabajaba', 'trabaj√°bamos', 'trabajabais', 'trabajaban'],
        'estudiar': ['estudiaba', 'estudiabas', 'estudiaba', 'estudi√°bamos', 'estud√≠abais', 'estudiaban']
    }
}

class SRSManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    
    @staticmethod
    def calculate_next_interval(card: Card, difficulty: Difficulty) -> Tuple[int, float]:
        """
        –ê–ª–≥–æ—Ä–∏—Ç–º SM-2 –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–Ω–æ–≤—ã–π_–∏–Ω—Ç–µ—Ä–≤–∞–ª, –Ω–æ–≤—ã–π_easiness_factor)
        """
        ef = card.easiness_factor
        interval = card.interval
        repetitions = card.repetitions
        
        if difficulty == Difficulty.AGAIN:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
            return 1, max(1.3, ef - 0.2)
        
        if repetitions == 0:
            interval = 1
        elif repetitions == 1:
            interval = 6
        else:
            interval = int(interval * ef)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º easiness factor –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        if difficulty == Difficulty.EASY:
            ef = ef + 0.15
        elif difficulty == Difficulty.GOOD:
            ef = ef + 0.1
        elif difficulty == Difficulty.HARD:
            ef = ef - 0.15
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º easiness factor
        ef = max(1.3, min(3.0, ef))
        
        return interval, ef
    
    @staticmethod
    def update_card(card: Card, difficulty: Difficulty) -> Card:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞"""
        today = datetime.date.today()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        card.total_reviews += 1
        if difficulty in [Difficulty.GOOD, Difficulty.EASY]:
            card.correct_reviews += 1
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if difficulty == Difficulty.AGAIN:
            card.repetitions = 0
        else:
            card.repetitions += 1
        
        new_interval, new_ef = SRSManager.calculate_next_interval(card, difficulty)
        
        card.interval = new_interval
        card.easiness_factor = new_ef
        card.last_review_date = today.isoformat()
        card.next_review_date = (today + datetime.timedelta(days=new_interval)).isoformat()
        
        return card

class DataManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    def save_to_local_storage():
        """–ü—Å–µ–≤–¥–æ-—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (–¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤ session_state)"""
        # –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ session_state –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç Google Auth
        return True
    
    @staticmethod
    def load_from_local_storage():
        """–ü—Å–µ–≤–¥–æ-–∑–∞–≥—Ä—É–∑–∫–∞ (–¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤ session_state)"""
        # –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ session_state –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç Google Auth
        return False
    
    @staticmethod
    def clear_all_data():
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"""
        # –û—á–∏—â–∞–µ–º session state
        st.session_state.cards = {}
        st.session_state.current_card = None
        st.session_state.daily_stats = {
            'reviews_today': 0,
            'correct_today': 0,
            'new_cards_today': 0,
            'last_reset': datetime.date.today().isoformat()
        }

def init_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    if 'initialized' not in st.session_state:
        st.session_state.initialized = True
    
    if 'cards' not in st.session_state:
        st.session_state.cards = {}
    
    if 'current_card' not in st.session_state:
        st.session_state.current_card = None
    
    if 'is_revealed' not in st.session_state:
        st.session_state.is_revealed = False
    
    if 'daily_stats' not in st.session_state:
        st.session_state.daily_stats = {
            'reviews_today': 0,
            'correct_today': 0,
            'new_cards_today': 0,
            'last_reset': datetime.date.today().isoformat()
        }
    
    if 'settings' not in st.session_state:
        st.session_state.settings = {
            'new_cards_per_day': 10,
            'review_cards_per_day': 50,
            'selected_tenses': ['presente'],
            'auto_save': True
        }
    
    if 'show_tips' not in st.session_state:
        st.session_state.show_tips = False
    
    # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    if 'first_time' not in st.session_state:
        st.session_state.first_time = True
    
    # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if 'settings_changed' not in st.session_state:
        st.session_state.settings_changed = False

def get_card_key(verb: str, pronoun_index: int, tense: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏"""
    return f"{verb}_{pronoun_index}_{tense}"

def get_or_create_card(verb: str, pronoun_index: int, tense: str) -> Card:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é"""
    key = get_card_key(verb, pronoun_index, tense)
    
    if key not in st.session_state.cards:
        st.session_state.cards[key] = Card(
            verb=verb,
            pronoun_index=pronoun_index,
            tense=tense
        )
    
    return st.session_state.cards[key]

def get_due_cards() -> List[Card]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    today = datetime.date.today().isoformat()
    
    due_cards = []
    for card in st.session_state.cards.values():
        if (card.next_review_date <= today and 
            card.tense in st.session_state.settings['selected_tenses']):
            due_cards.append(card)
    
    return sorted(due_cards, key=lambda x: x.next_review_date)

def get_new_cards() -> List[Tuple[str, int, str]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è"""
    new_cards = []
    existing_keys = set(st.session_state.cards.keys())
    
    for tense in st.session_state.settings['selected_tenses']:
        if tense not in CONJUGATIONS:
            continue
            
        for verb in CONJUGATIONS[tense]:
            if verb not in VERBS:
                continue
                
            for pronoun_index in range(6):
                key = get_card_key(verb, pronoun_index, tense)
                if key not in existing_keys:
                    new_cards.append((verb, pronoun_index, tense))
    
    random.shuffle(new_cards)
    return new_cards

def get_next_card() -> Optional[Card]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    due_cards = get_due_cards()
    if due_cards and len(due_cards) > 0:
        return due_cards[0]
    
    # –ó–∞—Ç–µ–º –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    if st.session_state.daily_stats['new_cards_today'] < st.session_state.settings['new_cards_per_day']:
        new_cards = get_new_cards()
        if new_cards:
            verb, pronoun_index, tense = new_cards[0]
            return get_or_create_card(verb, pronoun_index, tense)
    
    return None

def reset_daily_stats():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–Ω—è"""
    today = datetime.date.today().isoformat()
    if st.session_state.daily_stats['last_reset'] != today:
        st.session_state.daily_stats.update({
            'reviews_today': 0,
            'correct_today': 0,
            'new_cards_today': 0,
            'last_reset': today
        })

def process_answer(difficulty: Difficulty):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not st.session_state.current_card:
        return
    
    # –û—Ç–º–µ—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–∫ –Ω–æ–≤—É—é –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑
    is_new_card = st.session_state.current_card.total_reviews == 0
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    updated_card = SRSManager.update_card(st.session_state.current_card, difficulty)
    card_key = get_card_key(
        updated_card.verb, 
        updated_card.pronoun_index, 
        updated_card.tense
    )
    st.session_state.cards[card_key] = updated_card
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    st.session_state.daily_stats['reviews_today'] += 1
    if difficulty in [Difficulty.GOOD, Difficulty.EASY]:
        st.session_state.daily_stats['correct_today'] += 1
    if is_new_card:
        st.session_state.daily_stats['new_cards_today'] += 1
    
    # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Local Storage
    if st.session_state.settings.get('auto_save', True):
        DataManager.save_to_local_storage()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    st.session_state.current_card = None
    st.session_state.is_revealed = False

def show_study_tips():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–≤–µ—Ç—ã –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–º—É –∏–∑—É—á–µ–Ω–∏—é"""
    st.header("üí° –°–æ–≤–µ—Ç—ã –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–º—É –∏–∑—É—á–µ–Ω–∏—é")
    
    with st.expander("üß† –ü—Ä–∏–Ω—Ü–∏–ø—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è", expanded=True):
        st.markdown("""
        **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞:**
        - –ö–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è **–ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –≤—ã –∏—Ö –∑–∞–±—É–¥–µ—Ç–µ**
        - **–£–≤–µ–ª–∏—á–∏–≤–∞—é—â–∏–µ—Å—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã** –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö
        - **–ß–∞—â–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è** –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö
        
        **–ß–µ—Å—Ç–Ω–∞—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞ - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É:**
        - **‚ùå –°–Ω–æ–≤–∞** - –Ω–µ –ø–æ–º–Ω—é –≤–æ–æ–±—â–µ –∏–ª–∏ –æ—á–µ–Ω—å –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ
        - **üòì –°–ª–æ–∂–Ω–æ** - –ø–æ–º–Ω—é, –Ω–æ —Å –±–æ–ª—å—à–∏–º —É—Å–∏–ª–∏–µ–º  
        - **üòä –•–æ—Ä–æ—à–æ** - –ø–æ–º–Ω—é —É–≤–µ—Ä–µ–Ω–Ω–æ, –Ω–æ –Ω–µ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
        - **üòé –õ–µ–≥–∫–æ** - –ø–æ–º–Ω—é –º–≥–Ω–æ–≤–µ–Ω–Ω–æ, –±–µ–∑ —É—Å–∏–ª–∏–π
        """)
    
    with st.expander("üìÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–µ–∂–∏–º –∏–∑—É—á–µ–Ω–∏—è"):
        st.markdown("""
        **–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞:**
        - **10-20 –º–∏–Ω—É—Ç** –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ª—É—á—à–µ, —á–µ–º 2 —á–∞—Å–∞ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é
        - **–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å** –≤–∞–∂–Ω–µ–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        - **–û–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—Ä–µ–º—è** –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É
        
        **–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
        - *–ù–∞—á–∏–Ω–∞—é—â–∏–µ*: 5-10 –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫, 20-50 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ Presente
        - *–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ*: 15-25 –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫, 100+ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π, –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞
        """)
    
    with st.expander("üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑—É—á–µ–Ω–∏—è"):
        st.markdown("""
        **–≠—Ç–∞–ø 1: –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ (–ø–µ—Ä–≤—ã–µ 2 –Ω–µ–¥–µ–ª–∏)**
        - –¢–æ–ª—å–∫–æ **Presente** - —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –≤—Ä–µ–º—è
        - **5 –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –¥–µ–Ω—å**
        - –§–æ–∫—É—Å –Ω–∞ **—Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–∞—Ö** (-ar, -er, -ir)
        
        **–≠—Ç–∞–ø 2: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ (3-4 –Ω–µ–¥–µ–ª–∏)**  
        - –î–æ–±–∞–≤—å—Ç–µ **Pret√©rito Indefinido**
        - –£–≤–µ–ª–∏—á—å—Ç–µ –¥–æ **10 –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫**
        - –ù–∞—á–Ω–∏—Ç–µ **–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã** (ser, estar, tener)
        
        **–≠—Ç–∞–ø 3: –£–≥–ª—É–±–ª–µ–Ω–∏–µ (2+ –º–µ—Å—è—Ü–∞)**
        - **–í—Å–µ –≤—Ä–µ–º–µ–Ω–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ**
        - **15+ –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –¥–µ–Ω—å**
        - –§–æ–∫—É—Å –Ω–∞ **—Å–ª–æ–∂–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–∞—Ö** (subjuntivo)
        """)
    
    with st.expander("üí° –¢–µ—Ö–Ω–∏–∫–∏ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"):
        st.markdown("""
        **–ú–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–µ–º—ã:**
        - **–ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏**: —Å–≤—è–∑—ã–≤–∞–π—Ç–µ —Ñ–æ—Ä–º—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
        - **–†–∏—Ñ–º—ã**: "yo soy, t√∫ vas, √©l da"
        - **–í–∏–∑—É–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–∑—ã**: –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–π—Ç–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        
        **–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –≥–ª–∞–≥–æ–ª–æ–≤:**
        - –ü–æ —Ç–∏–ø—É: —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ vs –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
        - –ü–æ —á–∞—Å—Ç–æ—Ç–µ: –∏–∑—É—á–∞–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ
        - –ü–æ —Ç–µ–º–µ: –≥–ª–∞–≥–æ–ª—ã –¥–≤–∏–∂–µ–Ω–∏—è, —ç–º–æ—Ü–∏–π, –¥–µ–π—Å—Ç–≤–∏–π
        """)
    
    with st.expander("üìä –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"):
        st.markdown("""
        **–ó–¥–æ—Ä–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
        - –¢–æ—á–Ω–æ—Å—Ç—å: **80-90%** (–≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ)
        - –ù–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫: **70%** –æ—Ç –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
        - –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏: **6-7 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é**
        
        **–¢—Ä–µ–≤–æ–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:**
        - –¢–æ—á–Ω–æ—Å—Ç—å **< 70%** - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        - **–ü—Ä–æ–ø—É—Å–∫ –¥–Ω–µ–π** - –Ω–∞—Ä—É—à–∞–µ—Ç—Å—è –ø—Ä–∏–Ω—Ü–∏–ø –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        - –ú–Ω–æ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫ **"–°–Ω–æ–≤–∞"** - –∏–∑—É—á–∞–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ
        """)

def show_statistics():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not st.session_state.cards:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ!")
        return
    
    st.header("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_cards = len(st.session_state.cards)
    total_reviews = sum(card.total_reviews for card in st.session_state.cards.values())
    total_correct = sum(card.correct_reviews for card in st.session_state.cards.values())
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üìö –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫", total_cards)
    with col2:
        st.metric("üîÑ –í—Å–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π", total_reviews)
    with col3:
        accuracy = (total_correct / total_reviews * 100) if total_reviews > 0 else 0
        st.metric("üéØ –¢–æ—á–Ω–æ—Å—Ç—å", f"{accuracy:.1f}%")
    with col4:
        due_today = len(get_due_cards())
        st.metric("‚è∞ –ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é", due_today)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∫–∞—Ä—Ç–æ—á–µ–∫
    st.subheader("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫")
    
    today = datetime.date.today().isoformat()
    categories = {
        '–ù–æ–≤—ã–µ': 0,
        '–ò–∑—É—á–∞–µ–º—ã–µ': 0,
        '–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ': 0,
        '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ': 0
    }
    
    for card in st.session_state.cards.values():
        if card.total_reviews == 0:
            categories['–ù–æ–≤—ã–µ'] += 1
        elif card.repetitions < 5:
            categories['–ò–∑—É—á–∞–µ–º—ã–µ'] += 1
        elif card.next_review_date <= today:
            categories['–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ'] += 1
        else:
            categories['–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ'] += 1
    
    col1, col2, col3, col4 = st.columns(4)
    cols = [col1, col2, col3, col4]
    
    for i, (category, count) in enumerate(categories.items()):
        with cols[i]:
            st.metric(category, count)
    
    # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –¥–Ω—è–º
    if total_reviews > 0:
        st.subheader("üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        review_dates = []
        for card in st.session_state.cards.values():
            if card.last_review_date:
                review_dates.append(card.last_review_date)
        
        if review_dates:
            df = pd.DataFrame({'date': review_dates})
            df['date'] = pd.to_datetime(df['date'])
            daily_reviews = df.groupby(df['date'].dt.date).size().reset_index()
            daily_reviews.columns = ['–î–∞—Ç–∞', '–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π']
            daily_reviews['–î–∞—Ç–∞'] = daily_reviews['–î–∞—Ç–∞'].astype(str)
            
            if PLOTLY_AVAILABLE:
                fig = px.bar(daily_reviews, x='–î–∞—Ç–∞', y='–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π', 
                            title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –ø–æ –¥–Ω—è–º')
                
                # –£–ø—Ä–æ—â–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ - —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                fig.update_layout(
                    showlegend=False,
                    xaxis=dict(
                        title="–î–∞—Ç–∞",
                        showgrid=True,
                        fixedrange=True  # –û—Ç–∫–ª—é—á–∞–µ–º –∑—É–º –ø–æ X
                    ),
                    yaxis=dict(
                        title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π",
                        showgrid=True,
                        fixedrange=True  # –û—Ç–∫–ª—é—á–∞–µ–º –∑—É–º –ø–æ Y
                    ),
                    dragmode=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –¥—Ä–∞–≥
                    plot_bgcolor='rgba(0,0,0,0)',
                    paper_bgcolor='rgba(0,0,0,0)'
                )
                
                # –£–±–∏—Ä–∞–µ–º —Ç—É–ª–±–∞—Ä –∏ –¥–µ–ª–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç–∏—á–Ω—ã–º
                config = {
                    'displayModeBar': False,
                    'staticPlot': False,
                    'scrollZoom': False,
                    'doubleClick': False,
                    'showTips': False,
                    'displaylogo': False
                }
                
                st.plotly_chart(fig, use_container_width=True, config=config)
            else:
                # –ü—Ä–æ—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞ –≤–º–µ—Å—Ç–æ –≥—Ä–∞—Ñ–∏–∫–∞
                st.dataframe(daily_reviews, use_container_width=True, hide_index=True)
                st.caption("üìä –î–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ plotly: pip install plotly")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∞–º
    st.subheader("‚è∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∞–º")
    
    tense_stats = {}
    for card in st.session_state.cards.values():
        tense = card.tense
        if tense not in tense_stats:
            tense_stats[tense] = {
                'total': 0,
                'reviews': 0,
                'correct': 0
            }
        
        tense_stats[tense]['total'] += 1
        tense_stats[tense]['reviews'] += card.total_reviews
        tense_stats[tense]['correct'] += card.correct_reviews
    
    tense_names = {
        'presente': 'Presente',
        'indefinido': 'Pret√©rito Indefinido',
        'subjuntivo': 'Subjuntivo',
        'imperfecto': 'Imperfecto'
    }
    
    for tense, stats in tense_stats.items():
        tense_name = tense_names.get(tense, tense)
        accuracy = (stats['correct'] / stats['reviews'] * 100) if stats['reviews'] > 0 else 0
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric(f"{tense_name} - –ö–∞—Ä—Ç–æ—á–µ–∫", stats['total'])
        with col2:
            st.metric(f"{tense_name} - –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π", stats['reviews'])
        with col3:
            st.metric(f"{tense_name} - –¢–æ—á–Ω–æ—Å—Ç—å", f"{accuracy:.1f}%")

def apply_settings():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö"""
    if st.session_state.settings.get('auto_save', True):
        DataManager.save_to_local_storage()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    st.session_state.current_card = None
    st.session_state.is_revealed = False
    
    st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    if not st.session_state.cards:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ!")
        return
    
    st.header("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_cards = len(st.session_state.cards)
    total_reviews = sum(card.total_reviews for card in st.session_state.cards.values())
    total_correct = sum(card.correct_reviews for card in st.session_state.cards.values())
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üìö –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫", total_cards)
    with col2:
        st.metric("üîÑ –í—Å–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π", total_reviews)
    with col3:
        accuracy = (total_correct / total_reviews * 100) if total_reviews > 0 else 0
        st.metric("üéØ –¢–æ—á–Ω–æ—Å—Ç—å", f"{accuracy:.1f}%")
    with col4:
        due_today = len(get_due_cards())
        st.metric("‚è∞ –ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é", due_today)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∫–∞—Ä—Ç–æ—á–µ–∫
    st.subheader("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫")
    
    today = datetime.date.today().isoformat()
    categories = {
        '–ù–æ–≤—ã–µ': 0,
        '–ò–∑—É—á–∞–µ–º—ã–µ': 0,
        '–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ': 0,
        '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ': 0
    }
    
    for card in st.session_state.cards.values():
        if card.total_reviews == 0:
            categories['–ù–æ–≤—ã–µ'] += 1
        elif card.repetitions < 5:
            categories['–ò–∑—É—á–∞–µ–º—ã–µ'] += 1
        elif card.next_review_date <= today:
            categories['–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ'] += 1
        else:
            categories['–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ'] += 1
    
    col1, col2, col3, col4 = st.columns(4)
    cols = [col1, col2, col3, col4]
    
    for i, (category, count) in enumerate(categories.items()):
        with cols[i]:
            st.metric(category, count)
    
    # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –¥–Ω—è–º
    if total_reviews > 0:
        st.subheader("üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        review_dates = []
        for card in st.session_state.cards.values():
            if card.last_review_date:
                review_dates.append(card.last_review_date)
        
        if review_dates:
            df = pd.DataFrame({'date': review_dates})
            df['date'] = pd.to_datetime(df['date'])
            daily_reviews = df.groupby(df['date'].dt.date).size().reset_index()
            daily_reviews.columns = ['–î–∞—Ç–∞', '–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π']
            
            if PLOTLY_AVAILABLE:
                fig = px.bar(daily_reviews, x='–î–∞—Ç–∞', y='–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π', 
                            title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –ø–æ –¥–Ω—è–º')
                st.plotly_chart(fig, use_container_width=True)
            else:
                # –ü—Ä–æ—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞ –≤–º–µ—Å—Ç–æ –≥—Ä–∞—Ñ–∏–∫–∞
                st.dataframe(daily_reviews, use_container_width=True)
                st.caption("üìä –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ plotly –¥–ª—è –ø–æ–ª–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏)")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∞–º
    st.subheader("‚è∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∞–º")
    
    tense_stats = {}
    for card in st.session_state.cards.values():
        tense = card.tense
        if tense not in tense_stats:
            tense_stats[tense] = {
                'total': 0,
                'reviews': 0,
                'correct': 0
            }
        
        tense_stats[tense]['total'] += 1
        tense_stats[tense]['reviews'] += card.total_reviews
        tense_stats[tense]['correct'] += card.correct_reviews
    
    tense_names = {
        'presente': 'Presente',
        'indefinido': 'Pret√©rito Indefinido',
        'subjuntivo': 'Subjuntivo',
        'imperfecto': 'Imperfecto'
    }
    
    for tense, stats in tense_stats.items():
        tense_name = tense_names.get(tense, tense)
        accuracy = (stats['correct'] / stats['reviews'] * 100) if stats['reviews'] > 0 else 0
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric(f"{tense_name} - –ö–∞—Ä—Ç–æ—á–µ–∫", stats['total'])
        with col2:
            st.metric(f"{tense_name} - –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π", stats['reviews'])
        with col3:
            st.metric(f"{tense_name} - –¢–æ—á–Ω–æ—Å—Ç—å", f"{accuracy:.1f}%")

def main():
    init_session_state()
    reset_daily_stats()
    
    st.title("üá™üá∏ –¢—Ä–µ–Ω–∞–∂–µ—Ä –∏—Å–ø–∞–Ω—Å–∫–∏—Ö –≥–ª–∞–≥–æ–ª–æ–≤")
    st.caption("–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –°–æ–≤–µ—Ç—ã –ø–æ –∏–∑—É—á–µ–Ω–∏—é - –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
        if st.button("üí° –°–æ–≤–µ—Ç—ã –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–º—É –∏–∑—É—á–µ–Ω–∏—é", key="study_tips", use_container_width=True):
            st.session_state.show_tips = True
        
        st.markdown("---")
        
        # –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω
        st.subheader("üìö –í—Ä–µ–º–µ–Ω–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è")
        tense_options = {
            'presente': 'Presente',
            'indefinido': 'Pret√©rito Indefinido',
            'subjuntivo': 'Subjuntivo Presente',
            'imperfecto': 'Pret√©rito Imperfecto'
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        current_settings = {
            'selected_tenses': st.session_state.settings['selected_tenses'].copy(),
            'new_cards_per_day': st.session_state.settings['new_cards_per_day'],
            'review_cards_per_day': st.session_state.settings['review_cards_per_day'],
            'auto_save': st.session_state.settings.get('auto_save', True)
        }
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        new_selected_tenses = []
        for tense_key, tense_name in tense_options.items():
            if st.checkbox(tense_name, value=tense_key in st.session_state.settings['selected_tenses'], key=f"tense_{tense_key}"):
                new_selected_tenses.append(tense_key)
        
        new_selected_tenses = new_selected_tenses or ['presente']
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤
        st.subheader("üéØ –î–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã")
        new_new_cards = st.slider(
            "–ù–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –¥–µ–Ω—å", 1, 50, st.session_state.settings['new_cards_per_day'], key="new_cards_slider"
        )
        new_review_cards = st.slider(
            "–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –≤ –¥–µ–Ω—å", 10, 200, st.session_state.settings['review_cards_per_day'], key="review_cards_slider"
        )
        
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        new_auto_save = st.checkbox(
            "üîÑ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", 
            value=st.session_state.settings.get('auto_save', True),
            help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –±—Ä–∞—É–∑–µ—Ä–µ",
            key="auto_save_checkbox"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_changed = (
            current_settings['selected_tenses'] != new_selected_tenses or
            current_settings['new_cards_per_day'] != new_new_cards or
            current_settings['review_cards_per_day'] != new_review_cards or
            current_settings['auto_save'] != new_auto_save
        )
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç—å (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å)
        if settings_changed:
            if st.button("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", key="apply_settings", use_container_width=True, type="primary"):
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                st.session_state.settings['selected_tenses'] = new_selected_tenses
                st.session_state.settings['new_cards_per_day'] = new_new_cards
                st.session_state.settings['review_cards_per_day'] = new_review_cards
                st.session_state.settings['auto_save'] = new_auto_save
                
                apply_settings()
                st.rerun()
        
        st.markdown("---")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        st.subheader("üìä –°–µ–≥–æ–¥–Ω—è")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π", st.session_state.daily_stats['reviews_today'])
            st.metric("–ù–æ–≤—ã—Ö", st.session_state.daily_stats['new_cards_today'])
        with col2:
            st.metric("–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö", st.session_state.daily_stats['correct_today'])
            due_count = len(get_due_cards())
            st.metric("–ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é", due_count)
        
        # –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
        total_reviews = sum(card.total_reviews for card in st.session_state.cards.values())
        total_correct = sum(card.correct_reviews for card in st.session_state.cards.values())
        accuracy = (total_correct / total_reviews * 100) if total_reviews > 0 else 0
        st.metric("üéØ –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å", f"{accuracy:.1f}%")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        st.markdown("---")
        st.subheader("üíæ –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
        st.info("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ä–∞–º–∫–∞—Ö —Å–µ—Å—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞")
        st.caption("–î–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è Google Auth")
        
        if st.button("üíæ Google Auth (—Å–∫–æ—Ä–æ)", type="secondary", disabled=True, key="google_auth_placeholder"):
            st.info("üöß –§—É–Ω–∫—Ü–∏—è Google –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        
        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–≤–Ω–∏–∑—É, –º–µ–Ω–µ–µ –∑–∞–º–µ—Ç–Ω–∞—è)
        st.markdown('<div class="reset-btn">', unsafe_allow_html=True)
        if st.button("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", key="reset_progress", use_container_width=True):
            if st.checkbox("–Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã", key="confirm_reset"):
                DataManager.clear_all_data()
                st.success("–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω!")
                st.rerun()
        st.markdown('</div>', unsafe_allow_html=True)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–≤–µ—Ç—ã
    if st.session_state.get('show_tips', False):
        show_study_tips()
        if st.button("‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–∑—É—á–µ–Ω–∏—é", type="primary"):
            st.session_state.show_tips = False
            st.rerun()
        return
    
    tab1, tab2 = st.tabs(["üéì –ò–∑—É—á–µ–Ω–∏–µ", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])
    
    with tab1:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π
        if not st.session_state.current_card:
            st.session_state.current_card = get_next_card()
            st.session_state.is_revealed = False
        
        if not st.session_state.current_card:
            st.success("üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!")
            st.info("–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.")
            return
        
        card = st.session_state.current_card
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
        if (card.verb not in VERBS or 
            card.tense not in CONJUGATIONS or 
            card.verb not in CONJUGATIONS[card.tense]):
            st.error("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã")
            st.session_state.current_card = None
            st.rerun()
            return
        
        verb_info = VERBS[card.verb]
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        st.markdown(f"""
        <div class="card-container">
            <div class="verb-title">{card.verb}</div>
            <div class="verb-translation">{verb_info['translation']}</div>
            <div style="font-size: 1rem; opacity: 0.8; margin-bottom: 1rem;">
                {card.tense.title()}
            </div>
            <div class="pronoun-display">
                {PRONOUNS[card.pronoun_index]}
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–æ—á–∫–µ
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π", card.total_reviews)
        with col2:
            accuracy = (card.correct_reviews / card.total_reviews * 100) if card.total_reviews > 0 else 0
            st.metric("–¢–æ—á–Ω–æ—Å—Ç—å", f"{accuracy:.0f}%")
        with col3:
            st.metric("–õ–µ–≥–∫–æ—Å—Ç—å", f"{card.easiness_factor:.1f}")
        
        if not st.session_state.is_revealed:
            # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞ –æ—Ç–≤–µ—Ç–∞
            if st.button("üîç –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", type="primary", use_container_width=True):
                st.session_state.is_revealed = True
                st.rerun()
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            conjugation = CONJUGATIONS[card.tense][card.verb][card.pronoun_index]
            
            st.markdown(f"""
            <div class="answer-display">
                ‚úÖ {conjugation}
            </div>
            """, unsafe_allow_html=True)
            
            # –ö–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            st.subheader("üéØ –ö–∞–∫ –ª–µ–≥–∫–æ –±—ã–ª–æ –æ—Ç–≤–µ—Ç–∏—Ç—å?")
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                if st.button("‚ùå –°–Ω–æ–≤–∞\n(< 1 –º–∏–Ω)", key="again", use_container_width=True):
                    process_answer(Difficulty.AGAIN)
                    st.rerun()
            
            with col2:
                if st.button("üòì –°–ª–æ–∂–Ω–æ\n(< 10 –º–∏–Ω)", key="hard", use_container_width=True):
                    process_answer(Difficulty.HARD)
                    st.rerun()
            
            with col3:
                if st.button("üòä –•–æ—Ä–æ—à–æ\n(4 –¥–Ω—è)", key="good", use_container_width=True):
                    process_answer(Difficulty.GOOD)
                    st.rerun()
            
            with col4:
                if st.button("üòé –õ–µ–≥–∫–æ\n(> 4 –¥–Ω–µ–π)", key="easy", use_container_width=True):
                    process_answer(Difficulty.EASY)
                    st.rerun()
            
            st.caption("–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –ª–µ–≥–∫–æ –±—ã–ª–æ –≤—Å–ø–æ–º–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç. –≠—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏.")
    
    with tab2:
        show_statistics()

if __name__ == "__main__":
    main()
