import streamlit as st
import os
import requests
from urllib.parse import urlencode
import base64
import datetime
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
st.set_page_config(page_title="üá™üá∏ Spanish Verbs Trainer", page_icon="üá™üá∏", layout="wide")

# OAuth –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
GOOGLE_CLIENT_ID = os.getenv('GOOGLE_CLIENT_ID', '')
GOOGLE_CLIENT_SECRET = os.getenv('GOOGLE_CLIENT_SECRET', '')
REDIRECT_URI = os.getenv('REDIRECT_URI', 'https://spanishverbint-production.up.railway.app')

GOOGLE_AUTH_URL = "https://accounts.google.com/o/oauth2/auth"
GOOGLE_TOKEN_URL = "https://oauth2.googleapis.com/token"
GOOGLE_USERINFO_URL = "https://www.googleapis.com/oauth2/v2/userinfo"

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞
DEMO_VERBS = {
    'ser': {'translation': '–±—ã—Ç—å, —è–≤–ª—è—Ç—å—Å—è'},
    'estar': {'translation': '–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è, –±—ã—Ç—å'},
    'tener': {'translation': '–∏–º–µ—Ç—å'},
    'hacer': {'translation': '–¥–µ–ª–∞—Ç—å'},
    'ir': {'translation': '–∏–¥—Ç–∏, –µ—Ö–∞—Ç—å'},
    'ver': {'translation': '–≤–∏–¥–µ—Ç—å'},
    'dar': {'translation': '–¥–∞–≤–∞—Ç—å'},
    'saber': {'translation': '–∑–Ω–∞—Ç—å'},
    'querer': {'translation': '—Ö–æ—Ç–µ—Ç—å, –ª—é–±–∏—Ç—å'},
    'hablar': {'translation': '–≥–æ–≤–æ—Ä–∏—Ç—å'},
}

DEMO_CONJUGATIONS = {
    'ser': ['soy', 'eres', 'es', 'somos', 'sois', 'son'],
    'estar': ['estoy', 'est√°s', 'est√°', 'estamos', 'est√°is', 'est√°n'],
    'tener': ['tengo', 'tienes', 'tiene', 'tenemos', 'ten√©is', 'tienen'],
    'hacer': ['hago', 'haces', 'hace', 'hacemos', 'hac√©is', 'hacen'],
    'ir': ['voy', 'vas', 'va', 'vamos', 'vais', 'van'],
    'ver': ['veo', 'ves', 've', 'vemos', 'veis', 'ven'],
    'dar': ['doy', 'das', 'da', 'damos', 'dais', 'dan'],
    'saber': ['s√©', 'sabes', 'sabe', 'sabemos', 'sab√©is', 'saben'],
    'querer': ['quiero', 'quieres', 'quiere', 'queremos', 'quer√©is', 'quieren'],
    'hablar': ['hablo', 'hablas', 'habla', 'hablamos', 'habl√°is', 'hablan'],
}

PRONOUNS = ['yo', 't√∫', '√©l/ella', 'nosotros', 'vosotros', 'ellos/ellas']

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init_session_state()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º OAuth callback
    query_params = dict(st.query_params)
    
    if 'code' in query_params and 'state' in query_params:
        handle_oauth_callback(query_params)
    elif st.session_state.authenticated:
        show_main_app()
    else:
        show_welcome_page()

def init_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state"""
    if 'oauth_state' not in st.session_state:
        st.session_state.oauth_state = None
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False
    if 'user_info' not in st.session_state:
        st.session_state.user_info = None
    if 'current_verb' not in st.session_state:
        st.session_state.current_verb = None
    if 'current_pronoun' not in st.session_state:
        st.session_state.current_pronoun = 0
    if 'is_revealed' not in st.session_state:
        st.session_state.is_revealed = False
    if 'score' not in st.session_state:
        st.session_state.score = {'correct': 0, 'total': 0}

def handle_oauth_callback(query_params):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç OAuth callback"""
    st.title("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
    
    code = query_params.get('code')
    state = query_params.get('state')
    error = query_params.get('error')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏
    if error:
        st.error(f"‚ùå OAuth Error: {error}")
        if st.button("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"):
            clear_oauth_and_reload()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –∏ state
    if not code:
        st.error("‚ùå Authorization code missing")
        return
    
    if not state or state != st.session_state.oauth_state:
        st.error("‚ùå Security validation failed")
        st.write("–≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –µ—Å–ª–∏:")
        st.write("- –°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—ã–ª–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        st.write("- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
        st.write("- –û—Ç–∫—Ä—ã—Ç–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∫–ª–∞–¥–æ–∫")
        
        if st.button("üîÑ –ù–∞—á–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ"):
            clear_oauth_and_reload()
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–¥
    with st.spinner("üîÑ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞..."):
        success = process_authorization_code(code)
        
        if success:
            st.success("üéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            time.sleep(1)
            clear_url_params()
            st.rerun()
        else:
            st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞")
            if st.button("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"):
                clear_oauth_and_reload()

def process_authorization_code(code):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç authorization code"""
    try:
        # –û–±–º–µ–Ω—è–µ–º –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω
        token_data = exchange_code_for_token(code)
        if not token_data or 'access_token' not in token_data:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞")
            return False
        
        access_token = token_data['access_token']
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = get_user_info(access_token)
        if not user_info:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session
        st.session_state.authenticated = True
        st.session_state.user_info = user_info
        
        return True
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def exchange_code_for_token(code):
    """–û–±–º–µ–Ω–∏–≤–∞–µ—Ç –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω"""
    data = {
        'client_id': GOOGLE_CLIENT_ID,
        'client_secret': GOOGLE_CLIENT_SECRET,
        'code': code,
        'grant_type': 'authorization_code',
        'redirect_uri': REDIRECT_URI,
    }
    
    response = requests.post(GOOGLE_TOKEN_URL, data=data, timeout=10)
    
    if response.status_code == 200:
        return response.json()
    else:
        st.error(f"Token request failed: {response.status_code}")
        return None

def get_user_info(access_token):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    headers = {'Authorization': f'Bearer {access_token}'}
    response = requests.get(GOOGLE_USERINFO_URL, headers=headers, timeout=10)
    
    if response.status_code == 200:
        return response.json()
    else:
        st.error(f"User info request failed: {response.status_code}")
        return None

def show_welcome_page():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown("""
    <div style="text-align: center; padding: 3rem 0;">
        <h1 style="font-size: 3.5rem; color: #2d3748; margin-bottom: 1rem;">
            üá™üá∏ –¢—Ä–µ–Ω–∞–∂–µ—Ä –∏—Å–ø–∞–Ω—Å–∫–∏—Ö –≥–ª–∞–≥–æ–ª–æ–≤
        </h1>
        <h3 style="color: #718096; font-weight: 400; margin-bottom: 2rem;">
            –ò–∑—É—á–∞–π—Ç–µ —Å–ø—Ä—è–∂–µ–Ω–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        </h3>
    </div>
    """, unsafe_allow_html=True)
    
    # –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div style="text-align: center; padding: 2rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 1rem; margin: 1rem 0;">
            <h3>üß† –£–º–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ</h3>
            <p>–ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–º–µ–Ω–Ω–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –≤—ã –≥–æ—Ç–æ–≤—ã –∏—Ö –∑–∞–±—ã—Ç—å</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div style="text-align: center; padding: 2rem; background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); color: white; border-radius: 1rem; margin: 1rem 0;">
            <h3>üìä –ü—Ä–æ–≥—Ä–µ—Å—Å-—Ç—Ä–µ–∫–∏–Ω–≥</h3>
            <p>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑—É—á–µ–Ω–∏—è –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div style="text-align: center; padding: 2rem; background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%); color: white; border-radius: 1rem; margin: 1rem 0;">
            <h3>‚òÅÔ∏è –û–±–ª–∞—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è</h3>
            <p>–ò–∑—É—á–∞–π—Ç–µ –Ω–∞ –ª—é–±–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ, –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—Å–µ–≥–¥–∞ —Å –≤–∞–º–∏</p>
        </div>
        """, unsafe_allow_html=True)
    
    # –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞
    st.markdown("<br>", unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        if st.button("üîê –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google", type="primary", use_container_width=True):
            start_oauth_flow()
        
        st.markdown("""
        <div style="text-align: center; margin-top: 2rem; color: #718096;">
            <small>
                –ù—É–∂–µ–Ω Google –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.<br>
                –ú—ã –Ω–µ –ø–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–∏–º –ª–∏—á–Ω—ã–º –¥–∞–Ω–Ω—ã–º.
            </small>
        </div>
        """, unsafe_allow_html=True)

def start_oauth_flow():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç OAuth flow"""
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π state
    state = base64.urlsafe_b64encode(os.urandom(32)).decode('utf-8')
    st.session_state.oauth_state = state
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã OAuth
    params = {
        'client_id': GOOGLE_CLIENT_ID,
        'redirect_uri': REDIRECT_URI,
        'scope': 'openid email profile',
        'response_type': 'code',
        'state': state,
        'access_type': 'offline',
        'prompt': 'consent'
    }
    
    auth_url = f"{GOOGLE_AUTH_URL}?{urlencode(params)}"
    
    # Redirect —á–µ—Ä–µ–∑ JavaScript
    st.components.v1.html(f"""
    <div style="text-align: center; padding: 2rem; background: #e3f2fd; border-radius: 1rem;">
        <h3>üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ Google...</h3>
        <p>–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</p>
    </div>
    <script>
    setTimeout(function() {{
        window.location.href = '{auth_url}';
    }}, 1500);
    </script>
    """, height=150)

def show_main_app():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    user_info = st.session_state.user_info
    
    # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å
    col1, col2, col3 = st.columns([2, 1, 1])
    
    with col1:
        st.title("üá™üá∏ –¢—Ä–µ–Ω–∞–∂–µ—Ä –≥–ª–∞–≥–æ–ª–æ–≤")
        st.caption(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_info.get('name')}!")
    
    with col2:
        st.metric("–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö", st.session_state.score['correct'])
    
    with col3:
        accuracy = (st.session_state.score['correct'] / st.session_state.score['total'] * 100) if st.session_state.score['total'] > 0 else 0
        st.metric("–¢–æ—á–Ω–æ—Å—Ç—å", f"{accuracy:.0f}%")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.markdown(f"""
        <div style="text-align: center; padding: 1rem; background: #f7fafc; border-radius: 0.5rem; margin-bottom: 1rem;">
            <strong>üë§ {user_info.get('name')}</strong><br>
            <small>{user_info.get('email')}</small>
        </div>
        """, unsafe_allow_html=True)
        
        if st.button("üö™ –í—ã–π—Ç–∏", use_container_width=True):
            logout()
            st.rerun()
        
        st.markdown("---")
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        st.write(f"**–í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤:** {st.session_state.score['total']}")
        st.write(f"**–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö:** {st.session_state.score['correct']}")
        
        if st.session_state.score['total'] > 0:
            accuracy = st.session_state.score['correct'] / st.session_state.score['total'] * 100
            st.write(f"**–¢–æ—á–Ω–æ—Å—Ç—å:** {accuracy:.1f}%")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞
    show_verb_trainer()

def show_verb_trainer():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞"""
    import random
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–ª–∞–≥–æ–ª
    if not st.session_state.current_verb:
        st.session_state.current_verb = random.choice(list(DEMO_VERBS.keys()))
        st.session_state.current_pronoun = random.randint(0, 5)
        st.session_state.is_revealed = False
    
    verb = st.session_state.current_verb
    pronoun_idx = st.session_state.current_pronoun
    verb_info = DEMO_VERBS[verb]
    
    # –ö–∞—Ä—Ç–æ—á–∫–∞ –≥–ª–∞–≥–æ–ª–∞
    st.markdown(f"""
    <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 3rem; border-radius: 1rem; text-align: center; margin: 2rem 0;">
        <h1 style="font-size: 4rem; margin-bottom: 1rem;">{verb}</h1>
        <h3 style="opacity: 0.9; margin-bottom: 2rem;">{verb_info['translation']}</h3>
        <div style="font-size: 2.5rem; background: rgba(255,255,255,0.2); padding: 1rem 2rem; border-radius: 0.5rem; display: inline-block;">
            {PRONOUNS[pronoun_idx]}
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if not st.session_state.is_revealed:
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            if st.button("üîç –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", type="primary", use_container_width=True):
                st.session_state.is_revealed = True
                st.rerun()
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        conjugation = DEMO_CONJUGATIONS[verb][pronoun_idx]
        
        st.markdown(f"""
        <div style="background: linear-gradient(135deg, #48ca8b 0%, #2dd4bf 100%); color: white; padding: 2rem; border-radius: 1rem; text-align: center; margin: 2rem 0;">
            <h2 style="font-size: 3rem; margin: 0;">‚úÖ {conjugation}</h2>
        </div>
        """, unsafe_allow_html=True)
        
        # –ö–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏
        st.subheader("üéØ –ö–∞–∫ —Ö–æ—Ä–æ—à–æ –≤—ã –∑–Ω–∞–ª–∏ –æ—Ç–≤–µ—Ç?")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.button("‚ùå –ù–µ –∑–Ω–∞–ª", use_container_width=True, key="wrong"):
                process_answer(False)
        
        with col2:
            if st.button("üòê –°–ª–æ–∂–Ω–æ", use_container_width=True, key="hard"):
                process_answer(True)
        
        with col3:
            if st.button("üòä –•–æ—Ä–æ—à–æ", use_container_width=True, key="good"):
                process_answer(True)
        
        with col4:
            if st.button("üòé –õ–µ–≥–∫–æ", use_container_width=True, key="easy"):
                process_answer(True)

def process_answer(correct):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    st.session_state.score['total'] += 1
    if correct:
        st.session_state.score['correct'] += 1
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≥–ª–∞–≥–æ–ª—É
    next_verb()

def next_verb():
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≥–ª–∞–≥–æ–ª—É"""
    import random
    
    st.session_state.current_verb = random.choice(list(DEMO_VERBS.keys()))
    st.session_state.current_pronoun = random.randint(0, 5)
    st.session_state.is_revealed = False
    st.rerun()

def clear_url_params():
    """–û—á–∏—â–∞–µ—Ç URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
    try:
        st.query_params.clear()
    except:
        pass

def clear_oauth_and_reload():
    """–û—á–∏—â–∞–µ—Ç OAuth —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç"""
    st.session_state.oauth_state = None
    clear_url_params()
    st.rerun()

def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    st.session_state.authenticated = False
    st.session_state.user_info = None
    st.session_state.oauth_state = None
    st.session_state.current_verb = None
    st.session_state.score = {'correct': 0, 'total': 0}

if __name__ == "__main__":
    main()
