# main.py - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏

import streamlit as st
import os
import requests
from urllib.parse import urlencode
import base64
import datetime
import time
import random
import math
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass, asdict
from enum import Enum

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤
from localization.translations import (
    get_text, get_grammar_rule, get_available_languages, 
    get_current_language, set_language, t, get_verb_translation
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
st.set_page_config(
    page_title="Spanish Verb Trainer",
    page_icon="üá™üá∏",
    layout="wide",
    initial_sidebar_state="expanded"
)

# OAuth –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
GOOGLE_CLIENT_ID = os.getenv('GOOGLE_CLIENT_ID', '')
GOOGLE_CLIENT_SECRET = os.getenv('GOOGLE_CLIENT_SECRET', '')
REDIRECT_URI = os.getenv('REDIRECT_URI', 'https://spanishverbint-production.up.railway.app')

GOOGLE_AUTH_URL = "https://accounts.google.com/o/oauth2/auth"
GOOGLE_TOKEN_URL = "https://oauth2.googleapis.com/token"
GOOGLE_USERINFO_URL = "https://www.googleapis.com/oauth2/v2/userinfo"

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main > div {
        max-width: 1200px;
        padding-left: 2rem;
        padding-right: 2rem;
    }
    
    .main-content {
        max-width: 600px;
        margin: 0 auto;
        padding: 0 1rem;
    }
    
    .verb-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 3rem 2rem;
        border-radius: 1rem;
        text-align: center;
        margin: 2rem 0;
        box-shadow: 0 12px 40px rgba(102, 126, 234, 0.3);
        transition: all 0.3s ease;
        cursor: pointer;
    }
    
    .verb-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 15px 45px rgba(102, 126, 234, 0.4);
    }
    
    .verb-card.revealed {
        background: linear-gradient(135deg, #48ca8b 0%, #2dd4bf 100%);
        box-shadow: 0 12px 40px rgba(72, 202, 139, 0.3);
    }
    
    .verb-title {
        font-size: 3.5rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }
    
    .verb-translation {
        font-size: 1.4rem;
        opacity: 0.9;
        margin-bottom: 1.5rem;
    }
    
    .pronoun-display {
        font-size: 2.2rem;
        font-weight: bold;
        margin: 1.5rem 0;
        background: rgba(255,255,255,0.2);
        padding: 1rem 2rem;
        border-radius: 0.5rem;
        display: inline-block;
    }
    
    .answer-display {
        font-size: 2.8rem;
        font-weight: bold;
        background: rgba(255,255,255,0.9);
        color: #2d5e3e;
        padding: 1.5rem 2rem;
        border-radius: 0.5rem;
        margin: 1.5rem 0;
        display: inline-block;
    }
    
    .user-panel {
        background: rgba(255,255,255,0.1);
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
        text-align: center;
    }
    
    .click-hint {
        font-size: 1.2rem;
        margin-top: 1rem;
        opacity: 0.8;
        animation: pulse-gentle 2s infinite;
    }
    
    @keyframes pulse-gentle {
        0% { opacity: 0.6; }
        50% { opacity: 1; }
        100% { opacity: 0.6; }
    }
</style>
""", unsafe_allow_html=True)

# –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è SRS
class Difficulty(Enum):
    AGAIN = 0  # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞
    HARD = 1   # –°–ª–æ–∂–Ω–æ
    GOOD = 2   # –•–æ—Ä–æ—à–æ
    EASY = 3   # –õ–µ–≥–∫–æ

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
@dataclass
class Card:
    verb: str
    pronoun_index: int
    tense: str
    easiness_factor: float = 2.5
    interval: int = 1
    repetitions: int = 0
    next_review_date: str = ""
    last_review_date: str = ""
    total_reviews: int = 0
    correct_reviews: int = 0
    
    def __post_init__(self):
        if not self.next_review_date:
            self.next_review_date = datetime.date.today().isoformat()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤
VERBS = {
    'ser': {'type': 'irregular'},
    'estar': {'type': 'irregular'},
    'tener': {'type': 'irregular'},
    'hacer': {'type': 'irregular'},
    'decir': {'type': 'irregular'},
    'ir': {'type': 'irregular'},
    'ver': {'type': 'irregular'},
    'dar': {'type': 'irregular'},
    'saber': {'type': 'irregular'},
    'querer': {'type': 'irregular'},
    'llegar': {'type': 'regular-ar'},
    'pasar': {'type': 'regular-ar'},
    'deber': {'type': 'regular-er'},
    'poner': {'type': 'irregular'},
    'parecer': {'type': 'irregular'},
    'quedar': {'type': 'regular-ar'},
    'creer': {'type': 'regular-er'},
    'hablar': {'type': 'regular-ar'},
    'llevar': {'type': 'regular-ar'},
    'dejar': {'type': 'regular-ar'},
    'seguir': {'type': 'irregular'},
    'encontrar': {'type': 'irregular'},
    'llamar': {'type': 'regular-ar'},
    'venir': {'type': 'irregular'},
    'pensar': {'type': 'irregular'},
    'salir': {'type': 'irregular'},
    'vivir': {'type': 'regular-ir'},
    'sentir': {'type': 'irregular'},
    'trabajar': {'type': 'regular-ar'},
    'estudiar': {'type': 'regular-ar'},
    'comprar': {'type': 'regular-ar'},
    'comer': {'type': 'regular-er'},
    'beber': {'type': 'regular-er'},
    'escribir': {'type': 'regular-ir'},
    'leer': {'type': 'regular-er'},
    'abrir': {'type': 'irregular'},
    'cerrar': {'type': 'irregular'},
    'empezar': {'type': 'irregular'},
    'terminar': {'type': 'regular-ar'},
    'poder': {'type': 'irregular'}
}

PRONOUNS = ['yo', 't√∫', '√©l/ella', 'nosotros', 'vosotros', 'ellos/ellas']

# –°–ø—Ä—è–∂–µ–Ω–∏—è –≥–ª–∞–≥–æ–ª–æ–≤
CONJUGATIONS = {
    'presente': {
        'ser': ['soy', 'eres', 'es', 'somos', 'sois', 'son'],
        'estar': ['estoy', 'est√°s', 'est√°', 'estamos', 'est√°is', 'est√°n'],
        'tener': ['tengo', 'tienes', 'tiene', 'tenemos', 'ten√©is', 'tienen'],
        'hacer': ['hago', 'haces', 'hace', 'hacemos', 'hac√©is', 'hacen'],
        'decir': ['digo', 'dices', 'dice', 'decimos', 'dec√≠s', 'dicen'],
        'ir': ['voy', 'vas', 'va', 'vamos', 'vais', 'van'],
        'ver': ['veo', 'ves', 've', 'vemos', 'veis', 'ven'],
        'dar': ['doy', 'das', 'da', 'damos', 'dais', 'dan'],
        'saber': ['s√©', 'sabes', 'sabe', 'sabemos', 'sab√©is', 'saben'],
        'querer': ['quiero', 'quieres', 'quiere', 'queremos', 'quer√©is', 'quieren'],
        'llegar': ['llego', 'llegas', 'llega', 'llegamos', 'lleg√°is', 'llegan'],
        'pasar': ['paso', 'pasas', 'pasa', 'pasamos', 'pas√°is', 'pasan'],
        'deber': ['debo', 'debes', 'debe', 'debemos', 'deb√©is', 'deben'],
        'poner': ['pongo', 'pones', 'pone', 'ponemos', 'pon√©is', 'ponen'],
        'parecer': ['parezco', 'pareces', 'parece', 'parecemos', 'parec√©is', 'parecen'],
        'quedar': ['quedo', 'quedas', 'queda', 'quedamos', 'qued√°is', 'quedan'],
        'creer': ['creo', 'crees', 'cree', 'creemos', 'cre√©is', 'creen'],
        'hablar': ['hablo', 'hablas', 'habla', 'hablamos', 'habl√°is', 'hablan'],
        'llevar': ['llevo', 'llevas', 'lleva', 'llevamos', 'llev√°is', 'llevan'],
        'dejar': ['dejo', 'dejas', 'deja', 'dejamos', 'dej√°is', 'dejan'],
        'seguir': ['sigo', 'sigues', 'sigue', 'seguimos', 'segu√≠s', 'siguen'],
        'encontrar': ['encuentro', 'encuentras', 'encuentra', 'encontramos', 'encontr√°is', 'encuentran'],
        'llamar': ['llamo', 'llamas', 'llama', 'llamamos', 'llam√°is', 'llaman'],
        'venir': ['vengo', 'vienes', 'viene', 'venimos', 'ven√≠s', 'vienen'],
        'pensar': ['pienso', 'piensas', 'piensa', 'pensamos', 'pens√°is', 'piensan'],
        'salir': ['salgo', 'sales', 'sale', 'salimos', 'sal√≠s', 'salen'],
        'vivir': ['vivo', 'vives', 'vive', 'vivimos', 'viv√≠s', 'viven'],
        'sentir': ['siento', 'sientes', 'siente', 'sentimos', 'sent√≠s', 'sienten'],
        'trabajar': ['trabajo', 'trabajas', 'trabaja', 'trabajamos', 'trabaj√°is', 'trabajan'],
        'estudiar': ['estudio', 'estudias', 'estudia', 'estudiamos', 'estudi√°is', 'estudian'],
        'comprar': ['compro', 'compras', 'compra', 'compramos', 'compr√°is', 'compran'],
        'comer': ['como', 'comes', 'come', 'comemos', 'com√©is', 'comen'],
        'beber': ['bebo', 'bebes', 'bebe', 'bebemos', 'beb√©is', 'beben'],
        'escribir': ['escribo', 'escribes', 'escribe', 'escribimos', 'escrib√≠s', 'escriben'],
        'leer': ['leo', 'lees', 'lee', 'leemos', 'le√©is', 'leen'],
        'abrir': ['abro', 'abres', 'abre', 'abrimos', 'abr√≠s', 'abren'],
        'cerrar': ['cierro', 'cierras', 'cierra', 'cerramos', 'cerr√°is', 'cierran'],
        'empezar': ['empiezo', 'empiezas', 'empieza', 'empezamos', 'empez√°is', 'empiezan'],
        'terminar': ['termino', 'terminas', 'termina', 'terminamos', 'termin√°is', 'terminan'],
        'poder': ['puedo', 'puedes', 'puede', 'podemos', 'pod√©is', 'pueden']
    },
    'indefinido': {
        'ser': ['fui', 'fuiste', 'fue', 'fuimos', 'fuisteis', 'fueron'],
        'estar': ['estuve', 'estuviste', 'estuvo', 'estuvimos', 'estuvisteis', 'estuvieron'],
        'tener': ['tuve', 'tuviste', 'tuvo', 'tuvimos', 'tuvisteis', 'tuvieron'],
        'hacer': ['hice', 'hiciste', 'hizo', 'hicimos', 'hicisteis', 'hicieron'],
        'decir': ['dije', 'dijiste', 'dijo', 'dijimos', 'dijisteis', 'dijeron'],
        'ir': ['fui', 'fuiste', 'fue', 'fuimos', 'fuisteis', 'fueron'],
        'ver': ['vi', 'viste', 'vio', 'vimos', 'visteis', 'vieron'],
        'dar': ['di', 'diste', 'dio', 'dimos', 'disteis', 'dieron'],
        'saber': ['supe', 'supiste', 'supo', 'supimos', 'supisteis', 'supieron'],
        'querer': ['quise', 'quisiste', 'quiso', 'quisimos', 'quisisteis', 'quisieron'],
        'llegar': ['llegu√©', 'llegaste', 'lleg√≥', 'llegamos', 'llegasteis', 'llegaron'],
        'pasar': ['pas√©', 'pasaste', 'pas√≥', 'pasamos', 'pasasteis', 'pasaron'],
        'deber': ['deb√≠', 'debiste', 'debi√≥', 'debimos', 'debisteis', 'debieron'],
        'poner': ['puse', 'pusiste', 'puso', 'pusimos', 'pusisteis', 'pusieron'],
        'parecer': ['parec√≠', 'pareciste', 'pareci√≥', 'parecimos', 'parecisteis', 'parecieron'],
        'quedar': ['qued√©', 'quedaste', 'qued√≥', 'quedamos', 'quedasteis', 'quedaron'],
        'creer': ['cre√≠', 'cre√≠ste', 'crey√≥', 'cre√≠mos', 'cre√≠steis', 'creyeron'],
        'hablar': ['habl√©', 'hablaste', 'habl√≥', 'hablamos', 'hablasteis', 'hablaron'],
        'trabajar': ['trabaj√©', 'trabajaste', 'trabaj√≥', 'trabajamos', 'trabajasteis', 'trabajaron'],
        'estudiar': ['estudi√©', 'estudiaste', 'estudi√≥', 'estudiamos', 'estudiasteis', 'estudiaron'],
        'poder': ['pude', 'pudiste', 'pudo', 'pudimos', 'pudisteis', 'pudieron']
    },
    'subjuntivo': {
        'ser': ['sea', 'seas', 'sea', 'seamos', 'se√°is', 'sean'],
        'estar': ['est√©', 'est√©s', 'est√©', 'estemos', 'est√©is', 'est√©n'],
        'tener': ['tenga', 'tengas', 'tenga', 'tengamos', 'teng√°is', 'tengan'],
        'hacer': ['haga', 'hagas', 'haga', 'hagamos', 'hag√°is', 'hagan'],
        'decir': ['diga', 'digas', 'diga', 'digamos', 'dig√°is', 'digan'],
        'ir': ['vaya', 'vayas', 'vaya', 'vayamos', 'vay√°is', 'vayan'],
        'ver': ['vea', 'veas', 'vea', 'veamos', 've√°is', 'vean'],
        'dar': ['d√©', 'des', 'd√©', 'demos', 'deis', 'den'],
        'saber': ['sepa', 'sepas', 'sepa', 'sepamos', 'sep√°is', 'sepan'],
        'querer': ['quiera', 'quieras', 'quiera', 'queramos', 'quer√°is', 'quieran'],
        'hablar': ['hable', 'hables', 'hable', 'hablemos', 'habl√©is', 'hablen'],
        'trabajar': ['trabaje', 'trabajes', 'trabaje', 'trabajemos', 'trabaj√©is', 'trabajen'],
        'poder': ['pueda', 'puedas', 'pueda', 'podamos', 'pod√°is', 'puedan']
    },
    'imperfecto': {
        'ser': ['era', 'eras', 'era', '√©ramos', 'erais', 'eran'],
        'estar': ['estaba', 'estabas', 'estaba', 'est√°bamos', 'estabais', 'estaban'],
        'tener': ['ten√≠a', 'ten√≠as', 'ten√≠a', 'ten√≠amos', 'ten√≠ais', 'ten√≠an'],
        'hacer': ['hac√≠a', 'hac√≠as', 'hac√≠a', 'hac√≠amos', 'hac√≠ais', 'hac√≠an'],
        'ir': ['iba', 'ibas', 'iba', '√≠bamos', 'ibais', 'iban'],
        'ver': ['ve√≠a', 've√≠as', 've√≠a', 've√≠amos', 've√≠ais', 've√≠an'],
        'hablar': ['hablaba', 'hablabas', 'hablaba', 'habl√°bamos', 'hablabais', 'hablaban'],
        'trabajar': ['trabajaba', 'trabajabas', 'trabajaba', 'trabaj√°bamos', 'trabajabais', 'trabajaban'],
        'vivir': ['viv√≠a', 'viv√≠as', 'viv√≠a', 'viv√≠amos', 'viv√≠ais', 'viv√≠an'],
        'poder': ['pod√≠a', 'pod√≠as', 'pod√≠a', 'pod√≠amos', 'pod√≠ais', 'pod√≠an']
    }
}

# –°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (SRS)
class SRSManager:
    @staticmethod
    def calculate_next_interval(card: Card, difficulty: Difficulty) -> Tuple[int, float]:
        """–ê–ª–≥–æ—Ä–∏—Ç–º SM-2 –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        ef = card.easiness_factor
        interval = card.interval
        repetitions = card.repetitions
        
        if difficulty == Difficulty.AGAIN:
            return 1, max(1.3, ef - 0.2)
        
        if repetitions == 0:
            interval = 1
        elif repetitions == 1:
            interval = 6
        else:
            interval = int(interval * ef)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º easiness factor
        if difficulty == Difficulty.EASY:
            ef = ef + 0.15
        elif difficulty == Difficulty.GOOD:
            ef = ef + 0.1
        elif difficulty == Difficulty.HARD:
            ef = ef - 0.15
        
        ef = max(1.3, min(3.0, ef))
        return interval, ef
    
    @staticmethod
    def update_card(card: Card, difficulty: Difficulty) -> Card:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞"""
        today = datetime.date.today()
        
        card.total_reviews += 1
        if difficulty in [Difficulty.GOOD, Difficulty.EASY]:
            card.correct_reviews += 1
        
        if difficulty == Difficulty.AGAIN:
            card.repetitions = 0
        else:
            card.repetitions += 1
        
        new_interval, new_ef = SRSManager.calculate_next_interval(card, difficulty)
        
        card.interval = new_interval
        card.easiness_factor = new_ef
        card.last_review_date = today.isoformat()
        card.next_review_date = (today + datetime.timedelta(days=new_interval)).isoformat()
        
        return card

def show_language_selector():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä —è–∑—ã–∫–∞ –≤ —Å–∞–π–¥–±–∞—Ä–µ"""
    st.markdown("### " + t('language'))
    
    available_languages = get_available_languages()
    current_language = get_current_language()
    
    # –°–æ–∑–¥–∞–µ–º selectbox –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    selected_language = st.selectbox(
        label="Choose language",
        options=list(available_languages.keys()),
        format_func=lambda x: available_languages[x],
        index=list(available_languages.keys()).index(current_language),
        key="language_selector",
        label_visibility="collapsed"
    )
    
    # –ï—Å–ª–∏ —è–∑—ã–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
    if selected_language != current_language:
        set_language(selected_language)
        st.rerun()

def show_welcome_page():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —è–∑—ã–∫–æ–≤"""
    
    # –°–µ–ª–µ–∫—Ç–æ—Ä —è–∑—ã–∫–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏
    col1, col2, col3 = st.columns([2, 1, 2])
    with col2:
        show_language_selector()
    
    st.markdown(f"""
    <div style="text-align: center; padding: 3rem 0;">
        <h1 style="font-size: 4rem; color: #2d3748; margin-bottom: 1rem;">
            {t('app_title')}
        </h1>
        <h3 style="color: #718096; font-weight: 400; margin-bottom: 3rem;">
            {t('welcome_subtitle')}
        </h3>
    </div>
    """, unsafe_allow_html=True)
    
    # –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown(f"""
        <div style="text-align: center; padding: 2rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 1rem; margin: 1rem 0; height: 200px; display: flex; flex-direction: column; justify-content: center;">
            <h3>{t('smart_repetition')}</h3>
            <p>{t('smart_repetition_desc')}</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div style="text-align: center; padding: 2rem; background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); color: white; border-radius: 1rem; margin: 1rem 0; height: 200px; display: flex; flex-direction: column; justify-content: center;">
            <h3>{t('detailed_stats')}</h3>
            <p>{t('detailed_stats_desc')}</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown(f"""
        <div style="text-align: center; padding: 2rem; background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%); color: white; border-radius: 1rem; margin: 1rem 0; height: 200px; display: flex; flex-direction: column; justify-content: center;">
            <h3>{t('cloud_sync')}</h3>
            <p>{t('cloud_sync_desc')}</p>
        </div>
        """, unsafe_allow_html=True)
    
    # –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞
    st.markdown("<br><br>", unsafe_allow_html=True)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OAuth URL
    state = base64.urlsafe_b64encode(os.urandom(32)).decode('utf-8')
    st.session_state.oauth_state = state
    
    params = {
        'client_id': GOOGLE_CLIENT_ID,
        'redirect_uri': REDIRECT_URI,
        'scope': 'openid email profile',
        'response_type': 'code',
        'state': state,
        'access_type': 'offline',
        'prompt': 'consent'
    }
    
    auth_url = f"{GOOGLE_AUTH_URL}?{urlencode(params)}"
    
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.markdown(f"""
        <div style="text-align: center;">
            <a href="{auth_url}" target="_self" style="text-decoration: none;">
                <button style="
                    background: linear-gradient(135deg, #4285f4, #34a853);
                    color: white;
                    padding: 1rem 3rem;
                    border: none;
                    border-radius: 25px;
                    font-size: 1.2rem;
                    font-weight: bold;
                    cursor: pointer;
                    box-shadow: 0 4px 15px rgba(66, 133, 244, 0.3);
                    transition: all 0.3s ease;
                    width: 100%;
                " onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">
                    {t('login_google')}
                </button>
            </a>
        </div>
        """, unsafe_allow_html=True)

def show_main_app():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —è–∑—ã–∫–æ–≤"""
    reset_daily_stats()
    
    user_info = st.session_state.user_info
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title(t('app_title'))
    st.caption(f"{t('welcome_back')}, {user_info.get('name')}! {t('welcome_subtitle')}")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        show_user_panel()
        show_sidebar_content()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    show_learning_interface()

def show_user_panel():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —è–∑—ã–∫–æ–≤"""
    user_info = st.session_state.user_info
    
    st.markdown(f"""
    <div class="user-panel">
        <strong>üë§ {user_info.get('name')}</strong><br>
        <small>{user_info.get('email')}</small>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button(t('sync'), use_container_width=True):
            save_user_data()
            st.success(t('synced'))
    
    with col2:
        if st.button(t('logout'), use_container_width=True):
            logout()
            st.rerun()

def show_sidebar_content():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —è–∑—ã–∫–æ–≤"""
    
    # –°–µ–ª–µ–∫—Ç–æ—Ä —è–∑—ã–∫–∞
    show_language_selector()
    st.markdown("---")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    st.subheader(t('settings'))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    current_settings = {
        'selected_tenses': st.session_state.settings['selected_tenses'].copy(),
        'new_cards_per_day': st.session_state.settings['new_cards_per_day']
    }
    
    # –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω
    tense_options = {
        'presente': t('presente'),
        'indefinido': t('indefinido'),
        'subjuntivo': t('subjuntivo'),
        'imperfecto': t('imperfecto')
    }
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    new_selected_tenses = []
    for tense_key, tense_name in tense_options.items():
        if st.checkbox(tense_name, value=tense_key in st.session_state.settings['selected_tenses'], key=f"tense_{tense_key}"):
            new_selected_tenses.append(tense_key)
    
    new_selected_tenses = new_selected_tenses or ['presente']
    
    # –õ–∏–º–∏—Ç—ã
    new_cards_per_day = st.slider(
        t('new_cards_per_day'), 1, 50, st.session_state.settings['new_cards_per_day'], key="new_cards_slider"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings_changed = (
        current_settings['selected_tenses'] != new_selected_tenses or
        current_settings['new_cards_per_day'] != new_cards_per_day
    )
    
    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç—å (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å)
    if settings_changed:
        if st.button(t('apply_settings'), key="apply_settings", use_container_width=True, type="primary"):
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            st.session_state.settings['selected_tenses'] = new_selected_tenses
            st.session_state.settings['new_cards_per_day'] = new_cards_per_day
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            st.session_state.current_card = None
            st.session_state.is_revealed = False
            
            st.success(t('settings_applied'))
            st.rerun()
    elif st.session_state.settings['selected_tenses']:
        st.info(t('change_settings_hint'))
    
    st.markdown("---")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    st.subheader(t('stats_today'))
    col1, col2 = st.columns(2)
    with col1:
        st.metric(t('reviews'), st.session_state.daily_stats['reviews_today'])
        st.metric(t('new_cards'), st.session_state.daily_stats['new_cards_today'])
    with col2:
        st.metric(t('correct'), st.session_state.daily_stats['correct_today'])
        due_count = len(get_due_cards())
        st.metric(t('due_cards'), due_count)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_cards = len(st.session_state.cards)
    total_reviews = sum(card.total_reviews for card in st.session_state.cards.values())
    total_correct = sum(card.correct_reviews for card in st.session_state.cards.values())
    accuracy = (total_correct / total_reviews * 100) if total_reviews > 0 else 0
    
    st.subheader(t('stats_total'))
    st.metric(t('total_cards'), total_cards)
    st.metric(t('accuracy'), f"{accuracy:.1f}%")

 def speak_btn(text, size="35px"):
        return f'''
        <button onclick="speak('{text}')" style="
            background: rgba(255,255,255,0.2);
            border: none;
            border-radius: 50%;
            width: {size};
            height: {size};
            margin-left: 8px;
            cursor: pointer;
            color: white;
            vertical-align: middle;
        ">üîä</button>
        '''
    
    if not is_revealed:
        st.markdown(f"""
        <div class="verb-card">
            <div class="verb-title">
                {card.verb} {speak_btn(card.verb, "40px")}
            </div>
            <div class="verb-translation">{verb_translation}</div>
            <div style="font-size: 1.2rem; opacity: 0.8; margin-bottom: 1rem;">
                {t(card.tense)}
            </div>
            <div class="pronoun-display">
                {PRONOUNS[card.pronoun_index]} {speak_btn(PRONOUNS[card.pronoun_index])}
            </div>
            
hint">

                {t('click_to_reveal')}
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2, col3 = st.columns([1, 3, 1])
        with col2:
            if st.button(t('show_answer'), type="primary", use_container_width=True):
                st.session_state.is_revealed = True
                st.rerun()
    else:
        conjugation = CONJUGATIONS[card.tense][card.verb][card.pronoun_index]
        full_phrase = f"{PRONOUNS[card.pronoun_index]} {conjugation}"
        
        st.markdown(f"""
        <div class="verb-card revealed">
            <div class="verb-title">
                {card.verb} {speak_btn(card.verb, "40px")}
            </div>
            <div class="verb-translation">{verb_translation}</div>
            <div style="font-size: 1.2rem; opacity: 0.8; margin-bottom: 1rem;">
                {t(card.tense)}
            </div>
            <div class="pronoun-display">
                {PRONOUNS[card.pronoun_index]} {speak_btn(PRONOUNS[card.pronoun_index])}
            </div>
            <div class="answer-display">
                ‚úì {conjugation} {speak_btn(conjugation)}
                <br>
                <button onclick="speak('{full_phrase}')" style="
                    background: rgba(45, 94, 62, 0.2);
                    border: 1px solid rgba(45, 94, 62, 0.5);
                    border-radius: 20px;
                    padding: 8px 16px;
                    margin-top: 10px;
                    cursor: pointer;
                    color: #2d5e3e;
                    font-size: 0.9rem;
                ">üîä –ü—Ä–æ–∏–∑–Ω–µ—Å—Ç–∏ —Ñ—Ä–∞–∑—É</button>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # –ö–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        st.subheader(t('rate_difficulty'))
        st.caption(t('honest_evaluation'))
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.button(t('again'), key="again", use_container_width=True, help=t('again_help')):
                process_answer(Difficulty.AGAIN)
        
        with col2:
            if st.button(t('hard'), key="hard", use_container_width=True, help=t('hard_help')):
                process_answer(Difficulty.HARD)
        
        with col3:
            if st.button(t('good'), key="good", use_container_width=True, help=t('good_help')):
                process_answer(Difficulty.GOOD)
        
        with col4:
            if st.button(t('easy'), key="easy", use_container_width=True, help=t('easy_help')):
                process_answer(Difficulty.EASY)
    
    # –ü—Ä–∞–≤–∏–ª–∞ —Å–ø—Ä—è–∂–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω
    st.markdown("---")
    st.subheader(t('grammar_rules'))
    
    current_lang = get_current_language()
    for tense in st.session_state.settings['selected_tenses']:
        rule = get_grammar_rule(tense, current_lang)
        with st.expander(f"{rule['title']}", expanded=False):
            st.markdown(rule['content'])
    
    # –°–æ–≤–µ—Ç—ã –ø–æ –∏–∑—É—á–µ–Ω–∏—é - –≤ —Å–∞–º–æ–º –Ω–∏–∑—É
    if st.button(t('study_tips'), key="study_tips", use_container_width=True):
        show_study_tips()

def show_study_tips():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–≤–µ—Ç—ã –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–º—É –∏–∑—É—á–µ–Ω–∏—é —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —è–∑—ã–∫–æ–≤"""
    st.header(t('study_tips'))
    
    with st.expander(t('srs_principles'), expanded=True):
        st.markdown(f"""
        **{t('srs_how_it_works')}**
        - {t('srs_before_forget')}
        - {t('srs_increasing_intervals')}
        - {t('srs_more_frequent')}
        - **{t('honest_self_evaluation')}**
        """)
    
    with st.expander(t('daily_practice')):
        st.markdown(f"""
        **{t('daily_practice_text')}**
        - {t('daily_better')}
        - {t('regularity_important')}
        - {t('same_time_helps')}
        
        **{t('optimal_settings')}**
        - {t('beginners_settings')}
        - {t('advanced_settings')}
        """)

def show_learning_interface():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–∑—É—á–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —è–∑—ã–∫–æ–≤"""
    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    with st.container():
        st.markdown('<div class="main-content">', unsafe_allow_html=True)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        if not st.session_state.current_card:
            st.session_state.current_card = get_next_card()
            st.session_state.is_revealed = False
        
        if not st.session_state.current_card:
            st.success(t('completed_today'))
            st.info(t('come_back_tomorrow'))
            
            if st.button(t('get_new_card')):
                force_new_card()
            st.markdown('</div>', unsafe_allow_html=True)
            return
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        show_verb_card()
        
        st.markdown('</div>', unsafe_allow_html=True)

def handle_oauth_callback(query_params):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç OAuth callback —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —è–∑—ã–∫–æ–≤"""
    st.title(t('processing_auth'))
    
    code = query_params.get('code')
    state = query_params.get('state')
    error = query_params.get('error')
    
    if error:
        st.error(f"‚ùå OAuth Error: {error}")
        if st.button("üîÑ " + t('login_google')):
            clear_oauth_and_reload()
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–¥
    with st.spinner(t('processing_auth')):
        success = process_authorization_code(code)
        
        if success:
            st.success(t('auth_success'))
            time.sleep(1)
            clear_url_params()
            st.rerun()
        else:
            st.error(t('auth_error'))

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init_session_state()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º OAuth callback
    query_params = dict(st.query_params)
    
    if 'code' in query_params and 'state' in query_params:
        handle_oauth_callback(query_params)
    elif st.session_state.authenticated:
        show_main_app()
    else:
        show_welcome_page()

def init_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state"""
    # OAuth —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if 'oauth_state' not in st.session_state:
        st.session_state.oauth_state = None
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False
    if 'user_info' not in st.session_state:
        st.session_state.user_info = None
    
    # –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    if 'interface_language' not in st.session_state:
        st.session_state.interface_language = 'ru'
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if 'cards' not in st.session_state:
        st.session_state.cards = {}
    if 'current_card' not in st.session_state:
        st.session_state.current_card = None
    if 'is_revealed' not in st.session_state:
        st.session_state.is_revealed = False
    if 'daily_stats' not in st.session_state:
        st.session_state.daily_stats = {
            'reviews_today': 0,
            'correct_today': 0,
            'new_cards_today': 0,
            'last_reset': datetime.date.today().isoformat()
        }
    if 'settings' not in st.session_state:
        st.session_state.settings = {
            'new_cards_per_day': 10,
            'review_cards_per_day': 50,
            'selected_tenses': ['presente'],
            'auto_save': True
        }
    if 'recent_combinations' not in st.session_state:
        st.session_state.recent_combinations = []

# –¢–∞–∫–∂–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ:
# process_authorization_code, exchange_code_for_token, get_user_info, etc.

def validate_state_format(state):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç state"""
    try:
        decoded = base64.urlsafe_b64decode(state + '==')
        return len(decoded) == 32 and decoded.count(0) <= 5
    except:
        return False

def process_authorization_code(code):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç authorization code"""
    try:
        token_data = exchange_code_for_token(code)
        if not token_data or 'access_token' not in token_data:
            return False
        
        user_info = get_user_info(token_data['access_token'])
        if not user_info:
            return False
        
        st.session_state.authenticated = True
        st.session_state.user_info = user_info
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        load_user_data()
        
        return True
    except Exception as e:
        st.error(f"‚ùå {t('auth_error')}: {e}")
        return False

def exchange_code_for_token(code):
    """–û–±–º–µ–Ω–∏–≤–∞–µ—Ç –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω"""
    data = {
        'client_id': GOOGLE_CLIENT_ID,
        'client_secret': GOOGLE_CLIENT_SECRET,
        'code': code,
        'grant_type': 'authorization_code',
        'redirect_uri': REDIRECT_URI,
    }
    
    response = requests.post(GOOGLE_TOKEN_URL, data=data, timeout=10)
    return response.json() if response.status_code == 200 else None

def get_user_info(access_token):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    headers = {'Authorization': f'Bearer {access_token}'}
    response = requests.get(GOOGLE_USERINFO_URL, headers=headers, timeout=10)
    return response.json() if response.status_code == 200 else None

def load_user_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)"""
    # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ Firebase/Supabase
    pass

def save_user_data():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)"""
    # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Firebase/Supabase
    pass

def get_card_key(verb: str, pronoun_index: int, tense: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏"""
    return f"{verb}_{pronoun_index}_{tense}"

def get_or_create_card(verb: str, pronoun_index: int, tense: str) -> Card:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É"""
    key = get_card_key(verb, pronoun_index, tense)
    
    if key not in st.session_state.cards:
        st.session_state.cards[key] = Card(
            verb=verb,
            pronoun_index=pronoun_index,
            tense=tense
        )
    
    return st.session_state.cards[key]

def get_due_cards() -> List[Card]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    today = datetime.date.today().isoformat()
    
    due_cards = []
    for card in st.session_state.cards.values():
        if (card.next_review_date <= today and 
            card.tense in st.session_state.settings['selected_tenses']):
            due_cards.append(card)
    
    return sorted(due_cards, key=lambda x: x.next_review_date)

def get_new_cards() -> List[Tuple[str, int, str]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏"""
    new_cards = []
    existing_keys = set(st.session_state.cards.keys())
    
    for tense in st.session_state.settings['selected_tenses']:
        if tense not in CONJUGATIONS:
            continue
            
        for verb in CONJUGATIONS[tense]:
            if verb not in VERBS:
                continue
                
            for pronoun_index in range(6):
                key = get_card_key(verb, pronoun_index, tense)
                if key not in existing_keys:
                    new_cards.append((verb, pronoun_index, tense))
    
    random.shuffle(new_cards)
    return new_cards

def get_next_card() -> Optional[Card]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É"""
    # –°–Ω–∞—á–∞–ª–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    due_cards = get_due_cards()
    if due_cards:
        return due_cards[0]
    
    # –ó–∞—Ç–µ–º –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    if st.session_state.daily_stats['new_cards_today'] < st.session_state.settings['new_cards_per_day']:
        new_cards = get_new_cards()
        if new_cards:
            verb, pronoun_index, tense = new_cards[0]
            return get_or_create_card(verb, pronoun_index, tense)
    
    return None

def process_answer(difficulty: Difficulty):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not st.session_state.current_card:
        return
    
    is_new_card = st.session_state.current_card.total_reviews == 0
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å –ø–æ–º–æ—â—å—é SRS
    updated_card = SRSManager.update_card(st.session_state.current_card, difficulty)
    card_key = get_card_key(updated_card.verb, updated_card.pronoun_index, updated_card.tense)
    st.session_state.cards[card_key] = updated_card
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    st.session_state.daily_stats['reviews_today'] += 1
    if difficulty in [Difficulty.GOOD, Difficulty.EASY]:
        st.session_state.daily_stats['correct_today'] += 1
    if is_new_card:
        st.session_state.daily_stats['new_cards_today'] += 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    save_user_data()
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ
    next_card()

def next_card():
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ"""
    st.session_state.current_card = None
    st.session_state.is_revealed = False
    st.rerun()

def force_new_card():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É"""
    new_cards = get_new_cards()
    if new_cards:
        verb, pronoun_index, tense = random.choice(new_cards)
        st.session_state.current_card = get_or_create_card(verb, pronoun_index, tense)
        st.session_state.is_revealed = False
        st.rerun()

def reset_daily_stats():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    today = datetime.date.today().isoformat()
    if st.session_state.daily_stats['last_reset'] != today:
        st.session_state.daily_stats.update({
            'reviews_today': 0,
            'correct_today': 0,
            'new_cards_today': 0,
            'last_reset': today
        })

def clear_url_params():
    """–û—á–∏—â–∞–µ—Ç URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
    try:
        st.query_params.clear()
    except:
        pass

def clear_oauth_and_reload():
    """–û—á–∏—â–∞–µ—Ç OAuth –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç"""
    st.session_state.oauth_state = None
    clear_url_params()
    st.rerun()

def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    st.session_state.authenticated = False
    st.session_state.user_info = None
    st.session_state.oauth_state = None
    st.session_state.cards = {}
    st.session_state.current_card = None
    st.session_state.daily_stats = {
        'reviews_today': 0,
        'correct_today': 0,
        'new_cards_today': 0,
        'last_reset': datetime.date.today().isoformat()
    }

if __name__ == "__main__":
    main()
