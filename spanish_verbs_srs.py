import streamlit as st
import random
import time
import json
import datetime
import math
import pandas as pd
import hashlib
import base64
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass, asdict
from enum import Enum
import requests
from urllib.parse import urlencode
import os

# –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å plotly, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
try:
    import plotly.express as px
    import plotly.graph_objects as go
    PLOTLY_AVAILABLE = True
except ImportError:
    PLOTLY_AVAILABLE = False

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üá™üá∏ –¢—Ä–µ–Ω–∞–∂–µ—Ä –∏—Å–ø–∞–Ω—Å–∫–∏—Ö –≥–ª–∞–≥–æ–ª–æ–≤ —Å Google Auth",
    page_icon="üá™üá∏",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Google OAuth –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
GOOGLE_CLIENT_ID = os.getenv('GOOGLE_CLIENT_ID', '')
GOOGLE_CLIENT_SECRET = os.getenv('GOOGLE_CLIENT_SECRET', '')
REDIRECT_URI = os.getenv('REDIRECT_URI', 'https://spanishverbint-production.up.railway.app/auth/callback')
GOOGLE_AUTH_URL = "https://accounts.google.com/o/oauth2/auth"
GOOGLE_TOKEN_URL = "https://oauth2.googleapis.com/token"
GOOGLE_USERINFO_URL = "https://www.googleapis.com/oauth2/v2/userinfo"

# CSS —Å—Ç–∏–ª–∏ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–ª—è OAuth)
st.markdown("""
<style>
    .card-container {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 2rem;
        border-radius: 1rem;
        text-align: center;
        margin: 1rem 0;
        box-shadow: 0 8px 30px rgba(0,0,0,0.1);
    }
    
    .verb-title {
        font-size: 3rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }
    
    .verb-translation {
        font-size: 1.4rem;
        opacity: 0.9;
        margin-bottom: 1.5rem;
    }
    
    .pronoun-display {
        font-size: 2rem;
        font-weight: bold;
        margin: 1.5rem 0;
        background: rgba(255,255,255,0.2);
        padding: 0.8rem 1.5rem;
        border-radius: 0.5rem;
        display: inline-block;
    }
    
    .answer-display {
        font-size: 2.5rem;
        font-weight: bold;
        background: rgba(255,255,255,0.9);
        color: #2d5e3e;
        padding: 1.5rem;
        border-radius: 0.5rem;
        margin: 1.5rem 0;
    }
    
    .auth-container {
        background: linear-gradient(135deg, #4285f4 0%, #34a853 100%);
        color: white;
        padding: 3rem 2rem;
        border-radius: 1rem;
        text-align: center;
        margin: 2rem 0;
        box-shadow: 0 12px 40px rgba(66, 133, 244, 0.3);
    }
    
    .auth-title {
        font-size: 2.5rem;
        font-weight: bold;
        margin-bottom: 1rem;
    }
    
    .auth-subtitle {
        font-size: 1.2rem;
        opacity: 0.9;
        margin-bottom: 2rem;
    }
    
    .google-btn {
        background: white !important;
        color: #333 !important;
        border: none !important;
        padding: 0.8rem 2rem !important;
        border-radius: 50px !important;
        font-weight: bold !important;
        font-size: 1.1rem !important;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1) !important;
        transition: all 0.3s ease !important;
    }
    
    .google-btn:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 6px 20px rgba(0,0,0,0.15) !important;
    }
    
    .user-info {
        background: rgba(255,255,255,0.1);
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
        text-align: center;
    }
    
    .sync-status {
        background: rgba(52, 168, 83, 0.1);
        border: 1px solid rgba(52, 168, 83, 0.3);
        color: #34a853;
        padding: 0.5rem 1rem;
        border-radius: 0.5rem;
        font-size: 0.9rem;
        text-align: center;
        margin: 0.5rem 0;
    }
    
    .offline-warning {
        background: rgba(234, 67, 53, 0.1);
        border: 1px solid rgba(234, 67, 53, 0.3);
        color: #ea4335;
        padding: 0.5rem 1rem;
        border-radius: 0.5rem;
        font-size: 0.9rem;
        text-align: center;
        margin: 0.5rem 0;
    }
    
    /* –ü—Ä–æ—á–∏–µ —Å—Ç–∏–ª–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ */
    .metric-card {
        background: white;
        padding: 1rem;
        border-radius: 0.5rem;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        text-align: center;
    }
    
    [data-testid="collapsedControl"] {
        background: linear-gradient(135deg, #667eea, #764ba2) !important;
        color: white !important;
        border-radius: 50% !important;
        font-weight: bold !important;
        font-size: 1.8rem !important;
        width: 4rem !important;
        height: 4rem !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        border: 4px solid #ffffff !important;
        box-shadow: 0 6px 25px rgba(102, 126, 234, 0.5) !important;
        position: fixed !important;
        z-index: 999 !important;
        animation: pulse 2s infinite !important;
    }
    
    [data-testid="collapsedControl"]:hover {
        background: linear-gradient(135deg, #5a67d8, #6b46c1) !important;
        transform: scale(1.15) !important;
        box-shadow: 0 8px 30px rgba(102, 126, 234, 0.7) !important;
        animation: none !important;
    }
    
    @keyframes pulse {
        0% { box-shadow: 0 6px 25px rgba(102, 126, 234, 0.5); }
        50% { box-shadow: 0 6px 25px rgba(102, 126, 234, 0.8); }
        100% { box-shadow: 0 6px 25px rgba(102, 126, 234, 0.5); }
    }
    
    .stTabs [data-baseweb="tab-list"] {
        gap: 0.5rem;
    }
    
    .stTabs [data-baseweb="tab"] {
        height: 3rem;
        padding: 0.5rem 2rem;
        font-size: 1.2rem;
        font-weight: bold;
        border-radius: 25px;
        border: 2px solid #e2e8f0;
        background: white;
        color: #4a5568;
    }
    
    .stTabs [aria-selected="true"] {
        background: linear-gradient(135deg, #667eea, #764ba2) !important;
        color: white !important;
        border-color: #667eea !important;
    }
    
    .main-content {
        max-width: 600px;
        margin: 0 auto;
        padding: 0 1rem;
    }
    
    .reset-btn {
        background: #f7fafc !important;
        color: #718096 !important;
        border: 1px solid #e2e8f0 !important;
        padding: 0.5rem 1rem !important;
        border-radius: 15px !important;
        font-size: 0.85rem !important;
        margin-top: 2rem !important;
    }
</style>
""", unsafe_allow_html=True)

# –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
class Difficulty(Enum):
    AGAIN = 0  # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞
    HARD = 1   # –°–ª–æ–∂–Ω–æ
    GOOD = 2   # –•–æ—Ä–æ—à–æ
    EASY = 3   # –õ–µ–≥–∫–æ

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
@dataclass
class Card:
    verb: str
    pronoun_index: int
    tense: str
    easiness_factor: float = 2.5  # –ù–∞—á–∞–ª—å–Ω–∞—è –ª–µ–≥–∫–æ—Å—Ç—å
    interval: int = 1             # –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ –¥–Ω—è—Ö
    repetitions: int = 0          # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    next_review_date: str = ""    # –î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    last_review_date: str = ""    # –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    total_reviews: int = 0        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    correct_reviews: int = 0      # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    
    def __post_init__(self):
        if not self.next_review_date:
            self.next_review_date = datetime.date.today().isoformat()

# Google OAuth –∫–ª–∞—Å—Å
class GoogleAuth:
    @staticmethod
    def get_auth_url() -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º state –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        state = base64.urlsafe_b64encode(os.urandom(32)).decode('utf-8')
        st.session_state.oauth_state = state
        
        params = {
            'client_id': GOOGLE_CLIENT_ID,
            'redirect_uri': REDIRECT_URI,
            'scope': 'openid email profile',
            'response_type': 'code',
            'state': state,
            'access_type': 'offline',
            'prompt': 'consent'
        }
        
        return f"{GOOGLE_AUTH_URL}?{urlencode(params)}"
    
    @staticmethod
    def exchange_code_for_token(code: str) -> Optional[Dict]:
        """–û–±–º–µ–Ω–∏–≤–∞–µ—Ç authorization code –Ω–∞ access token"""
        data = {
            'client_id': GOOGLE_CLIENT_ID,
            'client_secret': GOOGLE_CLIENT_SECRET,
            'code': code,
            'grant_type': 'authorization_code',
            'redirect_uri': REDIRECT_URI,
        }
        
        try:
            response = requests.post(GOOGLE_TOKEN_URL, data=data)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            return None
    
    @staticmethod
    def get_user_info(access_token: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        headers = {'Authorization': f'Bearer {access_token}'}
        
        try:
            response = requests.get(GOOGLE_USERINFO_URL, headers=headers)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
            return None

# –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å Google Auth
class DataManager:
    @staticmethod
    def get_user_data_key(user_id: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return f"spanish_verbs_user_{hashlib.md5(user_id.encode()).hexdigest()}"
    
    @staticmethod
    def save_user_data(user_id: str, data: Dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –í production –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            # –ü–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state —Å user_id
            key = DataManager.get_user_data_key(user_id)
            st.session_state[f"{key}_data"] = {
                'cards': data.get('cards', {}),
                'daily_stats': data.get('daily_stats', {}),
                'settings': data.get('settings', {}),
                'last_sync': datetime.datetime.now().isoformat()
            }
            return True
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    @staticmethod
    def load_user_data(user_id: str) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            key = DataManager.get_user_data_key(user_id)
            return st.session_state.get(f"{key}_data")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    @staticmethod
    def sync_with_cloud(user_id: str) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –æ–±–ª–∞–∫–æ–º (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ API)"""
        # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Firebase/Supabase
        return True

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ–º–∏ –∂–µ...
# (SRSManager, VERBS, PRONOUNS, CONJUGATIONS, etc.)

# –î–∞–Ω–Ω—ã–µ –≥–ª–∞–≥–æ–ª–æ–≤
VERBS = {
    'ser': {'translation': '–±—ã—Ç—å, —è–≤–ª—è—Ç—å—Å—è', 'type': 'irregular'},
    'estar': {'translation': '–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è, –±—ã—Ç—å', 'type': 'irregular'},
    'tener': {'translation': '–∏–º–µ—Ç—å', 'type': 'irregular'},
    'hacer': {'translation': '–¥–µ–ª–∞—Ç—å', 'type': 'irregular'},
    'decir': {'translation': '–≥–æ–≤–æ—Ä–∏—Ç—å, —Å–∫–∞–∑–∞—Ç—å', 'type': 'irregular'},
    'ir': {'translation': '–∏–¥—Ç–∏, –µ—Ö–∞—Ç—å', 'type': 'irregular'},
    'ver': {'translation': '–≤–∏–¥–µ—Ç—å', 'type': 'irregular'},
    'dar': {'translation': '–¥–∞–≤–∞—Ç—å', 'type': 'irregular'},
    'saber': {'translation': '–∑–Ω–∞—Ç—å', 'type': 'irregular'},
    'querer': {'translation': '—Ö–æ—Ç–µ—Ç—å, –ª—é–±–∏—Ç—å', 'type': 'irregular'},
    'llegar': {'translation': '–ø—Ä–∏–±—ã–≤–∞—Ç—å, –ø—Ä–∏—Ö–æ–¥–∏—Ç—å', 'type': 'regular-ar'},
    'pasar': {'translation': '–ø—Ä–æ—Ö–æ–¥–∏—Ç—å, –ø—Ä–æ–≤–æ–¥–∏—Ç—å', 'type': 'regular-ar'},
    'deber': {'translation': '–±—ã—Ç—å –¥–æ–ª–∂–Ω—ã–º', 'type': 'regular-er'},
    'poner': {'translation': '–∫–ª–∞—Å—Ç—å, —Å—Ç–∞–≤–∏—Ç—å', 'type': 'irregular'},
    'parecer': {'translation': '–∫–∞–∑–∞—Ç—å—Å—è', 'type': 'irregular'},
    'quedar': {'translation': '–æ—Å—Ç–∞–≤–∞—Ç—å—Å—è', 'type': 'regular-ar'},
    'creer': {'translation': '–≤–µ—Ä–∏—Ç—å, —Å—á–∏—Ç–∞—Ç—å', 'type': 'regular-er'},
    'hablar': {'translation': '–≥–æ–≤–æ—Ä–∏—Ç—å', 'type': 'regular-ar'},
    'llevar': {'translation': '–Ω–æ—Å–∏—Ç—å, –Ω–µ—Å—Ç–∏', 'type': 'regular-ar'},
    'dejar': {'translation': '–æ—Å—Ç–∞–≤–ª—è—Ç—å', 'type': 'regular-ar'},
    'seguir': {'translation': '—Å–ª–µ–¥–æ–≤–∞—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å', 'type': 'irregular'},
    'encontrar': {'translation': '–Ω–∞—Ö–æ–¥–∏—Ç—å, –≤—Å—Ç—Ä–µ—á–∞—Ç—å', 'type': 'irregular'},
    'llamar': {'translation': '–∑–≤–∞—Ç—å, –Ω–∞–∑—ã–≤–∞—Ç—å', 'type': 'regular-ar'},
    'venir': {'translation': '–ø—Ä–∏—Ö–æ–¥–∏—Ç—å', 'type': 'irregular'},
    'pensar': {'translation': '–¥—É–º–∞—Ç—å', 'type': 'irregular'},
    'salir': {'translation': '–≤—ã—Ö–æ–¥–∏—Ç—å', 'type': 'irregular'},
    'vivir': {'translation': '–∂–∏—Ç—å', 'type': 'regular-ir'},
    'sentir': {'translation': '—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å', 'type': 'irregular'},
    'trabajar': {'translation': '—Ä–∞–±–æ—Ç–∞—Ç—å', 'type': 'regular-ar'},
    'estudiar': {'translation': '–∏–∑—É—á–∞—Ç—å', 'type': 'regular-ar'}
}

PRONOUNS = ['yo', 't√∫', '√©l/ella', 'nosotros', 'vosotros', 'ellos/ellas']

CONJUGATIONS = {
    'presente': {
        'ser': ['soy', 'eres', 'es', 'somos', 'sois', 'son'],
        'estar': ['estoy', 'est√°s', 'est√°', 'estamos', 'est√°is', 'est√°n'],
        'tener': ['tengo', 'tienes', 'tiene', 'tenemos', 'ten√©is', 'tienen'],
        'hacer': ['hago', 'haces', 'hace', 'hacemos', 'hac√©is', 'hacen'],
        'decir': ['digo', 'dices', 'dice', 'decimos', 'dec√≠s', 'dicen'],
        'ir': ['voy', 'vas', 'va', 'vamos', 'vais', 'van'],
        'ver': ['veo', 'ves', 've', 'vemos', 'veis', 'ven'],
        'dar': ['doy', 'das', 'da', 'damos', 'dais', 'dan'],
        'saber': ['s√©', 'sabes', 'sabe', 'sabemos', 'sab√©is', 'saben'],
        'querer': ['quiero', 'quieres', 'quiere', 'queremos', 'quer√©is', 'quieren'],
        'hablar': ['hablo', 'hablas', 'habla', 'hablamos', 'habl√°is', 'hablan'],
        'vivir': ['vivo', 'vives', 'vive', 'vivimos', 'viv√≠s', 'viven'],
        'trabajar': ['trabajo', 'trabajas', 'trabaja', 'trabajamos', 'trabaj√°is', 'trabajan'],
        'estudiar': ['estudio', 'estudias', 'estudia', 'estudiamos', 'estudi√°is', 'estudian']
    }
    # –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

class SRSManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    
    @staticmethod
    def calculate_next_interval(card: Card, difficulty: Difficulty) -> Tuple[int, float]:
        """
        –ê–ª–≥–æ—Ä–∏—Ç–º SM-2 –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–Ω–æ–≤—ã–π_–∏–Ω—Ç–µ—Ä–≤–∞–ª, –Ω–æ–≤—ã–π_easiness_factor)
        """
        ef = card.easiness_factor
        interval = card.interval
        repetitions = card.repetitions
        
        if difficulty == Difficulty.AGAIN:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
            return 1, max(1.3, ef - 0.2)
        
        if repetitions == 0:
            interval = 1
        elif repetitions == 1:
            interval = 6
        else:
            interval = int(interval * ef)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º easiness factor –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        if difficulty == Difficulty.EASY:
            ef = ef + 0.15
        elif difficulty == Difficulty.GOOD:
            ef = ef + 0.1
        elif difficulty == Difficulty.HARD:
            ef = ef - 0.15
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º easiness factor
        ef = max(1.3, min(3.0, ef))
        
        return interval, ef
    
    @staticmethod
    def update_card(card: Card, difficulty: Difficulty) -> Card:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞"""
        today = datetime.date.today()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        card.total_reviews += 1
        if difficulty in [Difficulty.GOOD, Difficulty.EASY]:
            card.correct_reviews += 1
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if difficulty == Difficulty.AGAIN:
            card.repetitions = 0
        else:
            card.repetitions += 1
        
        new_interval, new_ef = SRSManager.calculate_next_interval(card, difficulty)
        
        card.interval = new_interval
        card.easiness_factor = new_ef
        card.last_review_date = today.isoformat()
        card.next_review_date = (today + datetime.timedelta(days=new_interval)).isoformat()
        
        return card

def init_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    if 'initialized' not in st.session_state:
        st.session_state.initialized = True
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False
    
    if 'user_info' not in st.session_state:
        st.session_state.user_info = None
    
    if 'access_token' not in st.session_state:
        st.session_state.access_token = None
    
    if 'oauth_state' not in st.session_state:
        st.session_state.oauth_state = None
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if 'cards' not in st.session_state:
        st.session_state.cards = {}
    
    if 'current_card' not in st.session_state:
        st.session_state.current_card = None
    
    if 'is_revealed' not in st.session_state:
        st.session_state.is_revealed = False
    
    if 'daily_stats' not in st.session_state:
        st.session_state.daily_stats = {
            'reviews_today': 0,
            'correct_today': 0,
            'new_cards_today': 0,
            'last_reset': datetime.date.today().isoformat()
        }
    
    if 'settings' not in st.session_state:
        st.session_state.settings = {
            'new_cards_per_day': 10,
            'review_cards_per_day': 50,
            'selected_tenses': ['presente'],
            'auto_save': True
        }
    
    if 'last_sync' not in st.session_state:
        st.session_state.last_sync = None

def handle_oauth_callback():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –æ—Ç Google OAuth"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
    query_params = st.experimental_get_query_params()
    
    if 'code' in query_params and 'state' in query_params:
        code = query_params['code'][0]
        state = query_params['state'][0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º state –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if state != st.session_state.get('oauth_state'):
            st.error("–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –Ω–µ–≤–µ—Ä–Ω—ã–π state parameter")
            return False
        
        # –û–±–º–µ–Ω–∏–≤–∞–µ–º code –Ω–∞ —Ç–æ–∫–µ–Ω
        token_response = GoogleAuth.exchange_code_for_token(code)
        if not token_response:
            return False
        
        access_token = token_response.get('access_token')
        if not access_token:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access token")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = GoogleAuth.get_user_info(access_token)
        if not user_info:
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ session state
        st.session_state.authenticated = True
        st.session_state.user_info = user_info
        st.session_state.access_token = access_token
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        load_user_data()
        
        # –û—á–∏—â–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã URL
        st.experimental_set_query_params()
        
        return True
    
    return False

def load_user_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
    if not st.session_state.authenticated or not st.session_state.user_info:
        return
    
    user_id = st.session_state.user_info['id']
    user_data = DataManager.load_user_data(user_id)
    
    if user_data:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.session_state.cards = user_data.get('cards', {})
        st.session_state.daily_stats = user_data.get('daily_stats', st.session_state.daily_stats)
        st.session_state.settings = user_data.get('settings', st.session_state.settings)
        st.session_state.last_sync = user_data.get('last_sync')
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ Card –æ–±—ä–µ–∫—Ç—ã
        cards_objects = {}
        for key, card_data in st.session_state.cards.items():
            if isinstance(card_data, dict):
                cards_objects[key] = Card(**card_data)
            else:
                cards_objects[key] = card_data
        st.session_state.cards = cards_objects

def save_user_data():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not st.session_state.authenticated or not st.session_state.user_info:
        return False
    
    user_id = st.session_state.user_info['id']
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Card –æ–±—ä–µ–∫—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    cards_data = {}
    for key, card in st.session_state.cards.items():
        if isinstance(card, Card):
            cards_data[key] = asdict(card)
        else:
            cards_data[key] = card
    
    data = {
        'cards': cards_data,
        'daily_stats': st.session_state.daily_stats,
        'settings': st.session_state.settings
    }
    
    success = DataManager.save_user_data(user_id, data)
    if success:
        st.session_state.last_sync = datetime.datetime.now().isoformat()
    
    return success

def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    st.session_state.authenticated = False
    st.session_state.user_info = None
    st.session_state.access_token = None
    st.session_state.last_sync = None
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.session_state.cards = {}
    st.session_state.current_card = None
    st.session_state.is_revealed = False
    st.session_state.daily_stats = {
        'reviews_today': 0,
        'correct_today': 0,
        'new_cards_today': 0,
        'last_reset': datetime.date.today().isoformat()
    }

def show_auth_page():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    st.markdown("""
    <div class="auth-container">
        <div class="auth-title">üá™üá∏ –¢—Ä–µ–Ω–∞–∂–µ—Ä –∏—Å–ø–∞–Ω—Å–∫–∏—Ö –≥–ª–∞–≥–æ–ª–æ–≤</div>
        <div class="auth-subtitle">
            –í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Google, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        if not GOOGLE_CLIENT_ID or not GOOGLE_CLIENT_SECRET:
            st.error("‚ö†Ô∏è Google OAuth –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
            st.code("""
            –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
            - GOOGLE_CLIENT_ID
            - GOOGLE_CLIENT_SECRET  
            - REDIRECT_URI
            """)
            return
        
        auth_url = GoogleAuth.get_auth_url()
        
        st.markdown(f"""
        <div style="text-align: center; margin: 2rem 0;">
            <a href="{auth_url}" target="_self">
                <button class="google-btn">
                    üîê –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google
                </button>
            </a>
        </div>
        """, unsafe_allow_html=True)
        
        with st.expander("üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"):
            st.markdown("""
            **–ß—Ç–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ –≤–∞—à–µ–≥–æ Google –∞–∫–∫–∞—É–Ω—Ç–∞:**
            - –ò–º—è –∏ email –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            - –ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            
            **–ß—Ç–æ –º—ã –ù–ï –¥–µ–ª–∞–µ–º:**
            - –ù–µ –ø–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ Gmail –∏–ª–∏ Google Drive
            - –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º  
            - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã
            
            **–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:**
            - –ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –¥–∞–Ω–Ω—ã—Ö
            - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç
            """)
        
        with st.expander("‚ú® –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"):
            st.markdown("""
            **üåê –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏**
            - –ò–∑—É—á–∞–π—Ç–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ, –∫–æ–º–ø—å—é—Ç–µ—Ä–µ, –ø–ª–∞–Ω—à–µ—Ç–µ
            - –ü—Ä–æ–≥—Ä–µ—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è
            
            **üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**
            - –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            - –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑—É—á–µ–Ω–∏—è
            - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            
            **üéØ –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ**
            - –£–º–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–±–æ—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
            - –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
            - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–∑—É—á–µ–Ω–∏—è
            
            **üíæ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ**
            - –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å
            - –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ–±–ª–∞–∫–µ
            - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            """)

def show_user_panel():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∞–π–¥–±–∞—Ä–µ"""
    if not st.session_state.authenticated:
        return
    
    user_info = st.session_state.user_info
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    st.markdown(f"""
    <div class="user-info">
        <strong>üë§ {user_info.get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}</strong><br>
        <small>{user_info.get('email', '')}</small>
    </div>
    """, unsafe_allow_html=True)
    
    # –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    if st.session_state.last_sync:
        sync_time = datetime.datetime.fromisoformat(st.session_state.last_sync)
        time_diff = datetime.datetime.now() - sync_time
        
        if time_diff.total_seconds() < 300:  # –ú–µ–Ω—å—à–µ 5 –º–∏–Ω—É—Ç
            st.markdown('<div class="sync-status">‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ</div>', unsafe_allow_html=True)
        else:
            st.markdown('<div class="offline-warning">‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è</div>', unsafe_allow_html=True)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", key="sync_data", use_container_width=True):
            if save_user_data():
                st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
                st.rerun()
            else:
                st.error("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
    
    with col2:
        if st.button("üö™ –í—ã–π—Ç–∏", key="logout", use_container_width=True):
            logout()
            st.rerun()

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ–º–∏ –∂–µ (get_card_key, get_or_create_card, etc.)
def get_card_key(verb: str, pronoun_index: int, tense: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏"""
    return f"{verb}_{pronoun_index}_{tense}"

def get_or_create_card(verb: str, pronoun_index: int, tense: str) -> Card:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é"""
    key = get_card_key(verb, pronoun_index, tense)
    
    if key not in st.session_state.cards:
        st.session_state.cards[key] = Card(
            verb=verb,
            pronoun_index=pronoun_index,
            tense=tense
        )
    
    return st.session_state.cards[key]

def get_due_cards() -> List[Card]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    today = datetime.date.today().isoformat()
    
    due_cards = []
    for card in st.session_state.cards.values():
        if (card.next_review_date <= today and 
            card.tense in st.session_state.settings['selected_tenses']):
            due_cards.append(card)
    
    return sorted(due_cards, key=lambda x: x.next_review_date)

def get_new_cards() -> List[Tuple[str, int, str]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è"""
    new_cards = []
    existing_keys = set(st.session_state.cards.keys())
    
    for tense in st.session_state.settings['selected_tenses']:
        if tense not in CONJUGATIONS:
            continue
            
        for verb in CONJUGATIONS[tense]:
            if verb not in VERBS:
                continue
                
            for pronoun_index in range(6):
                key = get_card_key(verb, pronoun_index, tense)
                if key not in existing_keys:
                    new_cards.append((verb, pronoun_index, tense))
    
    random.shuffle(new_cards)
    return new_cards

def get_next_card() -> Optional[Card]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    due_cards = get_due_cards()
    if due_cards and len(due_cards) > 0:
        return due_cards[0]
    
    # –ó–∞—Ç–µ–º –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    if st.session_state.daily_stats['new_cards_today'] < st.session_state.settings['new_cards_per_day']:
        new_cards = get_new_cards()
        if new_cards:
            verb, pronoun_index, tense = new_cards[0]
            return get_or_create_card(verb, pronoun_index, tense)
    
    return None

def process_answer(difficulty: Difficulty):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not st.session_state.current_card:
        return
    
    # –û—Ç–º–µ—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–∫ –Ω–æ–≤—É—é –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑
    is_new_card = st.session_state.current_card.total_reviews == 0
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    updated_card = SRSManager.update_card(st.session_state.current_card, difficulty)
    card_key = get_card_key(
        updated_card.verb, 
        updated_card.pronoun_index, 
        updated_card.tense
    )
    st.session_state.cards[card_key] = updated_card
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    st.session_state.daily_stats['reviews_today'] += 1
    if difficulty in [Difficulty.GOOD, Difficulty.EASY]:
        st.session_state.daily_stats['correct_today'] += 1
    if is_new_card:
        st.session_state.daily_stats['new_cards_today'] += 1
    
    # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    if st.session_state.settings.get('auto_save', True) and st.session_state.authenticated:
        save_user_data()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    st.session_state.current_card = None
    st.session_state.is_revealed = False

# –ó–ê–ú–ï–ù–ò–¢–ï –í–ê–®–£ –§–£–ù–ö–¶–ò–Æ main() –ü–û–õ–ù–û–°–¢–¨–Æ –ù–ê –≠–¢–£:

def main():
    init_session_state()
    
    # –û–¢–õ–ê–î–ö–ê: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
    query_params = st.experimental_get_query_params()
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
    if query_params:
        st.write("üîç **–û—Ç–ª–∞–¥–∫–∞ - –ø–æ–ª—É—á–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**")
        st.write(query_params)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ code
        if 'code' in query_params:
            st.write("‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!")
            
            try:
                code = query_params['code'][0]
                state = query_params.get('state', [''])[0]
                
                st.write(f"üìù Code: {code[:20]}...")
                st.write(f"üìù State: {state[:20]}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                st.write("üîß **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:**")
                st.write(f"CLIENT_ID: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if GOOGLE_CLIENT_ID else '‚ùå –ù–ï –ù–ê–°–¢–†–û–ï–ù'}")
                st.write(f"CLIENT_SECRET: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if GOOGLE_CLIENT_SECRET else '‚ùå –ù–ï –ù–ê–°–¢–†–û–ï–ù'}")
                st.write(f"REDIRECT_URI: {REDIRECT_URI}")
                
                if st.button("üîÑ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"):
                    with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é..."):
                        # –û–±–º–µ–Ω–∏–≤–∞–µ–º code –Ω–∞ —Ç–æ–∫–µ–Ω
                        st.write("1Ô∏è‚É£ –û–±–º–µ–Ω–∏–≤–∞–µ–º code –Ω–∞ —Ç–æ–∫–µ–Ω...")
                        
                        data = {
                            'client_id': GOOGLE_CLIENT_ID,
                            'client_secret': GOOGLE_CLIENT_SECRET,
                            'code': code,
                            'grant_type': 'authorization_code',
                            'redirect_uri': REDIRECT_URI,
                        }
                        
                        try:
                            response = requests.post(GOOGLE_TOKEN_URL, data=data)
                            st.write(f"Token response status: {response.status_code}")
                            
                            if response.status_code == 200:
                                token_data = response.json()
                                st.write("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω!")
                                
                                access_token = token_data.get('access_token')
                                if access_token:
                                    st.write("2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...")
                                    
                                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                    headers = {'Authorization': f'Bearer {access_token}'}
                                    user_response = requests.get(GOOGLE_USERINFO_URL, headers=headers)
                                    
                                    if user_response.status_code == 200:
                                        user_info = user_response.json()
                                        st.write("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã!")
                                        st.write(f"üë§ –ò–º—è: {user_info.get('name')}")
                                        st.write(f"üìß Email: {user_info.get('email')}")
                                        
                                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session state
                                        st.session_state.authenticated = True
                                        st.session_state.user_info = user_info
                                        st.session_state.access_token = access_token
                                        
                                        st.success("üéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                                        
                                        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
                                        if st.button("üöÄ –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é"):
                                            st.experimental_set_query_params()  # –û—á–∏—â–∞–µ–º URL
                                            st.rerun()
                                    else:
                                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_response.status_code}")
                                        st.write(user_response.text)
                                else:
                                    st.error("‚ùå Access token –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                                    st.write(token_data)
                            else:
                                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status_code}")
                                st.write(response.text)
                                
                        except Exception as e:
                            st.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ URL
                if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å URL –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
                    st.experimental_set_query_params()
                    st.rerun()
                    
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
        else:
            st.write("‚ùå –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö")
            
        # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        st.markdown("---")
        if st.button("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é"):
            st.experimental_set_query_params()
            st.rerun()
            
        return  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ
    
    # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    # –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    if not st.session_state.authenticated:
        show_auth_page()
        return
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    st.title("üá™üá∏ –¢—Ä–µ–Ω–∞–∂–µ—Ä –∏—Å–ø–∞–Ω—Å–∫–∏—Ö –≥–ª–∞–≥–æ–ª–æ–≤")
    st.caption("–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è")
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
    if st.session_state.user_info:
        st.success(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {st.session_state.user_info.get('name')}!")
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if st.button("üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"):
            st.session_state.authenticated = False
            st.session_state.user_info = None
            st.session_state.access_token = None
            st.rerun()
    
    
            
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.title("üá™üá∏ –¢—Ä–µ–Ω–∞–∂–µ—Ä –∏—Å–ø–∞–Ω—Å–∫–∏—Ö –≥–ª–∞–≥–æ–ª–æ–≤")
    st.caption("–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with st.sidebar:
        show_user_panel()
        
        st.markdown("---")
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω
        st.subheader("üìö –í—Ä–µ–º–µ–Ω–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è")
        tense_options = {
            'presente': 'Presente'
        }
        
        new_selected_tenses = []
        for tense_key, tense_name in tense_options.items():
            if st.checkbox(tense_name, value=tense_key in st.session_state.settings['selected_tenses'], key=f"tense_{tense_key}"):
                new_selected_tenses.append(tense_key)
        
        new_selected_tenses = new_selected_tenses or ['presente']
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤
        st.subheader("üéØ –î–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã")
        new_new_cards = st.slider(
            "–ù–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –¥–µ–Ω—å", 1, 50, st.session_state.settings['new_cards_per_day'], key="new_cards_slider"
        )
        new_review_cards = st.slider(
            "–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –≤ –¥–µ–Ω—å", 10, 200, st.session_state.settings['review_cards_per_day'], key="review_cards_slider"
        )
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        st.session_state.settings['selected_tenses'] = new_selected_tenses
        st.session_state.settings['new_cards_per_day'] = new_new_cards
        st.session_state.settings['review_cards_per_day'] = new_review_cards
        
        st.markdown("---")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π", st.session_state.daily_stats['reviews_today'])
            st.metric("–ù–æ–≤—ã—Ö", st.session_state.daily_stats['new_cards_today'])
        with col2:
            st.metric("–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö", st.session_state.daily_stats['correct_today'])
            due_count = len(get_due_cards())
            st.metric("–ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é", due_count)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–∑—É—á–µ–Ω–∏—è
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π
    if not st.session_state.current_card:
        st.session_state.current_card = get_next_card()
        st.session_state.is_revealed = False
    
    if not st.session_state.current_card:
        st.success("üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!")
        st.info("–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.")
        return
    
    card = st.session_state.current_card
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    if (card.verb not in VERBS or 
        card.tense not in CONJUGATIONS or 
        card.verb not in CONJUGATIONS[card.tense]):
        st.error("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã")
        st.session_state.current_card = None
        st.rerun()
        return
    
    verb_info = VERBS[card.verb]
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    st.markdown(f"""
    <div class="card-container">
        <div class="verb-title">{card.verb}</div>
        <div class="verb-translation">{verb_info['translation']}</div>
        <div style="font-size: 1rem; opacity: 0.8; margin-bottom: 1rem;">
            {card.tense.title()}
        </div>
        <div class="pronoun-display">
            {PRONOUNS[card.pronoun_index]}
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–æ—á–∫–µ
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π", card.total_reviews)
    with col2:
        accuracy = (card.correct_reviews / card.total_reviews * 100) if card.total_reviews > 0 else 0
        st.metric("–¢–æ—á–Ω–æ—Å—Ç—å", f"{accuracy:.0f}%")
    with col3:
        st.metric("–õ–µ–≥–∫–æ—Å—Ç—å", f"{card.easiness_factor:.1f}")
    
    if not st.session_state.is_revealed:
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞ –æ—Ç–≤–µ—Ç–∞
        if st.button("üîç –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", type="primary", use_container_width=True):
            st.session_state.is_revealed = True
            st.rerun()
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        conjugation = CONJUGATIONS[card.tense][card.verb][card.pronoun_index]
        
        st.markdown(f"""
        <div class="answer-display">
            ‚úÖ {conjugation}
        </div>
        """, unsafe_allow_html=True)
        
        # –ö–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        st.subheader("üéØ –ö–∞–∫ –ª–µ–≥–∫–æ –±—ã–ª–æ –æ—Ç–≤–µ—Ç–∏—Ç—å?")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.button("‚ùå –°–Ω–æ–≤–∞\n(< 1 –º–∏–Ω)", key="again", use_container_width=True):
                process_answer(Difficulty.AGAIN)
                st.rerun()
        
        with col2:
            if st.button("üòì –°–ª–æ–∂–Ω–æ\n(< 10 –º–∏–Ω)", key="hard", use_container_width=True):
                process_answer(Difficulty.HARD)
                st.rerun()
        
        with col3:
            if st.button("üòä –•–æ—Ä–æ—à–æ\n(4 –¥–Ω—è)", key="good", use_container_width=True):
                process_answer(Difficulty.GOOD)
                st.rerun()
        
        with col4:
            if st.button("üòé –õ–µ–≥–∫–æ\n(> 4 –¥–Ω–µ–π)", key="easy", use_container_width=True):
                process_answer(Difficulty.EASY)
                st.rerun()
        
        st.caption("–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –ª–µ–≥–∫–æ –±—ã–ª–æ –≤—Å–ø–æ–º–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç. –≠—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏.")

if __name__ == "__main__":
    main()
