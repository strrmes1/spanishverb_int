import streamlit as st
import sqlite3
import hashlib
import datetime
import random
import json
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass, asdict
from enum import Enum
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
st.set_page_config(
    page_title="üá™üá∏ –¢—Ä–µ–Ω–∞–∂–µ—Ä –∏—Å–ø–∞–Ω—Å–∫–∏—Ö –≥–ª–∞–≥–æ–ª–æ–≤",
    page_icon="üá™üá∏",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = "spanish_verbs.db"

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main > div {
        max-width: 1200px;
        padding-left: 2rem;
        padding-right: 2rem;
    }
    
    .main-content {
        max-width: 600px;
        margin: 0 auto;
        padding: 0 1rem;
    }
    
    .verb-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 3rem 2rem;
        border-radius: 1rem;
        text-align: center;
        margin: 2rem 0;
        box-shadow: 0 12px 40px rgba(102, 126, 234, 0.3);
        transition: all 0.3s ease;
        cursor: pointer;
    }
    
    .verb-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 15px 45px rgba(102, 126, 234, 0.4);
    }
    
    .verb-card.revealed {
        background: linear-gradient(135deg, #48ca8b 0%, #2dd4bf 100%);
        box-shadow: 0 12px 40px rgba(72, 202, 139, 0.3);
    }
    
    .verb-title {
        font-size: 3.5rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }
    
    .verb-translation {
        font-size: 1.4rem;
        opacity: 0.9;
        margin-bottom: 1.5rem;
    }
    
    .pronoun-display {
        font-size: 2.2rem;
        font-weight: bold;
        margin: 1.5rem 0;
        background: rgba(255,255,255,0.2);
        padding: 1rem 2rem;
        border-radius: 0.5rem;
        display: inline-block;
    }
    
    .answer-display {
        font-size: 2.8rem;
        font-weight: bold;
        background: rgba(255,255,255,0.9);
        color: #2d5e3e;
        padding: 1.5rem 2rem;
        border-radius: 0.5rem;
        margin: 1.5rem 0;
        display: inline-block;
    }
    
    .login-form {
        background: white;
        padding: 2rem;
        border-radius: 1rem;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        margin: 2rem auto;
        max-width: 400px;
    }
    
    .user-panel {
        background: rgba(255,255,255,0.1);
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
        text-align: center;
    }
    
    .click-hint {
        font-size: 1.2rem;
        margin-top: 1rem;
        opacity: 0.8;
        animation: pulse-gentle 2s infinite;
    }
    
    @keyframes pulse-gentle {
        0% { opacity: 0.6; }
        50% { opacity: 1; }
        100% { opacity: 0.6; }
    }
    
    .welcome-hero {
        text-align: center;
        padding: 3rem 0;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-radius: 1rem;
        margin: 2rem 0;
    }
</style>
""", unsafe_allow_html=True)

# –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è SRS
class Difficulty(Enum):
    AGAIN = 0  # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞
    HARD = 1   # –°–ª–æ–∂–Ω–æ
    GOOD = 2   # –•–æ—Ä–æ—à–æ
    EASY = 3   # –õ–µ–≥–∫–æ

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
@dataclass
class Card:
    verb: str
    pronoun_index: int
    tense: str
    easiness_factor: float = 2.5
    interval: int = 1
    repetitions: int = 0
    next_review_date: str = ""
    last_review_date: str = ""
    total_reviews: int = 0
    correct_reviews: int = 0
    
    def __post_init__(self):
        if not self.next_review_date:
            self.next_review_date = datetime.date.today().isoformat()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤
VERBS = {
    'ser': {'translation': '–±—ã—Ç—å, —è–≤–ª—è—Ç—å—Å—è', 'type': 'irregular'},
    'estar': {'translation': '–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è, –±—ã—Ç—å', 'type': 'irregular'},
    'tener': {'translation': '–∏–º–µ—Ç—å', 'type': 'irregular'},
    'hacer': {'translation': '–¥–µ–ª–∞—Ç—å', 'type': 'irregular'},
    'decir': {'translation': '–≥–æ–≤–æ—Ä–∏—Ç—å, —Å–∫–∞–∑–∞—Ç—å', 'type': 'irregular'},
    'ir': {'translation': '–∏–¥—Ç–∏, –µ—Ö–∞—Ç—å', 'type': 'irregular'},
    'ver': {'translation': '–≤–∏–¥–µ—Ç—å', 'type': 'irregular'},
    'dar': {'translation': '–¥–∞–≤–∞—Ç—å', 'type': 'irregular'},
    'saber': {'translation': '–∑–Ω–∞—Ç—å', 'type': 'irregular'},
    'querer': {'translation': '—Ö–æ—Ç–µ—Ç—å, –ª—é–±–∏—Ç—å', 'type': 'irregular'},
    'llegar': {'translation': '–ø—Ä–∏–±—ã–≤–∞—Ç—å, –ø—Ä–∏—Ö–æ–¥–∏—Ç—å', 'type': 'regular-ar'},
    'pasar': {'translation': '–ø—Ä–æ—Ö–æ–¥–∏—Ç—å, –ø—Ä–æ–≤–æ–¥–∏—Ç—å', 'type': 'regular-ar'},
    'deber': {'translation': '–±—ã—Ç—å –¥–æ–ª–∂–Ω—ã–º', 'type': 'regular-er'},
    'poner': {'translation': '–∫–ª–∞—Å—Ç—å, —Å—Ç–∞–≤–∏—Ç—å', 'type': 'irregular'},
    'parecer': {'translation': '–∫–∞–∑–∞—Ç—å—Å—è', 'type': 'irregular'},
    'quedar': {'translation': '–æ—Å—Ç–∞–≤–∞—Ç—å—Å—è', 'type': 'regular-ar'},
    'creer': {'translation': '–≤–µ—Ä–∏—Ç—å, —Å—á–∏—Ç–∞—Ç—å', 'type': 'regular-er'},
    'hablar': {'translation': '–≥–æ–≤–æ—Ä–∏—Ç—å', 'type': 'regular-ar'},
    'llevar': {'translation': '–Ω–æ—Å–∏—Ç—å, –Ω–µ—Å—Ç–∏', 'type': 'regular-ar'},
    'dejar': {'translation': '–æ—Å—Ç–∞–≤–ª—è—Ç—å', 'type': 'regular-ar'},
    'seguir': {'translation': '—Å–ª–µ–¥–æ–≤–∞—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å', 'type': 'irregular'},
    'encontrar': {'translation': '–Ω–∞—Ö–æ–¥–∏—Ç—å, –≤—Å—Ç—Ä–µ—á–∞—Ç—å', 'type': 'irregular'},
    'llamar': {'translation': '–∑–≤–∞—Ç—å, –Ω–∞–∑—ã–≤–∞—Ç—å', 'type': 'regular-ar'},
    'venir': {'translation': '–ø—Ä–∏—Ö–æ–¥–∏—Ç—å', 'type': 'irregular'},
    'pensar': {'translation': '–¥—É–º–∞—Ç—å', 'type': 'irregular'},
    'salir': {'translation': '–≤—ã—Ö–æ–¥–∏—Ç—å', 'type': 'irregular'},
    'vivir': {'translation': '–∂–∏—Ç—å', 'type': 'regular-ir'},
    'sentir': {'translation': '—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å', 'type': 'irregular'},
    'trabajar': {'translation': '—Ä–∞–±–æ—Ç–∞—Ç—å', 'type': 'regular-ar'},
    'estudiar': {'translation': '–∏–∑—É—á–∞—Ç—å', 'type': 'regular-ar'},
    'comprar': {'translation': '–ø–æ–∫—É–ø–∞—Ç—å', 'type': 'regular-ar'},
    'comer': {'translation': '–µ—Å—Ç—å', 'type': 'regular-er'},
    'beber': {'translation': '–ø–∏—Ç—å', 'type': 'regular-er'},
    'escribir': {'translation': '–ø–∏—Å–∞—Ç—å', 'type': 'regular-ir'},
    'leer': {'translation': '—á–∏—Ç–∞—Ç—å', 'type': 'regular-er'},
    'abrir': {'translation': '–æ—Ç–∫—Ä—ã–≤–∞—Ç—å', 'type': 'irregular'},
    'cerrar': {'translation': '–∑–∞–∫—Ä—ã–≤–∞—Ç—å', 'type': 'irregular'},
    'empezar': {'translation': '–Ω–∞—á–∏–Ω–∞—Ç—å', 'type': 'irregular'},
    'terminar': {'translation': '–∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å', 'type': 'regular-ar'},
    'poder': {'translation': '–º–æ—á—å', 'type': 'irregular'}
}

PRONOUNS = ['yo', 't√∫', '√©l/ella', 'nosotros', 'vosotros', 'ellos/ellas']

# –°–ø—Ä—è–∂–µ–Ω–∏—è –≥–ª–∞–≥–æ–ª–æ–≤
CONJUGATIONS = {
    'presente': {
        'ser': ['soy', 'eres', 'es', 'somos', 'sois', 'son'],
        'estar': ['estoy', 'est√°s', 'est√°', 'estamos', 'est√°is', 'est√°n'],
        'tener': ['tengo', 'tienes', 'tiene', 'tenemos', 'ten√©is', 'tienen'],
        'hacer': ['hago', 'haces', 'hace', 'hacemos', 'hac√©is', 'hacen'],
        'decir': ['digo', 'dices', 'dice', 'decimos', 'dec√≠s', 'dicen'],
        'ir': ['voy', 'vas', 'va', 'vamos', 'vais', 'van'],
        'ver': ['veo', 'ves', 've', 'vemos', 'veis', 'ven'],
        'dar': ['doy', 'das', 'da', 'damos', 'dais', 'dan'],
        'saber': ['s√©', 'sabes', 'sabe', 'sabemos', 'sab√©is', 'saben'],
        'querer': ['quiero', 'quieres', 'quiere', 'queremos', 'quer√©is', 'quieren'],
        'llegar': ['llego', 'llegas', 'llega', 'llegamos', 'lleg√°is', 'llegan'],
        'pasar': ['paso', 'pasas', 'pasa', 'pasamos', 'pas√°is', 'pasan'],
        'deber': ['debo', 'debes', 'debe', 'debemos', 'deb√©is', 'deben'],
        'poner': ['pongo', 'pones', 'pone', 'ponemos', 'pon√©is', 'ponen'],
        'parecer': ['parezco', 'pareces', 'parece', 'parecemos', 'parec√©is', 'parecen'],
        'quedar': ['quedo', 'quedas', 'queda', 'quedamos', 'qued√°is', 'quedan'],
        'creer': ['creo', 'crees', 'cree', 'creemos', 'cre√©is', 'creen'],
        'hablar': ['hablo', 'hablas', 'habla', 'hablamos', 'habl√°is', 'hablan'],
        'llevar': ['llevo', 'llevas', 'lleva', 'llevamos', 'llev√°is', 'llevan'],
        'dejar': ['dejo', 'dejas', 'deja', 'dejamos', 'dej√°is', 'dejan'],
        'seguir': ['sigo', 'sigues', 'sigue', 'seguimos', 'segu√≠s', 'siguen'],
        'encontrar': ['encuentro', 'encuentras', 'encuentra', 'encontramos', 'encontr√°is', 'encuentran'],
        'llamar': ['llamo', 'llamas', 'llama', 'llamamos', 'llam√°is', 'llaman'],
        'venir': ['vengo', 'vienes', 'viene', 'venimos', 'ven√≠s', 'vienen'],
        'pensar': ['pienso', 'piensas', 'piensa', 'pensamos', 'pens√°is', 'piensan'],
        'salir': ['salgo', 'sales', 'sale', 'salimos', 'sal√≠s', 'salen'],
        'vivir': ['vivo', 'vives', 'vive', 'vivimos', 'viv√≠s', 'viven'],
        'sentir': ['siento', 'sientes', 'siente', 'sentimos', 'sent√≠s', 'sienten'],
        'trabajar': ['trabajo', 'trabajas', 'trabaja', 'trabajamos', 'trabaj√°is', 'trabajan'],
        'estudiar': ['estudio', 'estudias', 'estudia', 'estudiamos', 'estudi√°is', 'estudian'],
        'comprar': ['compro', 'compras', 'compra', 'compramos', 'compr√°is', 'compran'],
        'comer': ['como', 'comes', 'come', 'comemos', 'com√©is', 'comen'],
        'beber': ['bebo', 'bebes', 'bebe', 'bebemos', 'beb√©is', 'beben'],
        'escribir': ['escribo', 'escribes', 'escribe', 'escribimos', 'escrib√≠s', 'escriben'],
        'leer': ['leo', 'lees', 'lee', 'leemos', 'le√©is', 'leen'],
        'abrir': ['abro', 'abres', 'abre', 'abrimos', 'abr√≠s', 'abren'],
        'cerrar': ['cierro', 'cierras', 'cierra', 'cerramos', 'cerr√°is', 'cierran'],
        'empezar': ['empiezo', 'empiezas', 'empieza', 'empezamos', 'empez√°is', 'empiezan'],
        'terminar': ['termino', 'terminas', 'termina', 'terminamos', 'termin√°is', 'terminan'],
        'poder': ['puedo', 'puedes', 'puede', 'podemos', 'pod√©is', 'pueden']
    },
    'indefinido': {
        'ser': ['fui', 'fuiste', 'fue', 'fuimos', 'fuisteis', 'fueron'],
        'estar': ['estuve', 'estuviste', 'estuvo', 'estuvimos', 'estuvisteis', 'estuvieron'],
        'tener': ['tuve', 'tuviste', 'tuvo', 'tuvimos', 'tuvisteis', 'tuvieron'],
        'hacer': ['hice', 'hiciste', 'hizo', 'hicimos', 'hicisteis', 'hicieron'],
        'decir': ['dije', 'dijiste', 'dijo', 'dijimos', 'dijisteis', 'dijeron'],
        'ir': ['fui', 'fuiste', 'fue', 'fuimos', 'fuisteis', 'fueron'],
        'ver': ['vi', 'viste', 'vio', 'vimos', 'visteis', 'vieron'],
        'dar': ['di', 'diste', 'dio', 'dimos', 'disteis', 'dieron'],
        'saber': ['supe', 'supiste', 'supo', 'supimos', 'supisteis', 'supieron'],
        'querer': ['quise', 'quisiste', 'quiso', 'quisimos', 'quisisteis', 'quisieron'],
        'llegar': ['llegu√©', 'llegaste', 'lleg√≥', 'llegamos', 'llegasteis', 'llegaron'],
        'pasar': ['pas√©', 'pasaste', 'pas√≥', 'pasamos', 'pasasteis', 'pasaron'],
        'deber': ['deb√≠', 'debiste', 'debi√≥', 'debimos', 'debisteis', 'debieron'],
        'poner': ['puse', 'pusiste', 'puso', 'pusimos', 'pusisteis', 'pusieron'],
        'parecer': ['parec√≠', 'pareciste', 'pareci√≥', 'parecimos', 'parecisteis', 'parecieron'],
        'quedar': ['qued√©', 'quedaste', 'qued√≥', 'quedamos', 'quedasteis', 'quedaron'],
        'creer': ['cre√≠', 'cre√≠ste', 'crey√≥', 'cre√≠mos', 'cre√≠steis', 'creyeron'],
        'hablar': ['habl√©', 'hablaste', 'habl√≥', 'hablamos', 'hablasteis', 'hablaron'],
        'trabajar': ['trabaj√©', 'trabajaste', 'trabaj√≥', 'trabajamos', 'trabajasteis', 'trabajaron'],
        'estudiar': ['estudi√©', 'estudiaste', 'estudi√≥', 'estudiamos', 'estudiasteis', 'estudiaron'],
        'poder': ['pude', 'pudiste', 'pudo', 'pudimos', 'pudisteis', 'pudieron']
    },
    'subjuntivo': {
        'ser': ['sea', 'seas', 'sea', 'seamos', 'se√°is', 'sean'],
        'estar': ['est√©', 'est√©s', 'est√©', 'estemos', 'est√©is', 'est√©n'],
        'tener': ['tenga', 'tengas', 'tenga', 'tengamos', 'teng√°is', 'tengan'],
        'hacer': ['haga', 'hagas', 'haga', 'hagamos', 'hag√°is', 'hagan'],
        'decir': ['diga', 'digas', 'diga', 'digamos', 'dig√°is', 'digan'],
        'ir': ['vaya', 'vayas', 'vaya', 'vayamos', 'vay√°is', 'vayan'],
        'ver': ['vea', 'veas', 'vea', 'veamos', 've√°is', 'vean'],
        'dar': ['d√©', 'des', 'd√©', 'demos', 'deis', 'den'],
        'saber': ['sepa', 'sepas', 'sepa', 'sepamos', 'sep√°is', 'sepan'],
        'querer': ['quiera', 'quieras', 'quiera', 'queramos', 'quer√°is', 'quieran'],
        'hablar': ['hable', 'hables', 'hable', 'hablemos', 'habl√©is', 'hablen'],
        'trabajar': ['trabaje', 'trabajes', 'trabaje', 'trabajemos', 'trabaj√©is', 'trabajen'],
        'poder': ['pueda', 'puedas', 'pueda', 'podamos', 'pod√°is', 'puedan']
    },
    'imperfecto': {
        'ser': ['era', 'eras', 'era', '√©ramos', 'erais', 'eran'],
        'estar': ['estaba', 'estabas', 'estaba', 'est√°bamos', 'estabais', 'estaban'],
        'tener': ['ten√≠a', 'ten√≠as', 'ten√≠a', 'ten√≠amos', 'ten√≠ais', 'ten√≠an'],
        'hacer': ['hac√≠a', 'hac√≠as', 'hac√≠a', 'hac√≠amos', 'hac√≠ais', 'hac√≠an'],
        'ir': ['iba', 'ibas', 'iba', '√≠bamos', 'ibais', 'iban'],
        'ver': ['ve√≠a', 've√≠as', 've√≠a', 've√≠amos', 've√≠ais', 've√≠an'],
        'hablar': ['hablaba', 'hablabas', 'hablaba', 'habl√°bamos', 'hablabais', 'hablaban'],
        'trabajar': ['trabajaba', 'trabajabas', 'trabajaba', 'trabaj√°bamos', 'trabajabais', 'trabajaban'],
        'vivir': ['viv√≠a', 'viv√≠as', 'viv√≠a', 'viv√≠amos', 'viv√≠ais', 'viv√≠an'],
        'poder': ['pod√≠a', 'pod√≠as', 'pod√≠a', 'pod√≠amos', 'pod√≠ais', 'pod√≠an']
    }
}

# –ü—Ä–∞–≤–∏–ª–∞ —Å–ø—Ä—è–∂–µ–Ω–∏—è
GRAMMAR_RULES = {
    'presente': {
        'title': '–ù–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è (Presente de Indicativo)',
        'content': '''
**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã -AR:**
–û—Å–Ω–æ–≤–∞ + -o, -as, -a, -amos, -√°is, -an
*Ejemplo: hablar ‚Üí hablo, hablas, habla, hablamos, habl√°is, hablan*

**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã -ER:**
–û—Å–Ω–æ–≤–∞ + -o, -es, -e, -emos, -√©is, -en
*Ejemplo: comer ‚Üí como, comes, come, comemos, com√©is, comen*

**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã -IR:**
–û—Å–Ω–æ–≤–∞ + -o, -es, -e, -imos, -√≠s, -en
*Ejemplo: vivir ‚Üí vivo, vives, vive, vivimos, viv√≠s, viven*

**–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã** –∏–º–µ—é—Ç –æ—Å–æ–±—ã–µ —Ñ–æ—Ä–º—ã —Å–ø—Ä—è–∂–µ–Ω–∏—è.
        '''
    },
    'indefinido': {
        'title': '–ü—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è (Pret√©rito Indefinido)',
        'content': '''
**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã -AR:**
–û—Å–Ω–æ–≤–∞ + -√©, -aste, -√≥, -amos, -asteis, -aron
*Ejemplo: hablar ‚Üí habl√©, hablaste, habl√≥, hablamos, hablasteis, hablaron*

**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã -ER/-IR:**
–û—Å–Ω–æ–≤–∞ + -√≠, -iste, -i√≥, -imos, -isteis, -ieron
*Ejemplo: comer ‚Üí com√≠, comiste, comi√≥, comimos, comisteis, comieron*

**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –ø—Ä–æ—à–ª–æ–º, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏.
        '''
    },
    'subjuntivo': {
        'title': '–°–æ—Å–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∫–ª–æ–Ω–µ–Ω–∏–µ (Subjuntivo Presente)',
        'content': '''
**–ì–ª–∞–≥–æ–ª—ã -AR:**
–û—Å–Ω–æ–≤–∞ + -e, -es, -e, -emos, -√©is, -en
*Ejemplo: hablar ‚Üí hable, hables, hable, hablemos, habl√©is, hablen*

**–ì–ª–∞–≥–æ–ª—ã -ER/-IR:**
–û—Å–Ω–æ–≤–∞ + -a, -as, -a, -amos, -√°is, -an
*Ejemplo: comer ‚Üí coma, comas, coma, comamos, com√°is, coman*

**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** –°–æ–º–Ω–µ–Ω–∏—è, –∂–µ–ª–∞–Ω–∏—è, —ç–º–æ—Ü–∏–∏, –Ω–µ—Ä–µ–∞–ª—å–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏.
        '''
    },
    'imperfecto': {
        'title': '–ü—Ä–æ—à–µ–¥—à–µ–µ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (Pret√©rito Imperfecto)',
        'content': '''
**–ì–ª–∞–≥–æ–ª—ã -AR:**
–û—Å–Ω–æ–≤–∞ + -aba, -abas, -aba, -√°bamos, -abais, -aban
*Ejemplo: hablar ‚Üí hablaba, hablabas, hablaba, habl√°bamos, hablabais, hablaban*

**–ì–ª–∞–≥–æ–ª—ã -ER/-IR:**
–û—Å–Ω–æ–≤–∞ + -√≠a, -√≠as, -√≠a, -√≠amos, -√≠ais, -√≠an
*Ejemplo: vivir ‚Üí viv√≠a, viv√≠as, viv√≠a, viv√≠amos, viv√≠ais, viv√≠an*

**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –¥–µ–π—Å—Ç–≤–∏—è –≤ –ø—Ä–æ—à–ª–æ–º, –æ–ø–∏—Å–∞–Ω–∏—è, –ø—Ä–∏–≤—ã—á–∫–∏.
        '''
    }
}

# –°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (SRS)
class SRSManager:
    @staticmethod
    def calculate_next_interval(card: Card, difficulty: Difficulty) -> Tuple[int, float]:
        """–ê–ª–≥–æ—Ä–∏—Ç–º SM-2 –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        ef = card.easiness_factor
        interval = card.interval
        repetitions = card.repetitions
        
        if difficulty == Difficulty.AGAIN:
            return 1, max(1.3, ef - 0.2)
        
        if repetitions == 0:
            interval = 1
        elif repetitions == 1:
            interval = 6
        else:
            interval = int(interval * ef)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º easiness factor
        if difficulty == Difficulty.EASY:
            ef = ef + 0.15
        elif difficulty == Difficulty.GOOD:
            ef = ef + 0.1
        elif difficulty == Difficulty.HARD:
            ef = ef - 0.15
        
        ef = max(1.3, min(3.0, ef))
        return interval, ef
    
    @staticmethod
    def update_card(card: Card, difficulty: Difficulty) -> Card:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞"""
        today = datetime.date.today()
        
        card.total_reviews += 1
        if difficulty in [Difficulty.GOOD, Difficulty.EASY]:
            card.correct_reviews += 1
        
        if difficulty == Difficulty.AGAIN:
            card.repetitions = 0
        else:
            card.repetitions += 1
        
        new_interval, new_ef = SRSManager.calculate_next_interval(card, difficulty)
        
        card.interval = new_interval
        card.easiness_factor = new_ef
        card.last_review_date = today.isoformat()
        card.next_review_date = (today + datetime.timedelta(days=new_interval)).isoformat()
        
        return card

# ===== –§–£–ù–ö–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• =====

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            email TEXT UNIQUE NOT NULL,
            password_hash TEXT NOT NULL,
            name TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_login TIMESTAMP,
            settings TEXT DEFAULT '{}'
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS cards (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            verb TEXT NOT NULL,
            pronoun_index INTEGER NOT NULL,
            tense TEXT NOT NULL,
            easiness_factor REAL DEFAULT 2.5,
            interval_days INTEGER DEFAULT 1,
            repetitions INTEGER DEFAULT 0,
            next_review_date TEXT NOT NULL,
            last_review_date TEXT,
            total_reviews INTEGER DEFAULT 0,
            correct_reviews INTEGER DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id),
            UNIQUE(user_id, verb, pronoun_index, tense)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS daily_stats (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            date TEXT NOT NULL,
            reviews_count INTEGER DEFAULT 0,
            correct_count INTEGER DEFAULT 0,
            new_cards_count INTEGER DEFAULT 0,
            study_time_minutes INTEGER DEFAULT 0,
            FOREIGN KEY (user_id) REFERENCES users (id),
            UNIQUE(user_id, date)
        )
    ''')
    
    conn.commit()
    conn.close()

def hash_password(password: str) -> str:
    """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
    return hashlib.sha256(password.encode()).hexdigest()

def verify_password(password: str, password_hash: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è"""
    return hash_password(password) == password_hash

def create_user(email: str, password: str, name: str) -> bool:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        password_hash = hash_password(password)
        cursor.execute(
            "INSERT INTO users (email, password_hash, name) VALUES (?, ?, ?)",
            (email, password_hash, name)
        )
        
        conn.commit()
        conn.close()
        return True
    except sqlite3.IntegrityError:
        return False  # Email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

def authenticate_user(email: str, password: str) -> Optional[dict]:
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute(
            "SELECT id, email, password_hash, name, settings FROM users WHERE email = ?",
            (email,)
        )
        
        user = cursor.fetchone()
        
        if user and verify_password(password, user[2]):
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
            cursor.execute(
                "UPDATE users SET last_login = CURRENT_TIMESTAMP WHERE id = ?",
                (user[0],)
            )
            conn.commit()
            
            user_data = {
                'id': user[0],
                'email': user[1],
                'name': user[3],
                'settings': json.loads(user[4] or '{}')
            }
            
            conn.close()
            return user_data
        
        conn.close()
        return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return None

def save_user_settings(user_id: int, settings: dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute(
            "UPDATE users SET settings = ? WHERE id = ?",
            (json.dumps(settings), user_id)
        )
        
        conn.commit()
        conn.close()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

def load_user_cards(user_id: int) -> Dict[str, Card]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT verb, pronoun_index, tense, easiness_factor, interval_days,
                   repetitions, next_review_date, last_review_date,
                   total_reviews, correct_reviews
            FROM cards WHERE user_id = ?
        ''', (user_id,))
        
        cards = {}
        for row in cursor.fetchall():
            card = Card(
                verb=row[0],
                pronoun_index=row[1],
                tense=row[2],
                easiness_factor=row[3],
                interval=row[4],
                repetitions=row[5],
                next_review_date=row[6],
                last_review_date=row[7],
                total_reviews=row[8],
                correct_reviews=row[9]
            )
            key = f"{row[0]}_{row[1]}_{row[2]}"
            cards[key] = card
        
        conn.close()
        return cards
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫: {e}")
        return {}

def save_card(user_id: int, card: Card):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO cards 
            (user_id, verb, pronoun_index, tense, easiness_factor, interval_days,
             repetitions, next_review_date, last_review_date, total_reviews, 
             correct_reviews, updated_at)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
        ''', (
            user_id, card.verb, card.pronoun_index, card.tense,
            card.easiness_factor, card.interval, card.repetitions,
            card.next_review_date, card.last_review_date,
            card.total_reviews, card.correct_reviews
        ))
        
        conn.commit()
        conn.close()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")

def update_daily_stats(user_id: int, reviews_count: int = 0, correct_count: int = 0, new_cards_count: int = 0):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        today = datetime.date.today().isoformat()
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO daily_stats 
            (user_id, date, reviews_count, correct_count, new_cards_count)
            VALUES (?, ?, 
                    COALESCE((SELECT reviews_count FROM daily_stats WHERE user_id = ? AND date = ?), 0) + ?,
                    COALESCE((SELECT correct_count FROM daily_stats WHERE user_id = ? AND date = ?), 0) + ?,
                    COALESCE((SELECT new_cards_count FROM daily_stats WHERE user_id = ? AND date = ?), 0) + ?)
        ''', (user_id, today, user_id, today, reviews_count, user_id, today, correct_count, user_id, today, new_cards_count))
        
        conn.commit()
        conn.close()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def get_daily_stats(user_id: int) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        today = datetime.date.today().isoformat()
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT reviews_count, correct_count, new_cards_count
            FROM daily_stats WHERE user_id = ? AND date = ?
        ''', (user_id, today))
        
        result = cursor.fetchone()
        conn.close()
        
        if result:
            return {
                'reviews_today': result[0],
                'correct_today': result[1],
                'new_cards_today': result[2]
            }
        else:
            return {
                'reviews_today': 0,
                'correct_today': 0,
                'new_cards_today': 0
            }
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {'reviews_today': 0, 'correct_today': 0, 'new_cards_today': 0}

# ===== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====

def init_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state"""
    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False
    if 'user' not in st.session_state:
        st.session_state.user = None
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if 'cards' not in st.session_state:
        st.session_state.cards = {}
    if 'current_card' not in st.session_state:
        st.session_state.current_card = None
    if 'is_revealed' not in st.session_state:
        st.session_state.is_revealed = False
    if 'daily_stats' not in st.session_state:
        st.session_state.daily_stats = {
            'reviews_today': 0,
            'correct_today': 0,
            'new_cards_today': 0
        }
    if 'settings' not in st.session_state:
        st.session_state.settings = {
            'new_cards_per_day': 10,
            'selected_tenses': ['presente']
        }

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_database()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
    init_session_state()
    
    # –ì–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
    if st.session_state.authenticated:
        show_main_app()
    else:
        show_auth_page()

def show_auth_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    st.markdown("""
    <div class="welcome-hero">
        <h1 style="font-size: 4rem; margin-bottom: 1rem;">
            üá™üá∏ –¢—Ä–µ–Ω–∞–∂–µ—Ä –∏—Å–ø–∞–Ω—Å–∫–∏—Ö –≥–ª–∞–≥–æ–ª–æ–≤
        </h1>
        <h3 style="font-weight: 400; margin-bottom: 2rem;">
            –ò–∑—É—á–∞–π—Ç–µ —Å–ø—Ä—è–∂–µ–Ω–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        </h3>
    </div>
    """, unsafe_allow_html=True)
    
    # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è –≤—Ö–æ–¥–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    tab1, tab2 = st.tabs(["üîë –í—Ö–æ–¥", "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])
    
    with tab1:
        show_login_form()
    
    with tab2:
        show_registration_form()

def show_login_form():
    """–§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞"""
    st.markdown('<div class="login-form">', unsafe_allow_html=True)
    st.subheader("üîë –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
    
    with st.form("login_form"):
        email = st.text_input("üìß Email", placeholder="example@mail.com")
        password = st.text_input("üîí –ü–∞—Ä–æ–ª—å", type="password", placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
        submit = st.form_submit_button("üöÄ –í–æ–π—Ç–∏", use_container_width=True, type="primary")
        
        if submit:
            if not email or not password:
                st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
                return
            
            user = authenticate_user(email, password)
            if user:
                st.session_state.authenticated = True
                st.session_state.user = user
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                st.session_state.cards = load_user_cards(user['id'])
                st.session_state.daily_stats = get_daily_stats(user['id'])
                st.session_state.settings.update(user.get('settings', {}))
                
                st.success("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!")
                st.rerun()
            else:
                st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å!")
    
    st.markdown('</div>', unsafe_allow_html=True)

def show_registration_form():
    """–§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    st.markdown('<div class="login-form">', unsafe_allow_html=True)
    st.subheader("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    
    with st.form("registration_form"):
        name = st.text_input("üë§ –ò–º—è", placeholder="–í–∞—à–µ –∏–º—è")
        email = st.text_input("üìß Email", placeholder="example@mail.com")
        password = st.text_input("üîí –ü–∞—Ä–æ–ª—å", type="password", placeholder="–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤")
        password_confirm = st.text_input("üîí –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è", type="password", placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
        submit = st.form_submit_button("‚ú® –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", use_container_width=True, type="primary")
        
        if submit:
            if not all([name, email, password, password_confirm]):
                st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
                return
            
            if len(password) < 6:
                st.error("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤!")
                return
            
            if password != password_confirm:
                st.error("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
                return
            
            if "@" not in email or "." not in email:
                st.error("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email!")
                return
            
            if create_user(email, password, name):
                st.success("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
            else:
                st.error("‚ùå Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
    
    st.markdown('</div>', unsafe_allow_html=True)

def show_main_app():
    """–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    user = st.session_state.user
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("üá™üá∏ –¢—Ä–µ–Ω–∞–∂–µ—Ä –∏—Å–ø–∞–Ω—Å–∫–∏—Ö –≥–ª–∞–≥–æ–ª–æ–≤")
    st.caption(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['name']}! –°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        show_user_panel()
        show_sidebar_content()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    show_learning_interface()

def show_user_panel():
    """–ü–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = st.session_state.user
    
    st.markdown(f"""
    <div class="user-panel">
        <strong>üë§ {user['name']}</strong><br>
        <small>{user['email']}</small>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", use_container_width=True):
            save_all_data()
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    
    with col2:
        if st.button("üö™ –í—ã–π—Ç–∏", use_container_width=True):
            logout()

def show_sidebar_content():
    """–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
    st.markdown("---")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    current_settings = st.session_state.settings.copy()
    
    # –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω
    tense_options = {
        'presente': 'Presente',
        'indefinido': 'Pret√©rito Indefinido',
        'subjuntivo': 'Subjuntivo',
        'imperfecto': 'Imperfecto'
    }
    
    new_selected_tenses = []
    for tense_key, tense_name in tense_options.items():
        if st.checkbox(tense_name, value=tense_key in st.session_state.settings['selected_tenses'], key=f"tense_{tense_key}"):
            new_selected_tenses.append(tense_key)
    
    new_selected_tenses = new_selected_tenses or ['presente']
    
    # –õ–∏–º–∏—Ç—ã
    new_cards_per_day = st.slider(
        "–ù–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –¥–µ–Ω—å", 1, 50, st.session_state.settings['new_cards_per_day']
    )
    
    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    settings_changed = (
        current_settings['selected_tenses'] != new_selected_tenses or
        current_settings['new_cards_per_day'] != new_cards_per_day
    )
    
    if settings_changed:
        if st.button("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å", use_container_width=True, type="primary"):
            st.session_state.settings['selected_tenses'] = new_selected_tenses
            st.session_state.settings['new_cards_per_day'] = new_cards_per_day
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            save_user_settings(st.session_state.user['id'], st.session_state.settings)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            st.session_state.current_card = None
            st.session_state.is_revealed = False
            
            st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
            st.rerun()
    
    st.markdown("---")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.subheader("üìä –°–µ–≥–æ–¥–Ω—è")
    stats = st.session_state.daily_stats
    
    col1, col2 = st.columns(2)
    with col1:
        st.metric("–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π", stats['reviews_today'])
        st.metric("–ù–æ–≤—ã—Ö", stats['new_cards_today'])
    with col2:
        st.metric("–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö", stats['correct_today'])
        due_count = len(get_due_cards())
        st.metric("–ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é", due_count)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_cards = len(st.session_state.cards)
    total_reviews = sum(card.total_reviews for card in st.session_state.cards.values())
    total_correct = sum(card.correct_reviews for card in st.session_state.cards.values())
    accuracy = (total_correct / total_reviews * 100) if total_reviews > 0 else 0
    
    st.subheader("üìà –í—Å–µ–≥–æ")
    st.metric("–ö–∞—Ä—Ç–æ—á–µ–∫", total_cards)
    st.metric("–¢–æ—á–Ω–æ—Å—Ç—å", f"{accuracy:.1f}%")

def show_learning_interface():
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–∑—É—á–µ–Ω–∏—è"""
    with st.container():
        st.markdown('<div class="main-content">', unsafe_allow_html=True)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        if not st.session_state.current_card:
            st.session_state.current_card = get_next_card()
            st.session_state.is_revealed = False
        
        if not st.session_state.current_card:
            st.success("üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!")
            st.info("–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.")
            
            if st.button("üîÑ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É"):
                force_new_card()
            st.markdown('</div>', unsafe_allow_html=True)
            return
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        show_verb_card()
        
        st.markdown('</div>', unsafe_allow_html=True)

def show_verb_card():
    """–ö–∞—Ä—Ç–æ—á–∫–∞ –≥–ª–∞–≥–æ–ª–∞"""
    card = st.session_state.current_card
    
    if (card.verb not in VERBS or 
        card.tense not in CONJUGATIONS or 
        card.verb not in CONJUGATIONS[card.tense]):
        st.error("‚ùå –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã")
        next_card()
        return
    
    verb_info = VERBS[card.verb]
    is_revealed = st.session_state.is_revealed
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    if not is_revealed:
        st.markdown(f"""
        <div class="verb-card">
            <div class="verb-title">{card.verb}</div>
            <div class="verb-translation">{verb_info['translation']}</div>
            <div style="font-size: 1.2rem; opacity: 0.8; margin-bottom: 1rem;">
                {get_tense_name(card.tense)}
            </div>
            <div class="pronoun-display">
                {PRONOUNS[card.pronoun_index]}
            </div>
            <div class="click-hint">
                üîç –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—Ç–≤–µ—Ç
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2, col3 = st.columns([1, 3, 1])
        with col2:
            if st.button("üîç –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", type="primary", use_container_width=True):
                st.session_state.is_revealed = True
                st.rerun()
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        conjugation = CONJUGATIONS[card.tense][card.verb][card.pronoun_index]
        
        st.markdown(f"""
        <div class="verb-card revealed">
            <div class="verb-title">{card.verb}</div>
            <div class="verb-translation">{verb_info['translation']}</div>
            <div style="font-size: 1.2rem; opacity: 0.8; margin-bottom: 1rem;">
                {get_tense_name(card.tense)}
            </div>
            <div class="pronoun-display">
                {PRONOUNS[card.pronoun_index]}
            </div>
            <div class="answer-display">
                ‚úÖ {conjugation}
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # –ö–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        st.subheader("üéØ –ö–∞–∫ —Ö–æ—Ä–æ—à–æ –≤—ã –∑–Ω–∞–ª–∏ –æ—Ç–≤–µ—Ç?")
        st.caption("–ß–µ—Å—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ–º–æ–∂–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º—É –ª—É—á—à–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.button("‚ùå –°–Ω–æ–≤–∞\n(< 1 –º–∏–Ω)", key="again", use_container_width=True):
                process_answer(Difficulty.AGAIN)
        
        with col2:
            if st.button("üòì –°–ª–æ–∂–Ω–æ\n(< 10 –º–∏–Ω)", key="hard", use_container_width=True):
                process_answer(Difficulty.HARD)
        
        with col3:
            if st.button("üòä –•–æ—Ä–æ—à–æ\n(4 –¥–Ω—è)", key="good", use_container_width=True):
                process_answer(Difficulty.GOOD)
        
        with col4:
            if st.button("üòé –õ–µ–≥–∫–æ\n(> 4 –¥–Ω–µ–π)", key="easy", use_container_width=True):
                process_answer(Difficulty.EASY)
    
    # –ü—Ä–∞–≤–∏–ª–∞ —Å–ø—Ä—è–∂–µ–Ω–∏—è
    st.markdown("---")
    st.subheader("üìö –ü—Ä–∞–≤–∏–ª–∞ —Å–ø—Ä—è–∂–µ–Ω–∏—è")
    
    for tense in st.session_state.settings['selected_tenses']:
        if tense in GRAMMAR_RULES:
            with st.expander(f"{GRAMMAR_RULES[tense]['title']}", expanded=False):
                st.markdown(GRAMMAR_RULES[tense]['content'])

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

def get_tense_name(tense):
    """–ù–∞–∑–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
    names = {
        'presente': 'Presente',
        'indefinido': 'Pret√©rito Indefinido',
        'subjuntivo': 'Subjuntivo',
        'imperfecto': 'Imperfecto'
    }
    return names.get(tense, tense)

def get_card_key(verb: str, pronoun_index: int, tense: str) -> str:
    """–ö–ª—é—á –∫–∞—Ä—Ç–æ—á–∫–∏"""
    return f"{verb}_{pronoun_index}_{tense}"

def get_or_create_card(verb: str, pronoun_index: int, tense: str) -> Card:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏"""
    key = get_card_key(verb, pronoun_index, tense)
    
    if key not in st.session_state.cards:
        st.session_state.cards[key] = Card(
            verb=verb,
            pronoun_index=pronoun_index,
            tense=tense
        )
    
    return st.session_state.cards[key]

def get_due_cards() -> List[Card]:
    """–ö–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    today = datetime.date.today().isoformat()
    
    due_cards = []
    for card in st.session_state.cards.values():
        if (card.next_review_date <= today and 
            card.tense in st.session_state.settings['selected_tenses']):
            due_cards.append(card)
    
    return sorted(due_cards, key=lambda x: x.next_review_date)

def get_new_cards() -> List[Tuple[str, int, str]]:
    """–ù–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏"""
    new_cards = []
    existing_keys = set(st.session_state.cards.keys())
    
    for tense in st.session_state.settings['selected_tenses']:
        if tense not in CONJUGATIONS:
            continue
            
        for verb in CONJUGATIONS[tense]:
            if verb not in VERBS:
                continue
                
            for pronoun_index in range(6):
                key = get_card_key(verb, pronoun_index, tense)
                if key not in existing_keys:
                    new_cards.append((verb, pronoun_index, tense))
    
    random.shuffle(new_cards)
    return new_cards

def get_next_card() -> Optional[Card]:
    """–°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞"""
    # –°–Ω–∞—á–∞–ª–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    due_cards = get_due_cards()
    if due_cards:
        return due_cards[0]
    
    # –ó–∞—Ç–µ–º –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    stats = st.session_state.daily_stats
    if stats['new_cards_today'] < st.session_state.settings['new_cards_per_day']:
        new_cards = get_new_cards()
        if new_cards:
            verb, pronoun_index, tense = new_cards[0]
            return get_or_create_card(verb, pronoun_index, tense)
    
    return None

def process_answer(difficulty: Difficulty):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞"""
    if not st.session_state.current_card:
        return
    
    card = st.session_state.current_card
    is_new_card = card.total_reviews == 0
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å –ø–æ–º–æ—â—å—é SRS
    updated_card = SRSManager.update_card(card, difficulty)
    card_key = get_card_key(updated_card.verb, updated_card.pronoun_index, updated_card.tense)
    st.session_state.cards[card_key] = updated_card
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    save_card(st.session_state.user['id'], updated_card)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    reviews_increment = 1
    correct_increment = 1 if difficulty in [Difficulty.GOOD, Difficulty.EASY] else 0
    new_cards_increment = 1 if is_new_card else 0
    
    st.session_state.daily_stats['reviews_today'] += reviews_increment
    st.session_state.daily_stats['correct_today'] += correct_increment
    st.session_state.daily_stats['new_cards_today'] += new_cards_increment
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î
    update_daily_stats(
        st.session_state.user['id'], 
        reviews_increment, 
        correct_increment, 
        new_cards_increment
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ
    next_card()

def next_card():
    """–°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞"""
    st.session_state.current_card = None
    st.session_state.is_revealed = False
    st.rerun()

def force_new_card():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –Ω–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞"""
    new_cards = get_new_cards()
    if new_cards:
        verb, pronoun_index, tense = random.choice(new_cards)
        st.session_state.current_card = get_or_create_card(verb, pronoun_index, tense)
        st.session_state.is_revealed = False
        st.rerun()

def save_all_data():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
    user_id = st.session_state.user['id']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    for card in st.session_state.cards.values():
        save_card(user_id, card)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    save_user_settings(user_id, st.session_state.settings)

def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
    save_all_data()
    
    # –û—á–∏—â–∞–µ–º session state
    st.session_state.authenticated = False
    st.session_state.user = None
    st.session_state.cards = {}
    st.session_state.current_card = None
    st.session_state.is_revealed = False
    st.session_state.daily_stats = {
        'reviews_today': 0,
        'correct_today': 0,
        'new_cards_today': 0
    }
    st.session_state.settings = {
        'new_cards_per_day': 10,
        'selected_tenses': ['presente']
    }
    
    st.success("üëã –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    st.rerun()

if __name__ == "__main__":
    main()
